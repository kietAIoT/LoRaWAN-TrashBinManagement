
BIN_System_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ec  080073ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080073ec  080073ec  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073ec  080073ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080073f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000068  0800745c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800745c  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e46e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b9  00000000  00000000  0002e542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af4  00000000  00000000  00031718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cb0  00000000  00000000  0003220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e2e  00000000  00000000  0004aebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b07d  00000000  00000000  0005bcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004530  00000000  00000000  000e6d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000eb298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080070c0 	.word	0x080070c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080070c0 	.word	0x080070c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_fmul>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d06f      	beq.n	80006d0 <__aeabi_fmul+0xf8>
 80005f0:	441a      	add	r2, r3
 80005f2:	ea80 0c01 	eor.w	ip, r0, r1
 80005f6:	0240      	lsls	r0, r0, #9
 80005f8:	bf18      	it	ne
 80005fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80005fe:	d01e      	beq.n	800063e <__aeabi_fmul+0x66>
 8000600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000604:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000608:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800060c:	fba0 3101 	umull	r3, r1, r0, r1
 8000610:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000614:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000618:	bf3e      	ittt	cc
 800061a:	0049      	lslcc	r1, r1, #1
 800061c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000620:	005b      	lslcc	r3, r3, #1
 8000622:	ea40 0001 	orr.w	r0, r0, r1
 8000626:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800062a:	2afd      	cmp	r2, #253	; 0xfd
 800062c:	d81d      	bhi.n	800066a <__aeabi_fmul+0x92>
 800062e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000632:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000636:	bf08      	it	eq
 8000638:	f020 0001 	biceq.w	r0, r0, #1
 800063c:	4770      	bx	lr
 800063e:	f090 0f00 	teq	r0, #0
 8000642:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	0249      	lsleq	r1, r1, #9
 800064a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800064e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000652:	3a7f      	subs	r2, #127	; 0x7f
 8000654:	bfc2      	ittt	gt
 8000656:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800065a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800065e:	4770      	bxgt	lr
 8000660:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	3a01      	subs	r2, #1
 800066a:	dc5d      	bgt.n	8000728 <__aeabi_fmul+0x150>
 800066c:	f112 0f19 	cmn.w	r2, #25
 8000670:	bfdc      	itt	le
 8000672:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000676:	4770      	bxle	lr
 8000678:	f1c2 0200 	rsb	r2, r2, #0
 800067c:	0041      	lsls	r1, r0, #1
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	f1c2 0220 	rsb	r2, r2, #32
 8000686:	fa00 fc02 	lsl.w	ip, r0, r2
 800068a:	ea5f 0031 	movs.w	r0, r1, rrx
 800068e:	f140 0000 	adc.w	r0, r0, #0
 8000692:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000696:	bf08      	it	eq
 8000698:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800069c:	4770      	bx	lr
 800069e:	f092 0f00 	teq	r2, #0
 80006a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006a6:	bf02      	ittt	eq
 80006a8:	0040      	lsleq	r0, r0, #1
 80006aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ae:	3a01      	subeq	r2, #1
 80006b0:	d0f9      	beq.n	80006a6 <__aeabi_fmul+0xce>
 80006b2:	ea40 000c 	orr.w	r0, r0, ip
 80006b6:	f093 0f00 	teq	r3, #0
 80006ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006be:	bf02      	ittt	eq
 80006c0:	0049      	lsleq	r1, r1, #1
 80006c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006c6:	3b01      	subeq	r3, #1
 80006c8:	d0f9      	beq.n	80006be <__aeabi_fmul+0xe6>
 80006ca:	ea41 010c 	orr.w	r1, r1, ip
 80006ce:	e78f      	b.n	80005f0 <__aeabi_fmul+0x18>
 80006d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006d4:	ea92 0f0c 	teq	r2, ip
 80006d8:	bf18      	it	ne
 80006da:	ea93 0f0c 	teqne	r3, ip
 80006de:	d00a      	beq.n	80006f6 <__aeabi_fmul+0x11e>
 80006e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006e4:	bf18      	it	ne
 80006e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ea:	d1d8      	bne.n	800069e <__aeabi_fmul+0xc6>
 80006ec:	ea80 0001 	eor.w	r0, r0, r1
 80006f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80006f4:	4770      	bx	lr
 80006f6:	f090 0f00 	teq	r0, #0
 80006fa:	bf17      	itett	ne
 80006fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000700:	4608      	moveq	r0, r1
 8000702:	f091 0f00 	teqne	r1, #0
 8000706:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800070a:	d014      	beq.n	8000736 <__aeabi_fmul+0x15e>
 800070c:	ea92 0f0c 	teq	r2, ip
 8000710:	d101      	bne.n	8000716 <__aeabi_fmul+0x13e>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	d10f      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000716:	ea93 0f0c 	teq	r3, ip
 800071a:	d103      	bne.n	8000724 <__aeabi_fmul+0x14c>
 800071c:	024b      	lsls	r3, r1, #9
 800071e:	bf18      	it	ne
 8000720:	4608      	movne	r0, r1
 8000722:	d108      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000724:	ea80 0001 	eor.w	r0, r0, r1
 8000728:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800072c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000730:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000734:	4770      	bx	lr
 8000736:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800073a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800073e:	4770      	bx	lr

08000740 <__aeabi_fdiv>:
 8000740:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000744:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000748:	bf1e      	ittt	ne
 800074a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800074e:	ea92 0f0c 	teqne	r2, ip
 8000752:	ea93 0f0c 	teqne	r3, ip
 8000756:	d069      	beq.n	800082c <__aeabi_fdiv+0xec>
 8000758:	eba2 0203 	sub.w	r2, r2, r3
 800075c:	ea80 0c01 	eor.w	ip, r0, r1
 8000760:	0249      	lsls	r1, r1, #9
 8000762:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000766:	d037      	beq.n	80007d8 <__aeabi_fdiv+0x98>
 8000768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800076c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000770:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000774:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000778:	428b      	cmp	r3, r1
 800077a:	bf38      	it	cc
 800077c:	005b      	lslcc	r3, r3, #1
 800077e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000782:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000786:	428b      	cmp	r3, r1
 8000788:	bf24      	itt	cs
 800078a:	1a5b      	subcs	r3, r3, r1
 800078c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000790:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000794:	bf24      	itt	cs
 8000796:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800079a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800079e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80007a2:	bf24      	itt	cs
 80007a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80007a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80007b0:	bf24      	itt	cs
 80007b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80007b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	bf18      	it	ne
 80007be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80007c2:	d1e0      	bne.n	8000786 <__aeabi_fdiv+0x46>
 80007c4:	2afd      	cmp	r2, #253	; 0xfd
 80007c6:	f63f af50 	bhi.w	800066a <__aeabi_fmul+0x92>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007d0:	bf08      	it	eq
 80007d2:	f020 0001 	biceq.w	r0, r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e0:	327f      	adds	r2, #127	; 0x7f
 80007e2:	bfc2      	ittt	gt
 80007e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007ec:	4770      	bxgt	lr
 80007ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	3a01      	subs	r2, #1
 80007f8:	e737      	b.n	800066a <__aeabi_fmul+0x92>
 80007fa:	f092 0f00 	teq	r2, #0
 80007fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000802:	bf02      	ittt	eq
 8000804:	0040      	lsleq	r0, r0, #1
 8000806:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800080a:	3a01      	subeq	r2, #1
 800080c:	d0f9      	beq.n	8000802 <__aeabi_fdiv+0xc2>
 800080e:	ea40 000c 	orr.w	r0, r0, ip
 8000812:	f093 0f00 	teq	r3, #0
 8000816:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800081a:	bf02      	ittt	eq
 800081c:	0049      	lsleq	r1, r1, #1
 800081e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000822:	3b01      	subeq	r3, #1
 8000824:	d0f9      	beq.n	800081a <__aeabi_fdiv+0xda>
 8000826:	ea41 010c 	orr.w	r1, r1, ip
 800082a:	e795      	b.n	8000758 <__aeabi_fdiv+0x18>
 800082c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000830:	ea92 0f0c 	teq	r2, ip
 8000834:	d108      	bne.n	8000848 <__aeabi_fdiv+0x108>
 8000836:	0242      	lsls	r2, r0, #9
 8000838:	f47f af7d 	bne.w	8000736 <__aeabi_fmul+0x15e>
 800083c:	ea93 0f0c 	teq	r3, ip
 8000840:	f47f af70 	bne.w	8000724 <__aeabi_fmul+0x14c>
 8000844:	4608      	mov	r0, r1
 8000846:	e776      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000848:	ea93 0f0c 	teq	r3, ip
 800084c:	d104      	bne.n	8000858 <__aeabi_fdiv+0x118>
 800084e:	024b      	lsls	r3, r1, #9
 8000850:	f43f af4c 	beq.w	80006ec <__aeabi_fmul+0x114>
 8000854:	4608      	mov	r0, r1
 8000856:	e76e      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000858:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800085c:	bf18      	it	ne
 800085e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000862:	d1ca      	bne.n	80007fa <__aeabi_fdiv+0xba>
 8000864:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000868:	f47f af5c 	bne.w	8000724 <__aeabi_fmul+0x14c>
 800086c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000870:	f47f af3c 	bne.w	80006ec <__aeabi_fmul+0x114>
 8000874:	e75f      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000876:	bf00      	nop

08000878 <__gesf2>:
 8000878:	f04f 3cff 	mov.w	ip, #4294967295
 800087c:	e006      	b.n	800088c <__cmpsf2+0x4>
 800087e:	bf00      	nop

08000880 <__lesf2>:
 8000880:	f04f 0c01 	mov.w	ip, #1
 8000884:	e002      	b.n	800088c <__cmpsf2+0x4>
 8000886:	bf00      	nop

08000888 <__cmpsf2>:
 8000888:	f04f 0c01 	mov.w	ip, #1
 800088c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000890:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000894:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800089c:	bf18      	it	ne
 800089e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008a2:	d011      	beq.n	80008c8 <__cmpsf2+0x40>
 80008a4:	b001      	add	sp, #4
 80008a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80008aa:	bf18      	it	ne
 80008ac:	ea90 0f01 	teqne	r0, r1
 80008b0:	bf58      	it	pl
 80008b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80008b6:	bf88      	it	hi
 80008b8:	17c8      	asrhi	r0, r1, #31
 80008ba:	bf38      	it	cc
 80008bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80008c0:	bf18      	it	ne
 80008c2:	f040 0001 	orrne.w	r0, r0, #1
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	d102      	bne.n	80008d4 <__cmpsf2+0x4c>
 80008ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80008d2:	d105      	bne.n	80008e0 <__cmpsf2+0x58>
 80008d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80008d8:	d1e4      	bne.n	80008a4 <__cmpsf2+0x1c>
 80008da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80008de:	d0e1      	beq.n	80008a4 <__cmpsf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cfrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4608      	mov	r0, r1
 80008ec:	4661      	mov	r1, ip
 80008ee:	e7ff      	b.n	80008f0 <__aeabi_cfcmpeq>

080008f0 <__aeabi_cfcmpeq>:
 80008f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80008f2:	f7ff ffc9 	bl	8000888 <__cmpsf2>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	bf48      	it	mi
 80008fa:	f110 0f00 	cmnmi.w	r0, #0
 80008fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000900 <__aeabi_fcmpeq>:
 8000900:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000904:	f7ff fff4 	bl	80008f0 <__aeabi_cfcmpeq>
 8000908:	bf0c      	ite	eq
 800090a:	2001      	moveq	r0, #1
 800090c:	2000      	movne	r0, #0
 800090e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000912:	bf00      	nop

08000914 <__aeabi_fcmplt>:
 8000914:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000918:	f7ff ffea 	bl	80008f0 <__aeabi_cfcmpeq>
 800091c:	bf34      	ite	cc
 800091e:	2001      	movcc	r0, #1
 8000920:	2000      	movcs	r0, #0
 8000922:	f85d fb08 	ldr.w	pc, [sp], #8
 8000926:	bf00      	nop

08000928 <__aeabi_fcmple>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff ffe0 	bl	80008f0 <__aeabi_cfcmpeq>
 8000930:	bf94      	ite	ls
 8000932:	2001      	movls	r0, #1
 8000934:	2000      	movhi	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_fcmpge>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffd2 	bl	80008e8 <__aeabi_cfrcmple>
 8000944:	bf94      	ite	ls
 8000946:	2001      	movls	r0, #1
 8000948:	2000      	movhi	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_fcmpgt>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffc8 	bl	80008e8 <__aeabi_cfrcmple>
 8000958:	bf34      	ite	cc
 800095a:	2001      	movcc	r0, #1
 800095c:	2000      	movcs	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_f2uiz>:
 8000964:	0042      	lsls	r2, r0, #1
 8000966:	d20e      	bcs.n	8000986 <__aeabi_f2uiz+0x22>
 8000968:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800096c:	d30b      	bcc.n	8000986 <__aeabi_f2uiz+0x22>
 800096e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000972:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000976:	d409      	bmi.n	800098c <__aeabi_f2uiz+0x28>
 8000978:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800097c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000980:	fa23 f002 	lsr.w	r0, r3, r2
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr
 800098c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000990:	d101      	bne.n	8000996 <__aeabi_f2uiz+0x32>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d102      	bne.n	800099c <__aeabi_f2uiz+0x38>
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d013      	beq.n	80009e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00b      	beq.n	80009e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009cc:	e000      	b.n	80009d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f9      	beq.n	80009ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <_write>:
int KIET_COMPUTE_Constraint(int value, int min, int max);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e009      	b.n	8000a16 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	60ba      	str	r2, [r7, #8]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ffca 	bl	80009a4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	3301      	adds	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dbf1      	blt.n	8000a02 <_write+0x12>
	}
	return len;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b090      	sub	sp, #64	; 0x40
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("MAIN==>RUNNIG\n");
 8000a2e:	489e      	ldr	r0, [pc, #632]	; (8000ca8 <main+0x280>)
 8000a30:	f005 fc94 	bl	800635c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f000 ffd8 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f000 f9f2 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f000 fb0a 	bl	8001054 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000a40:	f000 fa7a 	bl	8000f38 <MX_I2C2_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 8000a44:	f000 faa6 	bl	8000f94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a48:	f000 fada 	bl	8001000 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a4c:	f000 fa46 	bl	8000edc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  KIET_VH53L0X_init(&hi2c1);
 8000a50:	4896      	ldr	r0, [pc, #600]	; (8000cac <main+0x284>)
 8000a52:	f000 fcff 	bl	8001454 <KIET_VH53L0X_init>
  KIET_RTC_Init();
 8000a56:	f000 fb93 	bl	8001180 <KIET_RTC_Init>
  myLoRa = newLoRa();
 8000a5a:	4c95      	ldr	r4, [pc, #596]	; (8000cb0 <main+0x288>)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 feb6 	bl	80047d0 <newLoRa>
 8000a64:	4625      	mov	r5, r4
 8000a66:	463c      	mov	r4, r7
 8000a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  //	LoRa_reset(&myLoRa);

	myLoRa.hSPIx                 = &hspi1;
 8000a78:	4b8d      	ldr	r3, [pc, #564]	; (8000cb0 <main+0x288>)
 8000a7a:	4a8e      	ldr	r2, [pc, #568]	; (8000cb4 <main+0x28c>)
 8000a7c:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = NSS_GPIO_Port;
 8000a7e:	4b8c      	ldr	r3, [pc, #560]	; (8000cb0 <main+0x288>)
 8000a80:	4a8d      	ldr	r2, [pc, #564]	; (8000cb8 <main+0x290>)
 8000a82:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = NSS_Pin;
 8000a84:	4b8a      	ldr	r3, [pc, #552]	; (8000cb0 <main+0x288>)
 8000a86:	2210      	movs	r2, #16
 8000a88:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = RST_GPIO_Port;
 8000a8a:	4b89      	ldr	r3, [pc, #548]	; (8000cb0 <main+0x288>)
 8000a8c:	4a8b      	ldr	r2, [pc, #556]	; (8000cbc <main+0x294>)
 8000a8e:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RST_Pin;
 8000a90:	4b87      	ldr	r3, [pc, #540]	; (8000cb0 <main+0x288>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port			 = DIO0_GPIO_Port;
 8000a96:	4b86      	ldr	r3, [pc, #536]	; (8000cb0 <main+0x288>)
 8000a98:	4a87      	ldr	r2, [pc, #540]	; (8000cb8 <main+0x290>)
 8000a9a:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin				 = DIO0_Pin;
 8000a9c:	4b84      	ldr	r3, [pc, #528]	; (8000cb0 <main+0x288>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	829a      	strh	r2, [r3, #20]
	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000aa2:	4b83      	ldr	r3, [pc, #524]	; (8000cb0 <main+0x288>)
 8000aa4:	f240 12b1 	movw	r2, #433	; 0x1b1
 8000aa8:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000aaa:	4b81      	ldr	r3, [pc, #516]	; (8000cb0 <main+0x288>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth			 = BW_125KHz;				  // default = BW_125KHz
 8000ab2:	4b7f      	ldr	r3, [pc, #508]	; (8000cb0 <main+0x288>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate				 = CR_4_5;						// default = CR_4_5
 8000aba:	4b7d      	ldr	r3, [pc, #500]	; (8000cb0 <main+0x288>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power				 = POWER_11db;				// default = 20db
 8000ac2:	4b7b      	ldr	r3, [pc, #492]	; (8000cb0 <main+0x288>)
 8000ac4:	22f6      	movs	r2, #246	; 0xf6
 8000ac6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000aca:	4b79      	ldr	r3, [pc, #484]	; (8000cb0 <main+0x288>)
 8000acc:	2278      	movs	r2, #120	; 0x78
 8000ace:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble				 = 8;		  					// default = 8;
 8000ad2:	4b77      	ldr	r3, [pc, #476]	; (8000cb0 <main+0x288>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000ad8:	4875      	ldr	r0, [pc, #468]	; (8000cb0 <main+0x288>)
 8000ada:	f003 fea2 	bl	8004822 <LoRa_reset>

	uint16_t loraStatus= LoRa_init(&myLoRa);
 8000ade:	4874      	ldr	r0, [pc, #464]	; (8000cb0 <main+0x288>)
 8000ae0:	f004 f9a9 	bl	8004e36 <LoRa_init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	877b      	strh	r3, [r7, #58]	; 0x3a
	for (uint8_t i = 0; i<= 127; i++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000aee:	e012      	b.n	8000b16 <main+0xee>
		printf("%i--%d\n",i,LoRa_read(&myLoRa, i));
 8000af0:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000af8:	4619      	mov	r1, r3
 8000afa:	486d      	ldr	r0, [pc, #436]	; (8000cb0 <main+0x288>)
 8000afc:	f004 f856 	bl	8004bac <LoRa_read>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	4621      	mov	r1, r4
 8000b06:	486e      	ldr	r0, [pc, #440]	; (8000cc0 <main+0x298>)
 8000b08:	f005 fbba 	bl	8006280 <iprintf>
	for (uint8_t i = 0; i<= 127; i++) {
 8000b0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b10:	3301      	adds	r3, #1
 8000b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dae8      	bge.n	8000af0 <main+0xc8>
	}

	if (loraStatus==LORA_OK) {
 8000b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b20:	2bc8      	cmp	r3, #200	; 0xc8
 8000b22:	d10d      	bne.n	8000b40 <main+0x118>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2120      	movs	r1, #32
 8000b28:	4864      	ldr	r0, [pc, #400]	; (8000cbc <main+0x294>)
 8000b2a:	f001 fa75 	bl	8002018 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f000 ffbc 	bl	8001aac <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2120      	movs	r1, #32
 8000b38:	4860      	ldr	r0, [pc, #384]	; (8000cbc <main+0x294>)
 8000b3a:	f001 fa6d 	bl	8002018 <HAL_GPIO_WritePin>
 8000b3e:	e01c      	b.n	8000b7a <main+0x152>
	} else {
		for (uint8_t i = 0; i<= 10; i++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000b46:	e014      	b.n	8000b72 <main+0x14a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	485b      	ldr	r0, [pc, #364]	; (8000cbc <main+0x294>)
 8000b4e:	f001 fa63 	bl	8002018 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f000 ffaa 	bl	8001aac <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4857      	ldr	r0, [pc, #348]	; (8000cbc <main+0x294>)
 8000b5e:	f001 fa5b 	bl	8002018 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f000 ffa2 	bl	8001aac <HAL_Delay>
		for (uint8_t i = 0; i<= 10; i++) {
 8000b68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000b72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b76:	2b0a      	cmp	r3, #10
 8000b78:	d9e6      	bls.n	8000b48 <main+0x120>
		}
	}
	printf("CHECK POINT 5\n");
 8000b7a:	4852      	ldr	r0, [pc, #328]	; (8000cc4 <main+0x29c>)
 8000b7c:	f005 fbee 	bl	800635c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("#ORG# I AM RUNNING!-!\n");
 8000b80:	4851      	ldr	r0, [pc, #324]	; (8000cc8 <main+0x2a0>)
 8000b82:	f005 fbeb 	bl	800635c <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8000b86:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <main+0x2a4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a50      	ldr	r2, [pc, #320]	; (8000ccc <main+0x2a4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6013      	str	r3, [r2, #0]

	  /*Do somthing when WAKUP*/
	  uint16_t distance =  KIET_VL53L0X_ReadDistance();
 8000b92:	f000 fc7d 	bl	8001490 <KIET_VL53L0X_ReadDistance>
 8000b96:	4603      	mov	r3, r0
 8000b98:	873b      	strh	r3, [r7, #56]	; 0x38
	  printf("ReadSensor -> Distance = %d\n",distance);
 8000b9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	484c      	ldr	r0, [pc, #304]	; (8000cd0 <main+0x2a8>)
 8000ba0:	f005 fb6e 	bl	8006280 <iprintf>
	  KIET_encryptData();
 8000ba4:	f000 fc20 	bl	80013e8 <KIET_encryptData>
	  KIET_macLayer();
 8000ba8:	f000 fc24 	bl	80013f4 <KIET_macLayer>
	  KIET_macID();
 8000bac:	f000 fc28 	bl	8001400 <KIET_macID>
	  /*Create Data;*/
	  send_data[4] = 0x00;
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <main+0x2ac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	711a      	strb	r2, [r3, #4]
	  send_data[3] = (distance%10)	 	+ 0x30;
 8000bb6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000bb8:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <main+0x2b0>)
 8000bba:	fba3 1302 	umull	r1, r3, r3, r2
 8000bbe:	08d9      	lsrs	r1, r3, #3
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	3330      	adds	r3, #48	; 0x30
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <main+0x2ac>)
 8000bd4:	70da      	strb	r2, [r3, #3]
	  send_data[2] = (distance/10)%10  	+ 0x30;
 8000bd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bd8:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <main+0x2b0>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <main+0x2b0>)
 8000be4:	fba3 1302 	umull	r1, r3, r3, r2
 8000be8:	08d9      	lsrs	r1, r3, #3
 8000bea:	460b      	mov	r3, r1
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	3330      	adds	r3, #48	; 0x30
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <main+0x2ac>)
 8000bfe:	709a      	strb	r2, [r3, #2]
	  send_data[1] = (distance/100)%10 	+ 0x30;
 8000c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c02:	4a36      	ldr	r2, [pc, #216]	; (8000cdc <main+0x2b4>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	095b      	lsrs	r3, r3, #5
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <main+0x2b0>)
 8000c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c12:	08d9      	lsrs	r1, r3, #3
 8000c14:	460b      	mov	r3, r1
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3330      	adds	r3, #48	; 0x30
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <main+0x2ac>)
 8000c28:	705a      	strb	r2, [r3, #1]
	  send_data[0] = (distance/1000)%10 + 0x30; // MY ADDRESS
 8000c2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <main+0x2b8>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	099b      	lsrs	r3, r3, #6
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <main+0x2b0>)
 8000c38:	fba3 1302 	umull	r1, r3, r3, r2
 8000c3c:	08d9      	lsrs	r1, r3, #3
 8000c3e:	460b      	mov	r3, r1
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	3330      	adds	r3, #48	; 0x30
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <main+0x2ac>)
 8000c52:	701a      	strb	r2, [r3, #0]

	  /*Transmit Data*/
	  printf("Transmit\n");
 8000c54:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <main+0x2bc>)
 8000c56:	f005 fb81 	bl	800635c <puts>
	  for (uint8_t i =0; i < NUM_OF_TIME_TRANSMIT; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000c60:	e050      	b.n	8000d04 <main+0x2dc>
		  uint8_t flag = LoRa_transmit(&myLoRa, send_data, 5, 1000);
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	2205      	movs	r2, #5
 8000c68:	491a      	ldr	r1, [pc, #104]	; (8000cd4 <main+0x2ac>)
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <main+0x288>)
 8000c6c:	f004 f826 	bl	8004cbc <LoRa_transmit>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if (flag) {
 8000c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d036      	beq.n	8000cec <main+0x2c4>
				printf("Have send message");
 8000c7e:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <main+0x2c0>)
 8000c80:	f005 fafe 	bl	8006280 <iprintf>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2120      	movs	r1, #32
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <main+0x294>)
 8000c8a:	f001 f9c5 	bl	8002018 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000c8e:	2064      	movs	r0, #100	; 0x64
 8000c90:	f000 ff0c 	bl	8001aac <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2120      	movs	r1, #32
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <main+0x294>)
 8000c9a:	f001 f9bd 	bl	8002018 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000c9e:	2064      	movs	r0, #100	; 0x64
 8000ca0:	f000 ff04 	bl	8001aac <HAL_Delay>
 8000ca4:	e025      	b.n	8000cf2 <main+0x2ca>
 8000ca6:	bf00      	nop
 8000ca8:	080070d8 	.word	0x080070d8
 8000cac:	20000084 	.word	0x20000084
 8000cb0:	200001cc 	.word	0x200001cc
 8000cb4:	2000012c 	.word	0x2000012c
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	080070e8 	.word	0x080070e8
 8000cc4:	080070f0 	.word	0x080070f0
 8000cc8:	08007100 	.word	0x08007100
 8000ccc:	40007000 	.word	0x40007000
 8000cd0:	08007118 	.word	0x08007118
 8000cd4:	20000278 	.word	0x20000278
 8000cd8:	cccccccd 	.word	0xcccccccd
 8000cdc:	51eb851f 	.word	0x51eb851f
 8000ce0:	10624dd3 	.word	0x10624dd3
 8000ce4:	08007138 	.word	0x08007138
 8000ce8:	08007144 	.word	0x08007144
		  } else {printf("Failed to transmit data\n");}
 8000cec:	483f      	ldr	r0, [pc, #252]	; (8000dec <main+0x3c4>)
 8000cee:	f005 fb35 	bl	800635c <puts>
		  HAL_Delay(TIME_TRANSMIT);
 8000cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf6:	f000 fed9 	bl	8001aac <HAL_Delay>
	  for (uint8_t i =0; i < NUM_OF_TIME_TRANSMIT; i++) {
 8000cfa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000d04:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d9aa      	bls.n	8000c62 <main+0x23a>
	  }

	  HAL_Delay(2000);
 8000d0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d10:	f000 fecc 	bl	8001aac <HAL_Delay>
	  /*Receive Data*/
	  LoRa_receive(&myLoRa, read_data, 128);
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	4936      	ldr	r1, [pc, #216]	; (8000df0 <main+0x3c8>)
 8000d18:	4836      	ldr	r0, [pc, #216]	; (8000df4 <main+0x3cc>)
 8000d1a:	f004 f82c 	bl	8004d76 <LoRa_receive>
	  printf("RECEIVE\n");
 8000d1e:	4836      	ldr	r0, [pc, #216]	; (8000df8 <main+0x3d0>)
 8000d20:	f005 fb1c 	bl	800635c <puts>
	  if (read_data[0] != 0) {
 8000d24:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <main+0x3c8>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d017      	beq.n	8000d5c <main+0x334>
				printf("Receive Data\n");
 8000d2c:	4833      	ldr	r0, [pc, #204]	; (8000dfc <main+0x3d4>)
 8000d2e:	f005 fb15 	bl	800635c <puts>
				printf("%ul",read_data[0]);
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <main+0x3c8>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4831      	ldr	r0, [pc, #196]	; (8000e00 <main+0x3d8>)
 8000d3a:	f005 faa1 	bl	8006280 <iprintf>
				printf("%c", read_data[0]);
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <main+0x3c8>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 faae 	bl	80062a4 <putchar>
				printf("%c", read_data[1]);
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <main+0x3c8>)
 8000d4a:	785b      	ldrb	r3, [r3, #1]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 faa9 	bl	80062a4 <putchar>
				memset(read_data, 0, sizeof(read_data));
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	2100      	movs	r1, #0
 8000d56:	4826      	ldr	r0, [pc, #152]	; (8000df0 <main+0x3c8>)
 8000d58:	f005 fbe0 	bl	800651c <memset>
	  } else {
				;
	  }

	  /*Draf Debug*/
	  KIET_ToggleLED();
 8000d5c:	f000 fb38 	bl	80013d0 <KIET_ToggleLED>
	  HAL_Delay(100);
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f000 fea3 	bl	8001aac <HAL_Delay>
	  	printf("CHECK RTC_CRL_ALRG %d\n", READ_BIT(RTC->CRL, RTC_CRL_ALRF));
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <main+0x3dc>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4825      	ldr	r0, [pc, #148]	; (8000e08 <main+0x3e0>)
 8000d72:	f005 fa85 	bl	8006280 <iprintf>
	  	printf("CHEKC RTC_ DIVH %d, and DIVL: %d\n ", RTC->DIVH ,RTC->DIVL);
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <main+0x3dc>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <main+0x3dc>)
 8000d7c:	6952      	ldr	r2, [r2, #20]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <main+0x3e4>)
 8000d82:	f005 fa7d 	bl	8006280 <iprintf>
	  	printf("CHEKC RTC_ CNTH  %d, and CNTL: %d\n" , RTC->CNTH ,RTC->CNTL);
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <main+0x3dc>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <main+0x3dc>)
 8000d8c:	69d2      	ldr	r2, [r2, #28]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <main+0x3e8>)
 8000d92:	f005 fa75 	bl	8006280 <iprintf>
	  	printf("CHEKC RTC_ ANRL: %d, and ANRH: %d\n" , RTC->ALRH ,RTC->ALRL);
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <main+0x3dc>)
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <main+0x3dc>)
 8000d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <main+0x3ec>)
 8000da2:	f005 fa6d 	bl	8006280 <iprintf>
	  	if (READ_BIT(RTC->CRL, RTC_CRL_ALRF)!=0) {
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <main+0x3dc>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f43f aee6 	beq.w	8000b80 <main+0x158>
	  		printf("Alter alrm");
 8000db4:	4818      	ldr	r0, [pc, #96]	; (8000e18 <main+0x3f0>)
 8000db6:	f005 fa63 	bl	8006280 <iprintf>
	  		CLEAR_BIT(RTC->CRL, RTC_CRL_ALRF);
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <main+0x3dc>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <main+0x3dc>)
 8000dc0:	f023 0302 	bic.w	r3, r3, #2
 8000dc4:	6053      	str	r3, [r2, #4]
	  		KIET_revise();
 8000dc6:	f000 fac5 	bl	8001354 <KIET_revise>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <main+0x3f4>)
 8000dd2:	f001 f921 	bl	8002018 <HAL_GPIO_WritePin>
	  		HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	; 0x64
 8000dd8:	f000 fe68 	bl	8001aac <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <main+0x3f4>)
 8000de4:	f001 f918 	bl	8002018 <HAL_GPIO_WritePin>
  {
 8000de8:	e6ca      	b.n	8000b80 <main+0x158>
 8000dea:	bf00      	nop
 8000dec:	08007158 	.word	0x08007158
 8000df0:	200001f8 	.word	0x200001f8
 8000df4:	200001cc 	.word	0x200001cc
 8000df8:	08007170 	.word	0x08007170
 8000dfc:	08007178 	.word	0x08007178
 8000e00:	08007188 	.word	0x08007188
 8000e04:	40002800 	.word	0x40002800
 8000e08:	0800718c 	.word	0x0800718c
 8000e0c:	080071a4 	.word	0x080071a4
 8000e10:	080071c8 	.word	0x080071c8
 8000e14:	080071ec 	.word	0x080071ec
 8000e18:	08007210 	.word	0x08007210
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2a:	2228      	movs	r2, #40	; 0x28
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f005 fb74 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e50:	2309      	movs	r3, #9
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e62:	2301      	movs	r3, #1
 8000e64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e66:	2302      	movs	r3, #2
 8000e68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 f970 	bl	8003160 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e86:	f000 fb97 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fbdc 	bl	8003664 <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eb2:	f000 fb81 	bl	80015b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fd5c 	bl	8003980 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ece:	f000 fb73 	bl	80015b8 <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3750      	adds	r7, #80	; 0x50
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f001 f8c7 	bl	80020ac <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 fb48 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000084 	.word	0x20000084
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000186a0 	.word	0x000186a0

08000f38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <MX_I2C2_Init+0x54>)
 8000f40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f44:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_I2C2_Init+0x58>)
 8000f46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_I2C2_Init+0x50>)
 8000f76:	f001 f899 	bl	80020ac <HAL_I2C_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f80:	f000 fb1a 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000d8 	.word	0x200000d8
 8000f8c:	40005800 	.word	0x40005800
 8000f90:	000186a0 	.word	0x000186a0

08000f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <MX_SPI1_Init+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fc8:	2210      	movs	r2, #16
 8000fca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_SPI1_Init+0x64>)
 8000fe6:	f002 fd81 	bl	8003aec <HAL_SPI_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ff0:	f000 fae2 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000012c 	.word	0x2000012c
 8000ffc:	40013000 	.word	0x40013000

08001000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART1_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART1_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART1_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART1_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001038:	f003 faec 	bl	8004614 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 fab9 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000184 	.word	0x20000184
 8001050:	40013800 	.word	0x40013800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <MX_GPIO_Init+0x11c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a40      	ldr	r2, [pc, #256]	; (8001170 <MX_GPIO_Init+0x11c>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <MX_GPIO_Init+0x11c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <MX_GPIO_Init+0x11c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a3a      	ldr	r2, [pc, #232]	; (8001170 <MX_GPIO_Init+0x11c>)
 8001086:	f043 0320 	orr.w	r3, r3, #32
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <MX_GPIO_Init+0x11c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <MX_GPIO_Init+0x11c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a34      	ldr	r2, [pc, #208]	; (8001170 <MX_GPIO_Init+0x11c>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <MX_GPIO_Init+0x11c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <MX_GPIO_Init+0x11c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <MX_GPIO_Init+0x11c>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <MX_GPIO_Init+0x11c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2110      	movs	r1, #16
 80010cc:	4829      	ldr	r0, [pc, #164]	; (8001174 <MX_GPIO_Init+0x120>)
 80010ce:	f000 ffa3 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2101      	movs	r1, #1
 80010d6:	4828      	ldr	r0, [pc, #160]	; (8001178 <MX_GPIO_Init+0x124>)
 80010d8:	f000 ff9e 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <MX_GPIO_Init+0x124>)
 80010e4:	f000 ff98 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <MX_GPIO_Init+0x128>)
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	481e      	ldr	r0, [pc, #120]	; (8001174 <MX_GPIO_Init+0x120>)
 80010fc:	f000 fe08 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001100:	2310      	movs	r3, #16
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <MX_GPIO_Init+0x120>)
 8001118:	f000 fdfa 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800111c:	2301      	movs	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_GPIO_Init+0x124>)
 8001134:	f000 fdec 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LED2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001138:	f44f 7348 	mov.w	r3, #800	; 0x320
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <MX_GPIO_Init+0x124>)
 8001152:	f000 fddd 	bl	8001d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2101      	movs	r1, #1
 800115a:	2007      	movs	r0, #7
 800115c:	f000 fda1 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001160:	2007      	movs	r0, #7
 8001162:	f000 fdba 	bl	8001cda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00
 800117c:	10110000 	.word	0x10110000

08001180 <KIET_RTC_Init>:

/* USER CODE BEGIN 4 */

void KIET_RTC_Init(){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	/** @note */

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <KIET_RTC_Init+0xa8>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <KIET_RTC_Init+0xa8>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <KIET_RTC_Init+0xa8>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <KIET_RTC_Init+0xa8>)
 8001198:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119c:	61d3      	str	r3, [r2, #28]

	SET_BIT(PWR->CR, PWR_CR_DBP);
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <KIET_RTC_Init+0xac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <KIET_RTC_Init+0xac>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

	printf("CHEKC POINT -1: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY));
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	4619      	mov	r1, r3
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <KIET_RTC_Init+0xb0>)
 80011b6:	f005 f863 	bl	8006280 <iprintf>
	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
	uint8_t count = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]

	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 80011ca:	e009      	b.n	80011e0 <KIET_RTC_Init+0x60>
		count++;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
		if (count>100) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d903      	bls.n	80011e0 <KIET_RTC_Init+0x60>
			printf("Have a problem for connecting the External Crystal Clock!");
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <KIET_RTC_Init+0xb4>)
 80011da:	f005 f851 	bl	8006280 <iprintf>
			break;
 80011de:	e005      	b.n	80011ec <KIET_RTC_Init+0x6c>
	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0ef      	beq.n	80011cc <KIET_RTC_Init+0x4c>
		} else;
	}

	SET_BIT(RCC->BDCR, 9);
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011f2:	f043 0309 	orr.w	r3, r3, #9
 80011f6:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(RCC->BDCR, 8);
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <KIET_RTC_Init+0xa8>)
 80011fe:	f023 0308 	bic.w	r3, r3, #8
 8001202:	6213      	str	r3, [r2, #32]
	SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <KIET_RTC_Init+0xa8>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <KIET_RTC_Init+0xa8>)
 800120a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120e:	6213      	str	r3, [r2, #32]
	printf("CHEKC POINT -1: %d\n", RCC->BDCR);
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <KIET_RTC_Init+0xa8>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <KIET_RTC_Init+0xb0>)
 8001218:	f005 f832 	bl	8006280 <iprintf>
	 * 00: No clock
	 * 01: LSE oscillator clock used as RTC clock
	 * 10: LSI oscillator clock used as RTC clock
	 * 11: HSE oscillator clock divided by 128 used as RTC clock*/

	KIET_configure_rtc_register();
 800121c:	f000 f80c 	bl	8001238 <KIET_configure_rtc_register>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	40007000 	.word	0x40007000
 8001230:	0800721c 	.word	0x0800721c
 8001234:	08007230 	.word	0x08007230

08001238 <KIET_configure_rtc_register>:



void KIET_configure_rtc_register() {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	/* 1. Poll RTOFF, wait until its value goes to ‘1
	 * 2. Set the CNF bit to enter configuration mode
	 * 3. Write to one or more RTC registers
	 * 4. Clear the CNF bit to exit configuration mode
	 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
	printf("CHEKC POINT 0: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)); //OKEE ==> VẤn đ�? ở CLOK chưa được kết nối vào
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <KIET_configure_rtc_register+0xf4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	4619      	mov	r1, r3
 8001246:	483a      	ldr	r0, [pc, #232]	; (8001330 <KIET_configure_rtc_register+0xf8>)
 8001248:	f005 f81a 	bl	8006280 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 800124c:	e002      	b.n	8001254 <KIET_configure_rtc_register+0x1c>
 800124e:	4839      	ldr	r0, [pc, #228]	; (8001334 <KIET_configure_rtc_register+0xfc>)
 8001250:	f005 f884 	bl	800635c <puts>
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <KIET_configure_rtc_register+0x100>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f6      	beq.n	800124e <KIET_configure_rtc_register+0x16>
	SET_BIT(RTC->CRL, RTC_CRL_CNF);
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <KIET_configure_rtc_register+0x100>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a34      	ldr	r2, [pc, #208]	; (8001338 <KIET_configure_rtc_register+0x100>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 1: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <KIET_configure_rtc_register+0x100>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	4619      	mov	r1, r3
 8001276:	4831      	ldr	r0, [pc, #196]	; (800133c <KIET_configure_rtc_register+0x104>)
 8001278:	f005 f802 	bl	8006280 <iprintf>
	/*Begin for writing to RTC Register - Write one or more RTC register*/
	RTC->PRLH = 0U;
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <KIET_configure_rtc_register+0x100>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 0x7FFFU;
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <KIET_configure_rtc_register+0x100>)
 8001284:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001288:	60da      	str	r2, [r3, #12]
	printf("CHEKC POINT 2: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <KIET_configure_rtc_register+0x100>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	4619      	mov	r1, r3
 8001294:	482a      	ldr	r0, [pc, #168]	; (8001340 <KIET_configure_rtc_register+0x108>)
 8001296:	f004 fff3 	bl	8006280 <iprintf>
	RTC->DIVH = 0x0000U;
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <KIET_configure_rtc_register+0x100>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
	RTC->DIVL = 0x8000U;
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012a6:	615a      	str	r2, [r3, #20]
	printf("CHEKC POINT 3: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	4619      	mov	r1, r3
 80012b2:	4824      	ldr	r0, [pc, #144]	; (8001344 <KIET_configure_rtc_register+0x10c>)
 80012b4:	f004 ffe4 	bl	8006280 <iprintf>
	RTC->CNTH = 0x0000U;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
	RTC->CNTL = 0x0000U;
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]

	RTC->ALRH = 0x0000U;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
	RTC->ALRL = 0x000FU;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012cc:	220f      	movs	r2, #15
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	6013      	str	r3, [r2, #0]
	SET_BIT(RTC->CRH, RTC_CRH_OWIE);
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a15      	ldr	r2, [pc, #84]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6013      	str	r3, [r2, #0]
	//	SET_BIT(RTC->CRH, RTC_CRH_SECIE);
	/*End of writing to RTC register*/
	CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012ee:	f023 0310 	bic.w	r3, r3, #16
 80012f2:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 4: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <KIET_configure_rtc_register+0x100>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	4619      	mov	r1, r3
 80012fe:	4812      	ldr	r0, [pc, #72]	; (8001348 <KIET_configure_rtc_register+0x110>)
 8001300:	f004 ffbe 	bl	8006280 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 8001304:	e007      	b.n	8001316 <KIET_configure_rtc_register+0xde>
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <KIET_configure_rtc_register+0x100>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	4619      	mov	r1, r3
 8001310:	480e      	ldr	r0, [pc, #56]	; (800134c <KIET_configure_rtc_register+0x114>)
 8001312:	f004 ffb5 	bl	8006280 <iprintf>
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <KIET_configure_rtc_register+0x100>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f1      	beq.n	8001306 <KIET_configure_rtc_register+0xce>
	printf("Done configuration RTC\n");
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <KIET_configure_rtc_register+0x118>)
 8001324:	f005 f81a 	bl	800635c <puts>

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	0800726c 	.word	0x0800726c
 8001334:	08007280 	.word	0x08007280
 8001338:	40002800 	.word	0x40002800
 800133c:	08007294 	.word	0x08007294
 8001340:	080072a8 	.word	0x080072a8
 8001344:	080072bc 	.word	0x080072bc
 8001348:	080072d0 	.word	0x080072d0
 800134c:	080072e4 	.word	0x080072e4
 8001350:	08007308 	.word	0x08007308

08001354 <KIET_revise>:


void KIET_revise() {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 8001358:	e002      	b.n	8001360 <KIET_revise+0xc>
 800135a:	481a      	ldr	r0, [pc, #104]	; (80013c4 <KIET_revise+0x70>)
 800135c:	f004 fffe 	bl	800635c <puts>
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <KIET_revise+0x74>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0320 	and.w	r3, r3, #32
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f6      	beq.n	800135a <KIET_revise+0x6>
		SET_BIT(RTC->CRL, RTC_CRL_CNF);
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <KIET_revise+0x74>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <KIET_revise+0x74>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6053      	str	r3, [r2, #4]
		/*Begin for writing to RTC Register - Write one or more RTC register*/
		RTC->DIVH = 0x0000U;
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <KIET_revise+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
		RTC->DIVL = 0x8000U;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <KIET_revise+0x74>)
 8001380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001384:	615a      	str	r2, [r3, #20]
		RTC->CNTH = 0x0000U;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <KIET_revise+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
		RTC->CNTL = 0x0000U;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <KIET_revise+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
		/*End of writing to RTC register*/
		CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <KIET_revise+0x74>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <KIET_revise+0x74>)
 8001398:	f023 0310 	bic.w	r3, r3, #16
 800139c:	6053      	str	r3, [r2, #4]
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 800139e:	e007      	b.n	80013b0 <KIET_revise+0x5c>
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <KIET_revise+0x74>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	4619      	mov	r1, r3
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <KIET_revise+0x78>)
 80013ac:	f004 ff68 	bl	8006280 <iprintf>
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <KIET_revise+0x74>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f1      	beq.n	80013a0 <KIET_revise+0x4c>
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	08007280 	.word	0x08007280
 80013c8:	40002800 	.word	0x40002800
 80013cc:	080072e4 	.word	0x080072e4

080013d0 <KIET_ToggleLED>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
}

void KIET_ToggleLED() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <KIET_ToggleLED+0x14>)
 80013da:	f000 fe35 	bl	8002048 <HAL_GPIO_TogglePin>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <KIET_encryptData>:

void KIET_readSensor() {
	;
}

void KIET_encryptData() {
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	;
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <KIET_macLayer>:

void KIET_macLayer() {
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	;
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <KIET_macID>:

void KIET_macID() {
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	;
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_EXTI_Callback>:
	//	dropping below a programmable threshold that is adjustable through the register RegLowBat. The interrupt signal can be
	//	mapped to any of the DIO pins by programming RegDioMapping.

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//		HAL_Delay(100);
//	} else {
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//	}
	printf("#RED# Callback");
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <HAL_GPIO_EXTI_Callback+0x18>)
 8001418:	f004 ff32 	bl	8006280 <iprintf>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08007334 	.word	0x08007334

08001428 <KIET_COMPUTE_Constraint>:

int KIET_COMPUTE_Abs(int value) {
	return (value>0)?value:-value;
}

int KIET_COMPUTE_Constraint(int value, int min, int max) {
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
	return (value>max)?max:((value<min)?min:value);
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dc05      	bgt.n	8001448 <KIET_COMPUTE_Constraint+0x20>
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	4293      	cmp	r3, r2
 8001442:	bfb8      	it	lt
 8001444:	4613      	movlt	r3, r2
 8001446:	e000      	b.n	800144a <KIET_COMPUTE_Constraint+0x22>
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <KIET_VH53L0X_init>:


void KIET_VH53L0X_init(I2C_HandleTypeDef *handler){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	initVL53L0X(1, handler);
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	2001      	movs	r0, #1
 8001460:	f003 fe96 	bl	8005190 <initVL53L0X>
	setSignalRateLimit(200);
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <KIET_VH53L0X_init+0x34>)
 8001466:	f004 f8f3 	bl	8005650 <setSignalRateLimit>
	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 800146a:	210a      	movs	r1, #10
 800146c:	2000      	movs	r0, #0
 800146e:	f004 fa1d 	bl	80058ac <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8001472:	210e      	movs	r1, #14
 8001474:	2001      	movs	r0, #1
 8001476:	f004 fa19 	bl	80058ac <setVcselPulsePeriod>
	setMeasurementTimingBudget(300*1000UL);
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <KIET_VH53L0X_init+0x38>)
 800147c:	f004 f91c 	bl	80056b8 <setMeasurementTimingBudget>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	43480000 	.word	0x43480000
 800148c:	000493e0 	.word	0x000493e0

08001490 <KIET_VL53L0X_ReadDistance>:

uint16_t KIET_VL53L0X_ReadDistance() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b092      	sub	sp, #72	; 0x48
 8001494:	af00      	add	r7, sp, #0
	statInfo_t_VL53L0X status;
	uint16_t data_distance[20];
	uint32_t sum = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint8_t i=0; i<=19; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80014a0:	e02f      	b.n	8001502 <KIET_VL53L0X_ReadDistance+0x72>
		data_distance[i] = KIET_COMPUTE_Constraint(readRangeSingleMillimeters(&status), 0, 2000);
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fbe6 	bl	8005c78 <readRangeSingleMillimeters>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffb7 	bl	8001428 <KIET_COMPUTE_Constraint>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80014c0:	b292      	uxth	r2, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	3348      	adds	r3, #72	; 0x48
 80014c6:	443b      	add	r3, r7
 80014c8:	f823 2c44 	strh.w	r2, [r3, #-68]
		sum+=data_distance[i];
 80014cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	3348      	adds	r3, #72	; 0x48
 80014d4:	443b      	add	r3, r7
 80014d6:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80014da:	461a      	mov	r2, r3
 80014dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014de:	4413      	add	r3, r2
 80014e0:	647b      	str	r3, [r7, #68]	; 0x44
		printf("Reading Data From VL53L0X -->distance: %dmm\n", data_distance[i]);
 80014e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	3348      	adds	r3, #72	; 0x48
 80014ea:	443b      	add	r3, r7
 80014ec:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80014f0:	4619      	mov	r1, r3
 80014f2:	482e      	ldr	r0, [pc, #184]	; (80015ac <KIET_VL53L0X_ReadDistance+0x11c>)
 80014f4:	f004 fec4 	bl	8006280 <iprintf>
	for (uint8_t i=0; i<=19; i++) {
 80014f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001502:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001506:	2b13      	cmp	r3, #19
 8001508:	d9cb      	bls.n	80014a2 <KIET_VL53L0X_ReadDistance+0x12>
	}
	uint16_t average = sum/20;
 800150a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150c:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <KIET_VL53L0X_ReadDistance+0x120>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	873b      	strh	r3, [r7, #56]	; 0x38
	printf("Average Data = %dmm\n", average);
 8001516:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001518:	4619      	mov	r1, r3
 800151a:	4826      	ldr	r0, [pc, #152]	; (80015b4 <KIET_VL53L0X_ReadDistance+0x124>)
 800151c:	f004 feb0 	bl	8006280 <iprintf>
	uint32_t sum_filter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t  num_of_elements_filter = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	for (uint8_t i=0; i<=19; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001530:	e02d      	b.n	800158e <KIET_VL53L0X_ReadDistance+0xfe>
		if (abs(data_distance[i]-average)<100) {
 8001532:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	3348      	adds	r3, #72	; 0x48
 800153a:	443b      	add	r3, r7
 800153c:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8001540:	461a      	mov	r2, r3
 8001542:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800154a:	db1b      	blt.n	8001584 <KIET_VL53L0X_ReadDistance+0xf4>
 800154c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3348      	adds	r3, #72	; 0x48
 8001554:	443b      	add	r3, r7
 8001556:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800155a:	461a      	mov	r2, r3
 800155c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b63      	cmp	r3, #99	; 0x63
 8001562:	dc0f      	bgt.n	8001584 <KIET_VL53L0X_ReadDistance+0xf4>
			num_of_elements_filter ++;
 8001564:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001568:	3301      	adds	r3, #1
 800156a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			sum_filter += data_distance[i];
 800156e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	3348      	adds	r3, #72	; 0x48
 8001576:	443b      	add	r3, r7
 8001578:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800157c:	461a      	mov	r2, r3
 800157e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001580:	4413      	add	r3, r2
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint8_t i=0; i<=19; i++) {
 8001584:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001588:	3301      	adds	r3, #1
 800158a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800158e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001592:	2b13      	cmp	r3, #19
 8001594:	d9cd      	bls.n	8001532 <KIET_VL53L0X_ReadDistance+0xa2>
		}
	}
	average = sum_filter/num_of_elements_filter;
 8001596:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800159a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	873b      	strh	r3, [r7, #56]	; 0x38
	return average;
 80015a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3748      	adds	r7, #72	; 0x48
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	08007344 	.word	0x08007344
 80015b0:	cccccccd 	.word	0xcccccccd
 80015b4:	08007374 	.word	0x08007374

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_MspInit+0x5c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x5c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_MspInit+0x60>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_MspInit+0x60>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_I2C_MspInit+0xc8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d124      	bne.n	8001692 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001664:	2312      	movs	r3, #18
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4821      	ldr	r0, [pc, #132]	; (80016f8 <HAL_I2C_MspInit+0xd0>)
 8001674:	f000 fb4c 	bl	8001d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800167e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001682:	61d3      	str	r3, [r2, #28]
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001690:	e029      	b.n	80016e6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_I2C_MspInit+0xd4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d124      	bne.n	80016e6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <HAL_I2C_MspInit+0xd0>)
 80016ca:	f000 fb21 	bl	8001d10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_I2C_MspInit+0xcc>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40005800 	.word	0x40005800

08001700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_SPI_MspInit+0x88>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d12f      	bne.n	8001780 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_SPI_MspInit+0x8c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <HAL_SPI_MspInit+0x8c>)
 8001726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_SPI_MspInit+0x8c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_SPI_MspInit+0x8c>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <HAL_SPI_MspInit+0x8c>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_SPI_MspInit+0x8c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001750:	23a0      	movs	r3, #160	; 0xa0
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	480b      	ldr	r0, [pc, #44]	; (8001790 <HAL_SPI_MspInit+0x90>)
 8001764:	f000 fad4 	bl	8001d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001768:	2340      	movs	r3, #64	; 0x40
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_SPI_MspInit+0x90>)
 800177c:	f000 fac8 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013000 	.word	0x40013000
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_UART_MspInit+0x8c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d131      	bne.n	8001818 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <HAL_UART_MspInit+0x90>)
 80017ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_UART_MspInit+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x90>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_UART_MspInit+0x90>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_UART_MspInit+0x94>)
 80017fa:	f000 fa89 	bl	8001d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_UART_MspInit+0x94>)
 8001814:	f000 fa7c 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40013800 	.word	0x40013800
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f8ff 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800187e:	2002      	movs	r0, #2
 8001880:	f000 fbfc 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <_isatty>:

int _isatty(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
	...

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f004 fe30 	bl	80065b8 <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20005000 	.word	0x20005000
 8001984:	00000400 	.word	0x00000400
 8001988:	200002f8 	.word	0x200002f8
 800198c:	200004b8 	.word	0x200004b8

08001990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff fff8 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019a2:	490c      	ldr	r1, [pc, #48]	; (80019d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019b8:	4c09      	ldr	r4, [pc, #36]	; (80019e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f004 fdfd 	bl	80065c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ca:	f7ff f82d 	bl	8000a28 <main>
  bx lr
 80019ce:	4770      	bx	lr
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019d8:	080073f4 	.word	0x080073f4
  ldr r2, =_sbss
 80019dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019e0:	200004b4 	.word	0x200004b4

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x28>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x28>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f947 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fdde 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f95f 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f927 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_IncTick+0x1c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x20>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_IncTick+0x20>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000008 	.word	0x20000008
 8001a94:	200002fc 	.word	0x200002fc

08001a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <HAL_GetTick+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	200002fc 	.word	0x200002fc

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff fff0 	bl	8001a98 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffe0 	bl	8001a98 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008

08001af4 <__NVIC_SetPriorityGrouping>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <__NVIC_EnableIRQ+0x34>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Config>:
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff90 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff2d 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff42 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff90 	bl	8001be4 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5f 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff35 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4922      	ldr	r1, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43d9      	mvns	r1, r3
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	400b      	ands	r3, r1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
	...

0800207c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f9b6 	bl	800140c <HAL_GPIO_EXTI_Callback>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e12b      	b.n	8002316 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff faa8 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002110:	f001 fbf0 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a81      	ldr	r2, [pc, #516]	; (8002320 <HAL_I2C_Init+0x274>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d807      	bhi.n	8002130 <HAL_I2C_Init+0x84>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a80      	ldr	r2, [pc, #512]	; (8002324 <HAL_I2C_Init+0x278>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e006      	b.n	800213e <HAL_I2C_Init+0x92>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a7d      	ldr	r2, [pc, #500]	; (8002328 <HAL_I2C_Init+0x27c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	bf94      	ite	ls
 8002138:	2301      	movls	r3, #1
 800213a:	2300      	movhi	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0e7      	b.n	8002316 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a78      	ldr	r2, [pc, #480]	; (800232c <HAL_I2C_Init+0x280>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9b      	lsrs	r3, r3, #18
 8002150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <HAL_I2C_Init+0x274>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d802      	bhi.n	8002180 <HAL_I2C_Init+0xd4>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	e009      	b.n	8002194 <HAL_I2C_Init+0xe8>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_I2C_Init+0x284>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	3301      	adds	r3, #1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	495c      	ldr	r1, [pc, #368]	; (8002320 <HAL_I2C_Init+0x274>)
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d819      	bhi.n	80021e8 <HAL_I2C_Init+0x13c>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e59      	subs	r1, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c8:	400b      	ands	r3, r1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_I2C_Init+0x138>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e59      	subs	r1, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e2:	e051      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 80021e4:	2304      	movs	r3, #4
 80021e6:	e04f      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d111      	bne.n	8002214 <HAL_I2C_Init+0x168>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e012      	b.n	800223a <HAL_I2C_Init+0x18e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	0099      	lsls	r1, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Init+0x196>
 800223e:	2301      	movs	r3, #1
 8002240:	e022      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10e      	bne.n	8002268 <HAL_I2C_Init+0x1bc>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e58      	subs	r0, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	440b      	add	r3, r1
 8002258:	fbb0 f3f3 	udiv	r3, r0, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002266:	e00f      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e58      	subs	r0, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	0099      	lsls	r1, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	6809      	ldr	r1, [r1, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6911      	ldr	r1, [r2, #16]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68d2      	ldr	r2, [r2, #12]
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	000186a0 	.word	0x000186a0
 8002324:	001e847f 	.word	0x001e847f
 8002328:	003d08ff 	.word	0x003d08ff
 800232c:	431bde83 	.word	0x431bde83
 8002330:	10624dd3 	.word	0x10624dd3

08002334 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	460b      	mov	r3, r1
 8002348:	813b      	strh	r3, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800234e:	f7ff fba3 	bl	8001a98 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b20      	cmp	r3, #32
 800235e:	f040 80d9 	bne.w	8002514 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2319      	movs	r3, #25
 8002368:	2201      	movs	r2, #1
 800236a:	496d      	ldr	r1, [pc, #436]	; (8002520 <HAL_I2C_Mem_Write+0x1ec>)
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fcc1 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
 800237a:	e0cc      	b.n	8002516 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_I2C_Mem_Write+0x56>
 8002386:	2302      	movs	r3, #2
 8002388:	e0c5      	b.n	8002516 <HAL_I2C_Mem_Write+0x1e2>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d007      	beq.n	80023b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2221      	movs	r2, #33	; 0x21
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_I2C_Mem_Write+0x1f0>)
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f2:	88f8      	ldrh	r0, [r7, #6]
 80023f4:	893a      	ldrh	r2, [r7, #8]
 80023f6:	8979      	ldrh	r1, [r7, #10]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	4603      	mov	r3, r0
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 faf8 	bl	80029f8 <I2C_RequestMemoryWrite>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d052      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e081      	b.n	8002516 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fd86 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b04      	cmp	r3, #4
 8002428:	d107      	bne.n	800243a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002438:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06b      	b.n	8002516 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b04      	cmp	r3, #4
 800247a:	d11b      	bne.n	80024b4 <HAL_I2C_Mem_Write+0x180>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d017      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1aa      	bne.n	8002412 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fd79 	bl	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00d      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e016      	b.n	8002516 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	00100002 	.word	0x00100002
 8002524:	ffff0000 	.word	0xffff0000

08002528 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4603      	mov	r3, r0
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	460b      	mov	r3, r1
 800253c:	813b      	strh	r3, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002546:	f7ff faa7 	bl	8001a98 <HAL_GetTick>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b20      	cmp	r3, #32
 8002556:	f040 8244 	bne.w	80029e2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2319      	movs	r3, #25
 8002560:	2201      	movs	r2, #1
 8002562:	4982      	ldr	r1, [pc, #520]	; (800276c <HAL_I2C_Mem_Read+0x244>)
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fbc5 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
 8002572:	e237      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Mem_Read+0x5a>
 800257e:	2302      	movs	r3, #2
 8002580:	e230      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d007      	beq.n	80025a8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2222      	movs	r2, #34	; 0x22
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a62      	ldr	r2, [pc, #392]	; (8002770 <HAL_I2C_Mem_Read+0x248>)
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ea:	88f8      	ldrh	r0, [r7, #6]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	8979      	ldrh	r1, [r7, #10]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4603      	mov	r3, r0
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa92 	bl	8002b24 <I2C_RequestMemoryRead>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e1ec      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d113      	bne.n	800263a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e1c0      	b.n	80029bc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	2b01      	cmp	r3, #1
 8002640:	d11e      	bne.n	8002680 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002652:	b672      	cpsid	i
}
 8002654:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800267c:	b662      	cpsie	i
}
 800267e:	e035      	b.n	80026ec <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b02      	cmp	r3, #2
 8002686:	d11e      	bne.n	80026c6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002696:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002698:	b672      	cpsid	i
}
 800269a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026c2:	b662      	cpsie	i
}
 80026c4:	e012      	b.n	80026ec <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026ec:	e166      	b.n	80029bc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	f200 811f 	bhi.w	8002936 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d123      	bne.n	8002748 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fc9f 	bl	8003048 <I2C_WaitOnRXNEFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e167      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002746:	e139      	b.n	80029bc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	2b02      	cmp	r3, #2
 800274e:	d152      	bne.n	80027f6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	2200      	movs	r2, #0
 8002758:	4906      	ldr	r1, [pc, #24]	; (8002774 <HAL_I2C_Mem_Read+0x24c>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 faca 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e13c      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
 800276a:	bf00      	nop
 800276c:	00100002 	.word	0x00100002
 8002770:	ffff0000 	.word	0xffff0000
 8002774:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027be:	b662      	cpsie	i
}
 80027c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f4:	e0e2      	b.n	80029bc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	2200      	movs	r2, #0
 80027fe:	497b      	ldr	r1, [pc, #492]	; (80029ec <HAL_I2C_Mem_Read+0x4c4>)
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fa77 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0e9      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002820:	b672      	cpsid	i
}
 8002822:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002856:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_I2C_Mem_Read+0x4c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_I2C_Mem_Read+0x4cc>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0a1a      	lsrs	r2, r3, #8
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00da      	lsls	r2, r3, #3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	3b01      	subs	r3, #1
 8002874:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d118      	bne.n	80028ae <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800289e:	b662      	cpsie	i
}
 80028a0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e09a      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d1d9      	bne.n	8002870 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028fe:	b662      	cpsie	i
}
 8002900:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002934:	e042      	b.n	80029bc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fb84 	bl	8003048 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e04c      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d118      	bne.n	80029bc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f ae94 	bne.w	80026ee <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	00010004 	.word	0x00010004
 80029f0:	20000000 	.word	0x20000000
 80029f4:	14f8b589 	.word	0x14f8b589

080029f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f960 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	d103      	bne.n	8002a52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e05f      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	492d      	ldr	r1, [pc, #180]	; (8002b20 <I2C_RequestMemoryWrite+0x128>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f9bb 	bl	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e04c      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fa46 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d107      	bne.n	8002aba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02b      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e021      	b.n	8002b14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad0:	893b      	ldrh	r3, [r7, #8]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fa20 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e005      	b.n	8002b16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0a:	893b      	ldrh	r3, [r7, #8]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	00010002 	.word	0x00010002

08002b24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f8c2 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b84:	d103      	bne.n	8002b8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0aa      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	4952      	ldr	r1, [pc, #328]	; (8002cf0 <I2C_RequestMemoryRead+0x1cc>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f91d 	bl	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e097      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f9a8 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e076      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c00:	893b      	ldrh	r3, [r7, #8]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e021      	b.n	8002c50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c0c:	893b      	ldrh	r3, [r7, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f982 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d107      	bne.n	8002c42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e050      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c46:	893b      	ldrh	r3, [r7, #8]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	6a39      	ldr	r1, [r7, #32]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f967 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d107      	bne.n	8002c78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e035      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f82b 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb2:	d103      	bne.n	8002cbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e013      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	6a3a      	ldr	r2, [r7, #32]
 8002cd4:	4906      	ldr	r1, [pc, #24]	; (8002cf0 <I2C_RequestMemoryRead+0x1cc>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f886 	bl	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010002 	.word	0x00010002

08002cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	e048      	b.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d044      	beq.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe fec3 	bl	8001a98 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d139      	bne.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10d      	bne.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	e00c      	b.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d116      	bne.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e023      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10d      	bne.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	43da      	mvns	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4013      	ands	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	e00c      	b.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d093      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df6:	e071      	b.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d123      	bne.n	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e067      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d041      	beq.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7fe fe1e 	bl	8001a98 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d136      	bne.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10c      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e00b      	b.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e021      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d10c      	bne.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e00b      	b.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f af6d 	bne.w	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f34:	e034      	b.n	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8e3 	bl	8003102 <I2C_IsAcknowledgeFailed>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e034      	b.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d028      	beq.n	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7fe fda3 	bl	8001a98 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b80      	cmp	r3, #128	; 0x80
 8002f70:	d016      	beq.n	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d1c3      	bne.n	8002f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fc4:	e034      	b.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f89b 	bl	8003102 <I2C_IsAcknowledgeFailed>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d028      	beq.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fd5b 	bl	8001a98 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11d      	bne.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d016      	beq.n	8003030 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e007      	b.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d1c3      	bne.n	8002fc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003054:	e049      	b.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b10      	cmp	r3, #16
 8003062:	d119      	bne.n	8003098 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0210 	mvn.w	r2, #16
 800306c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e030      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7fe fcfe 	bl	8001a98 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11d      	bne.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d016      	beq.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e007      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d1ae      	bne.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d11b      	bne.n	8003152 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003122:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
	...

08003160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e272      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8087 	beq.w	800328e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003180:	4b92      	ldr	r3, [pc, #584]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b04      	cmp	r3, #4
 800318a:	d00c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800318c:	4b8f      	ldr	r3, [pc, #572]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d112      	bne.n	80031be <HAL_RCC_OscConfig+0x5e>
 8003198:	4b8c      	ldr	r3, [pc, #560]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d10b      	bne.n	80031be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a6:	4b89      	ldr	r3, [pc, #548]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d06c      	beq.n	800328c <HAL_RCC_OscConfig+0x12c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d168      	bne.n	800328c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e24c      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x76>
 80031c8:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a7f      	ldr	r2, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e02e      	b.n	8003234 <HAL_RCC_OscConfig+0xd4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x98>
 80031de:	4b7b      	ldr	r3, [pc, #492]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a7a      	ldr	r2, [pc, #488]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b78      	ldr	r3, [pc, #480]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a77      	ldr	r2, [pc, #476]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80031f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e01d      	b.n	8003234 <HAL_RCC_OscConfig+0xd4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0xbc>
 8003202:	4b72      	ldr	r3, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a71      	ldr	r2, [pc, #452]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0xd4>
 800321c:	4b6b      	ldr	r3, [pc, #428]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b68      	ldr	r3, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a67      	ldr	r2, [pc, #412]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fc2c 	bl	8001a98 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fc28 	bl	8001a98 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e200      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0xe4>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fc18 	bl	8001a98 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fc14 	bl	8001a98 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1ec      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x10c>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d063      	beq.n	8003362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800329a:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d11c      	bne.n	80032ec <HAL_RCC_OscConfig+0x18c>
 80032b2:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d116      	bne.n	80032ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_RCC_OscConfig+0x176>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1c0      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4939      	ldr	r1, [pc, #228]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	e03a      	b.n	8003362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe fbcd 	bl	8001a98 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003302:	f7fe fbc9 	bl	8001a98 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e1a1      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4927      	ldr	r1, [pc, #156]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
 8003334:	e015      	b.n	8003362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_RCC_OscConfig+0x270>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fe fbac 	bl	8001a98 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003344:	f7fe fba8 	bl	8001a98 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e180      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03a      	beq.n	80033e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d019      	beq.n	80033aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe fb8c 	bl	8001a98 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7fe fb88 	bl	8001a98 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e160      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_RCC_OscConfig+0x26c>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f000 face 	bl	8003944 <RCC_Delay>
 80033a8:	e01c      	b.n	80033e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_RCC_OscConfig+0x274>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fb72 	bl	8001a98 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b6:	e00f      	b.n	80033d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fe fb6e 	bl	8001a98 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d908      	bls.n	80033d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e146      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	42420000 	.word	0x42420000
 80033d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b92      	ldr	r3, [pc, #584]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e9      	bne.n	80033b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a6 	beq.w	800353e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b8b      	ldr	r3, [pc, #556]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4a87      	ldr	r2, [pc, #540]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	61d3      	str	r3, [r2, #28]
 800340e:	4b85      	ldr	r3, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b82      	ldr	r3, [pc, #520]	; (8003628 <HAL_RCC_OscConfig+0x4c8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <HAL_RCC_OscConfig+0x4c8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7e      	ldr	r2, [pc, #504]	; (8003628 <HAL_RCC_OscConfig+0x4c8>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fe fb2f 	bl	8001a98 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fe fb2b 	bl	8001a98 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e103      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	4b75      	ldr	r3, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x4c8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x312>
 8003464:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a6e      	ldr	r2, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6213      	str	r3, [r2, #32]
 8003470:	e02d      	b.n	80034ce <HAL_RCC_OscConfig+0x36e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x334>
 800347a:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a69      	ldr	r2, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6213      	str	r3, [r2, #32]
 8003486:	4b67      	ldr	r3, [pc, #412]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a66      	ldr	r2, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	e01c      	b.n	80034ce <HAL_RCC_OscConfig+0x36e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d10c      	bne.n	80034b6 <HAL_RCC_OscConfig+0x356>
 800349c:	4b61      	ldr	r3, [pc, #388]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a60      	ldr	r2, [pc, #384]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	4b5e      	ldr	r3, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a5d      	ldr	r2, [pc, #372]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6213      	str	r3, [r2, #32]
 80034b4:	e00b      	b.n	80034ce <HAL_RCC_OscConfig+0x36e>
 80034b6:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a5a      	ldr	r2, [pc, #360]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	4b58      	ldr	r3, [pc, #352]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0304 	bic.w	r3, r3, #4
 80034cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d015      	beq.n	8003502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fe fadf 	bl	8001a98 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe fadb 	bl	8001a98 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e0b1      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ee      	beq.n	80034de <HAL_RCC_OscConfig+0x37e>
 8003500:	e014      	b.n	800352c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe fac9 	bl	8001a98 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe fac5 	bl	8001a98 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e09b      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ee      	bne.n	800350a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8087 	beq.w	8003656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b08      	cmp	r3, #8
 8003552:	d061      	beq.n	8003618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d146      	bne.n	80035ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b33      	ldr	r3, [pc, #204]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe fa99 	bl	8001a98 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe fa95 	bl	8001a98 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e06d      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d108      	bne.n	80035a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4921      	ldr	r1, [pc, #132]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a19      	ldr	r1, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	430b      	orrs	r3, r1
 80035b6:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe fa69 	bl	8001a98 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe fa65 	bl	8001a98 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e03d      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x46a>
 80035e8:	e035      	b.n	8003656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fa52 	bl	8001a98 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe fa4e 	bl	8001a98 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e026      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x498>
 8003616:	e01e      	b.n	8003656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e019      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
 8003624:	40021000 	.word	0x40021000
 8003628:	40007000 	.word	0x40007000
 800362c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x500>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	429a      	cmp	r2, r3
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0d0      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d910      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	4965      	ldr	r1, [pc, #404]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b8      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a52      	ldr	r2, [pc, #328]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	494d      	ldr	r1, [pc, #308]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d040      	beq.n	8003784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d115      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07f      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e073      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06b      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 0203 	bic.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4936      	ldr	r1, [pc, #216]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003754:	f7fe f9a0 	bl	8001a98 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7fe f99c 	bl	8001a98 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e053      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 020c 	and.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d1eb      	bne.n	800375c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d210      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 0207 	bic.w	r2, r3, #7
 800379a:	4922      	ldr	r1, [pc, #136]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4916      	ldr	r1, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	490e      	ldr	r1, [pc, #56]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037f2:	f000 f821 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1cc>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1d0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe f8fe 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40022000 	.word	0x40022000
 8003828:	40021000 	.word	0x40021000
 800382c:	0800738c 	.word	0x0800738c
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x30>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x36>
 8003866:	e027      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800386a:	613b      	str	r3, [r7, #16]
      break;
 800386c:	e027      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0c9b      	lsrs	r3, r3, #18
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003878:	5cd3      	ldrb	r3, [r2, r3]
 800387a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	0c5b      	lsrs	r3, r3, #17
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800389a:	fb03 f202 	mul.w	r2, r3, r2
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e004      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	613b      	str	r3, [r7, #16]
      break;
 80038b6:	e002      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ba:	613b      	str	r3, [r7, #16]
      break;
 80038bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038be:	693b      	ldr	r3, [r7, #16]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	080073a4 	.word	0x080073a4
 80038d8:	080073b4 	.word	0x080073b4
 80038dc:	003d0900 	.word	0x003d0900

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff2 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	0800739c 	.word	0x0800739c

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffde 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	0adb      	lsrs	r3, r3, #11
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	0800739c 	.word	0x0800739c

08003944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <RCC_Delay+0x34>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <RCC_Delay+0x38>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0a5b      	lsrs	r3, r3, #9
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003960:	bf00      	nop
  }
  while (Delay --);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	60fa      	str	r2, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f9      	bne.n	8003960 <RCC_Delay+0x1c>
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	20000000 	.word	0x20000000
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d07d      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b4c      	ldr	r3, [pc, #304]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4a4b      	ldr	r2, [pc, #300]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	61d3      	str	r3, [r2, #28]
 80039b8:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d118      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d4:	4b43      	ldr	r3, [pc, #268]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a42      	ldr	r2, [pc, #264]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e0:	f7fe f85a 	bl	8001a98 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	e008      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fe f856 	bl	8001a98 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e06d      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02e      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d027      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a24:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a34:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a3a:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d014      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fe f825 	bl	8001a98 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe f821 	bl	8001a98 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e036      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a74:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4917      	ldr	r1, [pc, #92]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	490b      	ldr	r1, [pc, #44]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	42420440 	.word	0x42420440

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e076      	b.n	8003bec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fdde 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	0c1a      	lsrs	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f002 0204 	and.w	r2, r2, #4
 8003bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_SPI_Transmit+0x22>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e12d      	b.n	8003e72 <HAL_SPI_Transmit+0x27e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1e:	f7fd ff3b 	bl	8001a98 <HAL_GetTick>
 8003c22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d002      	beq.n	8003c3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
 8003c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c38:	e116      	b.n	8003e68 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_SPI_Transmit+0x52>
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c4a:	e10d      	b.n	8003e68 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d10f      	bne.n	8003cb4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d007      	beq.n	8003cd2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cda:	d14f      	bne.n	8003d7c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_SPI_Transmit+0xf6>
 8003ce4:	8afb      	ldrh	r3, [r7, #22]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d142      	bne.n	8003d70 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d0e:	e02f      	b.n	8003d70 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d112      	bne.n	8003d44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d42:	e015      	b.n	8003d70 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d44:	f7fd fea8 	bl	8001a98 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d803      	bhi.n	8003d5c <HAL_SPI_Transmit+0x168>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d102      	bne.n	8003d62 <HAL_SPI_Transmit+0x16e>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d6e:	e07b      	b.n	8003e68 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ca      	bne.n	8003d10 <HAL_SPI_Transmit+0x11c>
 8003d7a:	e050      	b.n	8003e1e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Transmit+0x196>
 8003d84:	8afb      	ldrh	r3, [r7, #22]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d144      	bne.n	8003e14 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003db0:	e030      	b.n	8003e14 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d113      	bne.n	8003de8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003de6:	e015      	b.n	8003e14 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de8:	f7fd fe56 	bl	8001a98 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d803      	bhi.n	8003e00 <HAL_SPI_Transmit+0x20c>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d102      	bne.n	8003e06 <HAL_SPI_Transmit+0x212>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e12:	e029      	b.n	8003e68 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1c9      	bne.n	8003db2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fbd8 	bl	80045d8 <SPI_EndRxTxTransaction>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e003      	b.n	8003e68 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b088      	sub	sp, #32
 8003e7e:	af02      	add	r7, sp, #8
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e9e:	e0fb      	b.n	8004098 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea8:	d112      	bne.n	8003ed0 <HAL_SPI_Receive+0x56>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8ef 	bl	80040aa <HAL_SPI_TransmitReceive>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	e0e8      	b.n	80040a2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_SPI_Receive+0x64>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e0e1      	b.n	80040a2 <HAL_SPI_Receive+0x228>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ee6:	f7fd fdd7 	bl	8001a98 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_Receive+0x7e>
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003efc:	e0cc      	b.n	8004098 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2204      	movs	r2, #4
 8003f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f44:	d10f      	bne.n	8003f66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d007      	beq.n	8003f84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d16a      	bne.n	8004062 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f8c:	e032      	b.n	8003ff4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d115      	bne.n	8003fc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f103 020c 	add.w	r2, r3, #12
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc6:	e015      	b.n	8003ff4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc8:	f7fd fd66 	bl	8001a98 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d803      	bhi.n	8003fe0 <HAL_SPI_Receive+0x166>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d102      	bne.n	8003fe6 <HAL_SPI_Receive+0x16c>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ff2:	e051      	b.n	8004098 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1c7      	bne.n	8003f8e <HAL_SPI_Receive+0x114>
 8003ffe:	e035      	b.n	800406c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d113      	bne.n	8004036 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004034:	e015      	b.n	8004062 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004036:	f7fd fd2f 	bl	8001a98 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d803      	bhi.n	800404e <HAL_SPI_Receive+0x1d4>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d102      	bne.n	8004054 <HAL_SPI_Receive+0x1da>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004060:	e01a      	b.n	8004098 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1c9      	bne.n	8004000 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fa5f 	bl	8004534 <SPI_EndRxTransaction>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
 800408e:	e003      	b.n	8004098 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b08c      	sub	sp, #48	; 0x30
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040b8:	2301      	movs	r3, #1
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x26>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e198      	b.n	8004402 <HAL_SPI_TransmitReceive+0x358>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040d8:	f7fd fcde 	bl	8001a98 <HAL_GetTick>
 80040dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d00f      	beq.n	800411a <HAL_SPI_TransmitReceive+0x70>
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004100:	d107      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_SPI_TransmitReceive+0x68>
 800410a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800410e:	2b04      	cmp	r3, #4
 8004110:	d003      	beq.n	800411a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004118:	e16d      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_SPI_TransmitReceive+0x82>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_TransmitReceive+0x82>
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004132:	e160      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b04      	cmp	r3, #4
 800413e:	d003      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2205      	movs	r2, #5
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	887a      	ldrh	r2, [r7, #2]
 800416a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d007      	beq.n	800419c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d17c      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_TransmitReceive+0x10a>
 80041ae:	8b7b      	ldrh	r3, [r7, #26]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d16a      	bne.n	800428a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d8:	e057      	b.n	800428a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d11b      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x176>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x176>
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d113      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	881a      	ldrh	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b01      	cmp	r3, #1
 800422c:	d119      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x1b8>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d014      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	b292      	uxth	r2, r2
 8004244:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	1c9a      	adds	r2, r3, #2
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800425e:	2301      	movs	r3, #1
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004262:	f7fd fc19 	bl	8001a98 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800426e:	429a      	cmp	r2, r3
 8004270:	d80b      	bhi.n	800428a <HAL_SPI_TransmitReceive+0x1e0>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d007      	beq.n	800428a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004288:	e0b5      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1a2      	bne.n	80041da <HAL_SPI_TransmitReceive+0x130>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d19d      	bne.n	80041da <HAL_SPI_TransmitReceive+0x130>
 800429e:	e080      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x204>
 80042a8:	8b7b      	ldrh	r3, [r7, #26]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d16f      	bne.n	800438e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d4:	e05b      	b.n	800438e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d11c      	bne.n	800431e <HAL_SPI_TransmitReceive+0x274>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d017      	beq.n	800431e <HAL_SPI_TransmitReceive+0x274>
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d114      	bne.n	800431e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	7812      	ldrb	r2, [r2, #0]
 8004300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d119      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x2b6>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d014      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004360:	f7fd fb9a 	bl	8001a98 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800436c:	429a      	cmp	r2, r3
 800436e:	d803      	bhi.n	8004378 <HAL_SPI_TransmitReceive+0x2ce>
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d102      	bne.n	800437e <HAL_SPI_TransmitReceive+0x2d4>
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	2b00      	cmp	r3, #0
 800437c:	d107      	bne.n	800438e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800438c:	e033      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d19e      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x22c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d199      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f916 	bl	80045d8 <SPI_EndRxTxTransaction>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d006      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043be:	e01a      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ec:	e003      	b.n	80043f6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004402:	4618      	mov	r0, r3
 8004404:	3730      	adds	r7, #48	; 0x30
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004418:	b2db      	uxtb	r3, r3
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004434:	f7fd fb30 	bl	8001a98 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004444:	f7fd fb28 	bl	8001a98 <HAL_GetTick>
 8004448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	0d1b      	lsrs	r3, r3, #20
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	e054      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d050      	beq.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004464:	f7fd fb18 	bl	8001a98 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	429a      	cmp	r2, r3
 8004472:	d902      	bls.n	800447a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d13d      	bne.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004492:	d111      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449c:	d004      	beq.n	80044a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d107      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c0:	d10f      	bne.n	80044e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e017      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3b01      	subs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d19b      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000000 	.word	0x20000000

08004534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004548:	d111      	bne.n	800456e <SPI_EndRxTransaction+0x3a>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004552:	d004      	beq.n	800455e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455c:	d107      	bne.n	800456e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004576:	d117      	bne.n	80045a8 <SPI_EndRxTransaction+0x74>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d112      	bne.n	80045a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	2101      	movs	r1, #1
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff ff49 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01a      	beq.n	80045ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e013      	b.n	80045d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff ff36 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e000      	b.n	80045d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff ff18 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	f043 0220 	orr.w	r2, r3, #32
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e000      	b.n	800460c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e042      	b.n	80046ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd f8aa 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	; 0x24
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f82b 	bl	80046b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800466c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800467c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800468c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ee:	f023 030c 	bic.w	r3, r3, #12
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <UART_SetConfig+0x114>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d103      	bne.n	8004724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7ff f8fe 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	e002      	b.n	800472a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7ff f8e6 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	4a22      	ldr	r2, [pc, #136]	; (80047cc <UART_SetConfig+0x118>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	0119      	lsls	r1, r3, #4
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009a      	lsls	r2, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <UART_SetConfig+0x118>)
 8004762:	fba3 0302 	umull	r0, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2064      	movs	r0, #100	; 0x64
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	; 0x32
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <UART_SetConfig+0x118>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004780:	4419      	add	r1, r3
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009a      	lsls	r2, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	fbb2 f2f3 	udiv	r2, r2, r3
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <UART_SetConfig+0x118>)
 800479a:	fba3 0302 	umull	r0, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2064      	movs	r0, #100	; 0x64
 80047a2:	fb00 f303 	mul.w	r3, r0, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	3332      	adds	r3, #50	; 0x32
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <UART_SetConfig+0x118>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	440a      	add	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40013800 	.word	0x40013800
 80047cc:	51eb851f 	.word	0x51eb851f

080047d0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80047d0:	b4b0      	push	{r4, r5, r7}
 80047d2:	b08f      	sub	sp, #60	; 0x3c
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80047d8:	f240 13b1 	movw	r3, #433	; 0x1b1
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80047de:	2307      	movs	r3, #7
 80047e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80047e4:	2307      	movs	r3, #7
 80047e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80047f0:	23ff      	movs	r3, #255	; 0xff
 80047f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80047f6:	2364      	movs	r3, #100	; 0x64
 80047f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80047fc:	2308      	movs	r3, #8
 80047fe:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	461d      	mov	r5, r3
 8004804:	f107 040c 	add.w	r4, r7, #12
 8004808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004810:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004814:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	373c      	adds	r7, #60	; 0x3c
 800481c:	46bd      	mov	sp, r7
 800481e:	bcb0      	pop	{r4, r5, r7}
 8004820:	4770      	bx	lr

08004822 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6898      	ldr	r0, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	899b      	ldrh	r3, [r3, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	4619      	mov	r1, r3
 8004836:	f7fd fbef 	bl	8002018 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800483a:	2001      	movs	r0, #1
 800483c:	f7fd f936 	bl	8001aac <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6898      	ldr	r0, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	899b      	ldrh	r3, [r3, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	4619      	mov	r1, r3
 800484c:	f7fd fbe4 	bl	8002018 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004850:	2064      	movs	r0, #100	; 0x64
 8004852:	f7fd f92b 	bl	8001aac <HAL_Delay>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8004868:	2101      	movs	r1, #1
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f99e 	bl	8004bac <LoRa_read>
 8004870:	4603      	mov	r3, r0
 8004872:	73bb      	strb	r3, [r7, #14]
	data = read;
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d107      	bne.n	800488e <LoRa_gotoMode+0x30>
		data = (read & 0xF0) | 0x00;
 800487e:	7bbb      	ldrb	r3, [r7, #14]
 8004880:	f023 030f 	bic.w	r3, r3, #15
 8004884:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	61da      	str	r2, [r3, #28]
 800488c:	e03e      	b.n	800490c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10c      	bne.n	80048ae <LoRa_gotoMode+0x50>
		data = (read & 0xF0) | 0x01;
 8004894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004898:	f023 030f 	bic.w	r3, r3, #15
 800489c:	b25b      	sxtb	r3, r3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	61da      	str	r2, [r3, #28]
 80048ac:	e02e      	b.n	800490c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10c      	bne.n	80048ce <LoRa_gotoMode+0x70>
		data = (read & 0xF0) | 0x03;
 80048b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048b8:	f023 030f 	bic.w	r3, r3, #15
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	f043 0303 	orr.w	r3, r3, #3
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2203      	movs	r2, #3
 80048ca:	61da      	str	r2, [r3, #28]
 80048cc:	e01e      	b.n	800490c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d10c      	bne.n	80048ee <LoRa_gotoMode+0x90>
		data = (read & 0xF0) | 0x05;
 80048d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048d8:	f023 030f 	bic.w	r3, r3, #15
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	f043 0305 	orr.w	r3, r3, #5
 80048e2:	b25b      	sxtb	r3, r3
 80048e4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2205      	movs	r2, #5
 80048ea:	61da      	str	r2, [r3, #28]
 80048ec:	e00e      	b.n	800490c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d10b      	bne.n	800490c <LoRa_gotoMode+0xae>
		data = (read & 0xF0) | 0x06;
 80048f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	f043 0306 	orr.w	r3, r3, #6
 8004902:	b25b      	sxtb	r3, r3
 8004904:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2206      	movs	r2, #6
 800490a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	461a      	mov	r2, r3
 8004910:	2101      	movs	r1, #1
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f964 	bl	8004be0 <LoRa_write>
	//HAL_Delay(10);
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	889b      	ldrh	r3, [r3, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	4619      	mov	r1, r3
 800493c:	f7fd fb6c 	bl	8002018 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6998      	ldr	r0, [r3, #24]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	f7ff f952 	bl	8003bf4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004950:	bf00      	nop
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fd57 	bl	800440a <HAL_SPI_GetState>
 800495c:	4603      	mov	r3, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	d1f7      	bne.n	8004952 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6998      	ldr	r0, [r3, #24]
 8004966:	8b3a      	ldrh	r2, [r7, #24]
 8004968:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	f7ff fa84 	bl	8003e7a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004972:	bf00      	nop
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fd46 	bl	800440a <HAL_SPI_GetState>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d1f7      	bne.n	8004974 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	889b      	ldrh	r3, [r3, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	4619      	mov	r1, r3
 8004990:	f7fd fb42 	bl	8002018 <HAL_GPIO_WritePin>
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	889b      	ldrh	r3, [r3, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	4619      	mov	r1, r3
 80049b8:	f7fd fb2e 	bl	8002018 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6998      	ldr	r0, [r3, #24]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	f7ff f914 	bl	8003bf4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80049cc:	bf00      	nop
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fd19 	bl	800440a <HAL_SPI_GetState>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d1f7      	bne.n	80049ce <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6998      	ldr	r0, [r3, #24]
 80049e2:	8b3a      	ldrh	r2, [r7, #24]
 80049e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	f7ff f903 	bl	8003bf4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80049ee:	bf00      	nop
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fd08 	bl	800440a <HAL_SPI_GetState>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d1f7      	bne.n	80049f0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	889b      	ldrh	r3, [r3, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fd fb04 	bl	8002018 <HAL_GPIO_WritePin>
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	04db      	lsls	r3, r3, #19
 8004a26:	115b      	asrs	r3, r3, #5
 8004a28:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	461a      	mov	r2, r3
 8004a34:	2106      	movs	r1, #6
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8d2 	bl	8004be0 <LoRa_write>
	HAL_Delay(5);
 8004a3c:	2005      	movs	r0, #5
 8004a3e:	f7fd f835 	bl	8001aac <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0a1b      	lsrs	r3, r3, #8
 8004a46:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2107      	movs	r1, #7
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8c6 	bl	8004be0 <LoRa_write>
	HAL_Delay(5);
 8004a54:	2005      	movs	r0, #5
 8004a56:	f7fd f829 	bl	8001aac <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	461a      	mov	r2, r3
 8004a62:	2108      	movs	r1, #8
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8bb 	bl	8004be0 <LoRa_write>
	HAL_Delay(5);
 8004a6a:	2005      	movs	r0, #5
 8004a6c:	f7fd f81e 	bl	8001aac <HAL_Delay>
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	dd01      	ble.n	8004a8c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8004a88:	230c      	movs	r3, #12
 8004a8a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	dc01      	bgt.n	8004a96 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8004a92:	2307      	movs	r3, #7
 8004a94:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8004a96:	211e      	movs	r1, #30
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f887 	bl	8004bac <LoRa_read>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8004aa2:	200a      	movs	r0, #10
 8004aa4:	f7fd f802 	bl	8001aac <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8004abc:	7bbb      	ldrb	r3, [r7, #14]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	211e      	movs	r1, #30
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f88c 	bl	8004be0 <LoRa_write>
	HAL_Delay(10);
 8004ac8:	200a      	movs	r0, #10
 8004aca:	f7fc ffef 	bl	8001aac <HAL_Delay>
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2109      	movs	r1, #9
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f879 	bl	8004be0 <LoRa_write>
	HAL_Delay(10);
 8004aee:	200a      	movs	r0, #10
 8004af0:	f7fc ffdc 	bl	8001aac <HAL_Delay>
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	2b2c      	cmp	r3, #44	; 0x2c
 8004b10:	d801      	bhi.n	8004b16 <LoRa_setOCP+0x1a>
		current = 45;
 8004b12:	232d      	movs	r3, #45	; 0x2d
 8004b14:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	2bf0      	cmp	r3, #240	; 0xf0
 8004b1a:	d901      	bls.n	8004b20 <LoRa_setOCP+0x24>
		current = 240;
 8004b1c:	23f0      	movs	r3, #240	; 0xf0
 8004b1e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	2b78      	cmp	r3, #120	; 0x78
 8004b24:	d809      	bhi.n	8004b3a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	3b2d      	subs	r3, #45	; 0x2d
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <LoRa_setOCP+0x78>)
 8004b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8004b30:	1052      	asrs	r2, r2, #1
 8004b32:	17db      	asrs	r3, r3, #31
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	73fb      	strb	r3, [r7, #15]
 8004b38:	e00b      	b.n	8004b52 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2bf0      	cmp	r3, #240	; 0xf0
 8004b3e:	d808      	bhi.n	8004b52 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	331e      	adds	r3, #30
 8004b44:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <LoRa_setOCP+0x78>)
 8004b46:	fb82 1203 	smull	r1, r2, r2, r3
 8004b4a:	1092      	asrs	r2, r2, #2
 8004b4c:	17db      	asrs	r3, r3, #31
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	3320      	adds	r3, #32
 8004b56:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	210b      	movs	r1, #11
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f83e 	bl	8004be0 <LoRa_write>
	HAL_Delay(10);
 8004b64:	200a      	movs	r0, #10
 8004b66:	f7fc ffa1 	bl	8001aac <HAL_Delay>
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	66666667 	.word	0x66666667

08004b78 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8004b80:	211e      	movs	r1, #30
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f812 	bl	8004bac <LoRa_read>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	f043 0307 	orr.w	r3, r3, #7
 8004b92:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, 0x70);
 8004b94:	2270      	movs	r2, #112	; 0x70
 8004b96:	211e      	movs	r1, #30
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f821 	bl	8004be0 <LoRa_write>
	HAL_Delay(10);
 8004b9e:	200a      	movs	r0, #10
 8004ba0:	f7fc ff84 	bl	8001aac <HAL_Delay>
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8004bc2:	f107 030f 	add.w	r3, r7, #15
 8004bc6:	f107 010e 	add.w	r1, r7, #14
 8004bca:	2201      	movs	r2, #1
 8004bcc:	9200      	str	r2, [sp, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fea5 	bl	8004920 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
 8004bec:	4613      	mov	r3, r2
 8004bee:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	73bb      	strb	r3, [r7, #14]
	data = value;
 8004bfa:	78bb      	ldrb	r3, [r7, #2]
 8004bfc:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8004bfe:	f107 030f 	add.w	r3, r7, #15
 8004c02:	f107 010e 	add.w	r1, r7, #14
 8004c06:	2201      	movs	r2, #1
 8004c08:	9200      	str	r2, [sp, #0]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fec5 	bl	800499c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	72fb      	strb	r3, [r7, #11]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
 8004c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	889b      	ldrh	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	4619      	mov	r1, r3
 8004c44:	f7fd f9e8 	bl	8002018 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6998      	ldr	r0, [r3, #24]
 8004c4c:	f107 0117 	add.w	r1, r7, #23
 8004c50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004c54:	2201      	movs	r2, #1
 8004c56:	f7fe ffcd 	bl	8003bf4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004c5a:	bf00      	nop
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fbd2 	bl	800440a <HAL_SPI_GetState>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d1f7      	bne.n	8004c5c <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6998      	ldr	r0, [r3, #24]
 8004c70:	7abb      	ldrb	r3, [r7, #10]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	f7fe ffbb 	bl	8003bf4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004c7e:	bf00      	nop
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fbc0 	bl	800440a <HAL_SPI_GetState>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d1f7      	bne.n	8004c80 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	889b      	ldrh	r3, [r3, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f7fd f9bc 	bl	8002018 <HAL_GPIO_WritePin>
}
 8004ca0:	bf00      	nop
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

	return 1;
 8004cb0:	2301      	movs	r3, #1
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	460b      	mov	r3, r1
 8004ccc:	71fb      	strb	r3, [r7, #7]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8004cd8:	2101      	movs	r1, #1
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff fdbf 	bl	800485e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8004ce0:	210e      	movs	r1, #14
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff ff62 	bl	8004bac <LoRa_read>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 8004cec:	2200      	movs	r2, #0
 8004cee:	210e      	movs	r1, #14
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ff75 	bl	8004be0 <LoRa_write>
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	210d      	movs	r1, #13
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff ff6f 	bl	8004be0 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	461a      	mov	r2, r3
 8004d06:	2122      	movs	r1, #34	; 0x22
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ff69 	bl	8004be0 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	2100      	movs	r1, #0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff ff80 	bl	8004c1a <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8004d1a:	2103      	movs	r1, #3
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fd9e 	bl	800485e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8004d22:	2112      	movs	r1, #18
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff ff41 	bl	8004bac <LoRa_read>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <LoRa_transmit+0x92>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	2112      	movs	r1, #18
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ff4f 	bl	8004be0 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fd8a 	bl	800485e <LoRa_gotoMode>
			return 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00f      	b.n	8004d6e <LoRa_transmit+0xb2>
		}
		else{
			if(--timeout==0){
 8004d4e:	88bb      	ldrh	r3, [r7, #4]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	80bb      	strh	r3, [r7, #4]
 8004d54:	88bb      	ldrh	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <LoRa_transmit+0xaa>
				LoRa_gotoMode(_LoRa, mode);
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff fd7e 	bl	800485e <LoRa_gotoMode>
				return 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e003      	b.n	8004d6e <LoRa_transmit+0xb2>
			}
		}
		HAL_Delay(1);
 8004d66:	2001      	movs	r0, #1
 8004d68:	f7fc fea0 	bl	8001aac <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8004d6c:	e7d9      	b.n	8004d22 <LoRa_transmit+0x66>
	}
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8004d76:	b590      	push	{r4, r7, lr}
 8004d78:	b089      	sub	sp, #36	; 0x24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	4613      	mov	r3, r2
 8004d82:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e007      	b.n	8004d9e <LoRa_receive+0x28>
		data[i]=0;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4413      	add	r3, r2
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	dbf3      	blt.n	8004d8e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8004da6:	2101      	movs	r1, #1
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fd58 	bl	800485e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8004dae:	2112      	movs	r1, #18
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fefb 	bl	8004bac <LoRa_read>
 8004db6:	4603      	mov	r3, r0
 8004db8:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d02f      	beq.n	8004e24 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8004dc4:	22ff      	movs	r2, #255	; 0xff
 8004dc6:	2112      	movs	r1, #18
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff ff09 	bl	8004be0 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8004dce:	2113      	movs	r1, #19
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff feeb 	bl	8004bac <LoRa_read>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8004dda:	2110      	movs	r1, #16
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff fee5 	bl	8004bac <LoRa_read>
 8004de2:	4603      	mov	r3, r0
 8004de4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	461a      	mov	r2, r3
 8004dea:	210d      	movs	r1, #13
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fef7 	bl	8004be0 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8004df2:	7cba      	ldrb	r2, [r7, #18]
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	4293      	cmp	r3, r2
 8004df8:	bf28      	it	cs
 8004dfa:	4613      	movcs	r3, r2
 8004dfc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e00b      	b.n	8004e1c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	18d4      	adds	r4, r2, r3
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff fecd 	bl	8004bac <LoRa_read>
 8004e12:	4603      	mov	r3, r0
 8004e14:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	7ffb      	ldrb	r3, [r7, #31]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	dbef      	blt.n	8004e04 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8004e24:	2105      	movs	r1, #5
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff fd19 	bl	800485e <LoRa_gotoMode>
    return min;
 8004e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3724      	adds	r7, #36	; 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}

08004e36 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ff32 	bl	8004ca8 <LoRa_isvalid>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8098 	beq.w	8004f7c <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fd05 	bl	800485e <LoRa_gotoMode>
			HAL_Delay(10);
 8004e54:	200a      	movs	r0, #10
 8004e56:	f7fc fe29 	bl	8001aac <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff fea5 	bl	8004bac <LoRa_read>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8004e66:	200a      	movs	r0, #10
 8004e68:	f7fc fe20 	bl	8001aac <HAL_Delay>
			data = read | 0x80;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e72:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	461a      	mov	r2, r3
 8004e78:	2101      	movs	r1, #1
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff feb0 	bl	8004be0 <LoRa_write>
			HAL_Delay(100);
 8004e80:	2064      	movs	r0, #100	; 0x64
 8004e82:	f7fc fe13 	bl	8001aac <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fdc3 	bl	8004a18 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fe1b 	bl	8004ad6 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fe27 	bl	8004afc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8004eae:	2223      	movs	r2, #35	; 0x23
 8004eb0:	210c      	movs	r1, #12
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fe94 	bl	8004be0 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fe5d 	bl	8004b78 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fdd6 	bl	8004a78 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	211f      	movs	r1, #31
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fe85 	bl	8004be0 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8004ef2:	7bbb      	ldrb	r3, [r7, #14]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	211d      	movs	r1, #29
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fe71 	bl	8004be0 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2120      	movs	r1, #32
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff fe67 	bl	8004be0 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2121      	movs	r1, #33	; 0x21
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fe5f 	bl	8004be0 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8004f22:	2140      	movs	r1, #64	; 0x40
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fe41 	bl	8004bac <LoRa_read>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004f34:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2140      	movs	r1, #64	; 0x40
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fe4f 	bl	8004be0 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8004f42:	2101      	movs	r1, #1
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fc8a 	bl	800485e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8004f50:	200a      	movs	r0, #10
 8004f52:	f7fc fdab 	bl	8001aac <HAL_Delay>

			//init register
			LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 8004f56:	2200      	movs	r2, #0
 8004f58:	210e      	movs	r1, #14
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fe40 	bl	8004be0 <LoRa_write>
			read = LoRa_read(_LoRa, RegVersion);
 8004f60:	2142      	movs	r1, #66	; 0x42
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe22 	bl	8004bac <LoRa_read>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b12      	cmp	r3, #18
 8004f70:	d101      	bne.n	8004f76 <LoRa_init+0x140>
				return LORA_OK;
 8004f72:	23c8      	movs	r3, #200	; 0xc8
 8004f74:	e004      	b.n	8004f80 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 8004f76:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8004f7a:	e001      	b.n	8004f80 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 8004f7c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af04      	add	r7, sp, #16
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460a      	mov	r2, r1
 8004f92:	71fb      	strb	r3, [r7, #7]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8004f98:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <writeReg+0x44>)
 8004f9a:	79bb      	ldrb	r3, [r7, #6]
 8004f9c:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <writeReg+0x48>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b299      	uxth	r1, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	2364      	movs	r3, #100	; 0x64
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	2301      	movs	r3, #1
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <writeReg+0x44>)
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4807      	ldr	r0, [pc, #28]	; (8004fd4 <writeReg+0x4c>)
 8004fb8:	f7fd f9bc 	bl	8002334 <HAL_I2C_Mem_Write>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <writeReg+0x50>)
 8004fc2:	701a      	strb	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000360 	.word	0x20000360
 8004fd0:	20000009 	.word	0x20000009
 8004fd4:	2000030c 	.word	0x2000030c
 8004fd8:	20000364 	.word	0x20000364

08004fdc <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af04      	add	r7, sp, #16
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460a      	mov	r2, r1
 8004fe6:	71fb      	strb	r3, [r7, #7]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	80bb      	strh	r3, [r7, #4]
 8004fec:	88ba      	ldrh	r2, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <writeReg16Bit+0x44>)
 8004ff0:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <writeReg16Bit+0x48>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	2364      	movs	r3, #100	; 0x64
 8004ffe:	9302      	str	r3, [sp, #8]
 8005000:	2302      	movs	r3, #2
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <writeReg16Bit+0x44>)
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2301      	movs	r3, #1
 800500a:	4807      	ldr	r0, [pc, #28]	; (8005028 <writeReg16Bit+0x4c>)
 800500c:	f7fd f992 	bl	8002334 <HAL_I2C_Mem_Write>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <writeReg16Bit+0x50>)
 8005016:	701a      	strb	r2, [r3, #0]
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000360 	.word	0x20000360
 8005024:	20000009 	.word	0x20000009
 8005028:	2000030c 	.word	0x2000030c
 800502c:	20000364 	.word	0x20000364

08005030 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af04      	add	r7, sp, #16
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <readReg+0x48>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	b299      	uxth	r1, r3
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	b29a      	uxth	r2, r3
 800504a:	2364      	movs	r3, #100	; 0x64
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	2301      	movs	r3, #1
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <readReg+0x4c>)
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2301      	movs	r3, #1
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <readReg+0x50>)
 800505a:	f7fd fa65 	bl	8002528 <HAL_I2C_Mem_Read>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <readReg+0x54>)
 8005064:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <readReg+0x4c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	73fb      	strb	r3, [r7, #15]

  return value;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000009 	.word	0x20000009
 800507c:	20000360 	.word	0x20000360
 8005080:	2000030c 	.word	0x2000030c
 8005084:	20000364 	.word	0x20000364

08005088 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af04      	add	r7, sp, #16
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <readReg16Bit+0x48>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	b299      	uxth	r1, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	2364      	movs	r3, #100	; 0x64
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	2302      	movs	r3, #2
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <readReg16Bit+0x4c>)
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2301      	movs	r3, #1
 80050b0:	4809      	ldr	r0, [pc, #36]	; (80050d8 <readReg16Bit+0x50>)
 80050b2:	f7fd fa39 	bl	8002528 <HAL_I2C_Mem_Read>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <readReg16Bit+0x54>)
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <readReg16Bit+0x4c>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 80050c2:	81fb      	strh	r3, [r7, #14]

  return value;
 80050c4:	89fb      	ldrh	r3, [r7, #14]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000009 	.word	0x20000009
 80050d4:	20000360 	.word	0x20000360
 80050d8:	2000030c 	.word	0x2000030c
 80050dc:	20000364 	.word	0x20000364

080050e0 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af04      	add	r7, sp, #16
 80050e6:	4603      	mov	r3, r0
 80050e8:	6039      	str	r1, [r7, #0]
 80050ea:	71fb      	strb	r3, [r7, #7]
 80050ec:	4613      	mov	r3, r2
 80050ee:	71bb      	strb	r3, [r7, #6]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3

  memcpy(msgBuffer, src, 4);
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <writeMulti+0x4c>)
 80050f8:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <writeMulti+0x50>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	b299      	uxth	r1, r3
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	b29a      	uxth	r2, r3
 8005104:	79bb      	ldrb	r3, [r7, #6]
 8005106:	b29b      	uxth	r3, r3
 8005108:	2064      	movs	r0, #100	; 0x64
 800510a:	9002      	str	r0, [sp, #8]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <writeMulti+0x4c>)
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	2301      	movs	r3, #1
 8005114:	4807      	ldr	r0, [pc, #28]	; (8005134 <writeMulti+0x54>)
 8005116:	f7fd f90d 	bl	8002334 <HAL_I2C_Mem_Write>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <writeMulti+0x58>)
 8005120:	701a      	strb	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000360 	.word	0x20000360
 8005130:	20000009 	.word	0x20000009
 8005134:	2000030c 	.word	0x2000030c
 8005138:	20000364 	.word	0x20000364

0800513c <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af04      	add	r7, sp, #16
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
 8005148:	4613      	mov	r3, r2
 800514a:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <readMulti+0x48>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	b299      	uxth	r1, r3
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	b29a      	uxth	r2, r3
 800515c:	79bb      	ldrb	r3, [r7, #6]
 800515e:	b29b      	uxth	r3, r3
 8005160:	2064      	movs	r0, #100	; 0x64
 8005162:	9002      	str	r0, [sp, #8]
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2301      	movs	r3, #1
 800516c:	4806      	ldr	r0, [pc, #24]	; (8005188 <readMulti+0x4c>)
 800516e:	f7fd f9db 	bl	8002528 <HAL_I2C_Mem_Read>
 8005172:	4603      	mov	r3, r0
 8005174:	461a      	mov	r2, r3
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <readMulti+0x50>)
 8005178:	701a      	strb	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000009 	.word	0x20000009
 8005188:	2000030c 	.word	0x2000030c
 800518c:	20000364 	.word	0x20000364

08005190 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	6039      	str	r1, [r7, #0]
 800519a:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 800519c:	2254      	movs	r2, #84	; 0x54
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	4854      	ldr	r0, [pc, #336]	; (80052f4 <initVL53L0X+0x164>)
 80051a2:	f001 fa35 	bl	8006610 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 80051a6:	4b54      	ldr	r3, [pc, #336]	; (80052f8 <initVL53L0X+0x168>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 80051ac:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <initVL53L0X+0x168>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 80051b2:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <initVL53L0X+0x168>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 80051b8:	4b4f      	ldr	r3, [pc, #316]	; (80052f8 <initVL53L0X+0x168>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80051c4:	2089      	movs	r0, #137	; 0x89
 80051c6:	f7ff ff33 	bl	8005030 <readReg>
 80051ca:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	2089      	movs	r0, #137	; 0x89
 80051d6:	f7ff fed7 	bl	8004f88 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80051da:	2100      	movs	r1, #0
 80051dc:	2088      	movs	r0, #136	; 0x88
 80051de:	f7ff fed3 	bl	8004f88 <writeReg>

  writeReg(0x80, 0x01);
 80051e2:	2101      	movs	r1, #1
 80051e4:	2080      	movs	r0, #128	; 0x80
 80051e6:	f7ff fecf 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x01);
 80051ea:	2101      	movs	r1, #1
 80051ec:	20ff      	movs	r0, #255	; 0xff
 80051ee:	f7ff fecb 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x00);
 80051f2:	2100      	movs	r1, #0
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7ff fec7 	bl	8004f88 <writeReg>
  g_stopVariable = readReg(0x91);
 80051fa:	2091      	movs	r0, #145	; 0x91
 80051fc:	f7ff ff18 	bl	8005030 <readReg>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	4b3d      	ldr	r3, [pc, #244]	; (80052fc <initVL53L0X+0x16c>)
 8005206:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8005208:	2101      	movs	r1, #1
 800520a:	2000      	movs	r0, #0
 800520c:	f7ff febc 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x00);
 8005210:	2100      	movs	r1, #0
 8005212:	20ff      	movs	r0, #255	; 0xff
 8005214:	f7ff feb8 	bl	8004f88 <writeReg>
  writeReg(0x80, 0x00);
 8005218:	2100      	movs	r1, #0
 800521a:	2080      	movs	r0, #128	; 0x80
 800521c:	f7ff feb4 	bl	8004f88 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8005220:	2060      	movs	r0, #96	; 0x60
 8005222:	f7ff ff05 	bl	8005030 <readReg>
 8005226:	4603      	mov	r3, r0
 8005228:	f043 0312 	orr.w	r3, r3, #18
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4619      	mov	r1, r3
 8005230:	2060      	movs	r0, #96	; 0x60
 8005232:	f7ff fea9 	bl	8004f88 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8005236:	f04f 507a 	mov.w	r0, #1048576000	; 0x3e800000
 800523a:	f000 fa09 	bl	8005650 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800523e:	21ff      	movs	r1, #255	; 0xff
 8005240:	2001      	movs	r0, #1
 8005242:	f7ff fea1 	bl	8004f88 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8005246:	f107 0213 	add.w	r2, r7, #19
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fd6d 	bl	8005d30 <getSpadInfo>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <initVL53L0X+0xd0>
 800525c:	2300      	movs	r3, #0
 800525e:	e1ee      	b.n	800563e <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	2206      	movs	r2, #6
 8005266:	4619      	mov	r1, r3
 8005268:	20b0      	movs	r0, #176	; 0xb0
 800526a:	f7ff ff67 	bl	800513c <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 800526e:	2101      	movs	r1, #1
 8005270:	20ff      	movs	r0, #255	; 0xff
 8005272:	f7ff fe89 	bl	8004f88 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8005276:	2100      	movs	r1, #0
 8005278:	204f      	movs	r0, #79	; 0x4f
 800527a:	f7ff fe85 	bl	8004f88 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800527e:	212c      	movs	r1, #44	; 0x2c
 8005280:	204e      	movs	r0, #78	; 0x4e
 8005282:	f7ff fe81 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x00);
 8005286:	2100      	movs	r1, #0
 8005288:	20ff      	movs	r0, #255	; 0xff
 800528a:	f7ff fe7d 	bl	8004f88 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 800528e:	21b4      	movs	r1, #180	; 0xb4
 8005290:	20b6      	movs	r0, #182	; 0xb6
 8005292:	f7ff fe79 	bl	8004f88 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <initVL53L0X+0x110>
 800529c:	230c      	movs	r3, #12
 800529e:	e000      	b.n	80052a2 <initVL53L0X+0x112>
 80052a0:	2300      	movs	r3, #0
 80052a2:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	75bb      	strb	r3, [r7, #22]
 80052ac:	e03f      	b.n	800532e <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80052ae:	7dba      	ldrb	r2, [r7, #22]
 80052b0:	7d7b      	ldrb	r3, [r7, #21]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d303      	bcc.n	80052be <initVL53L0X+0x12e>
 80052b6:	7d3b      	ldrb	r3, [r7, #20]
 80052b8:	7dfa      	ldrb	r2, [r7, #23]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d120      	bne.n	8005300 <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80052be:	7dbb      	ldrb	r3, [r7, #22]
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	b2d8      	uxtb	r0, r3
 80052c4:	4603      	mov	r3, r0
 80052c6:	3318      	adds	r3, #24
 80052c8:	443b      	add	r3, r7
 80052ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80052ce:	b25a      	sxtb	r2, r3
 80052d0:	7dbb      	ldrb	r3, [r7, #22]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	b25b      	sxtb	r3, r3
 80052e2:	4013      	ands	r3, r2
 80052e4:	b25a      	sxtb	r2, r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	3318      	adds	r3, #24
 80052ec:	443b      	add	r3, r7
 80052ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80052f2:	e019      	b.n	8005328 <initVL53L0X+0x198>
 80052f4:	2000030c 	.word	0x2000030c
 80052f8:	20000360 	.word	0x20000360
 80052fc:	20000306 	.word	0x20000306
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8005300:	7dbb      	ldrb	r3, [r7, #22]
 8005302:	08db      	lsrs	r3, r3, #3
 8005304:	b2db      	uxtb	r3, r3
 8005306:	3318      	adds	r3, #24
 8005308:	443b      	add	r3, r7
 800530a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800530e:	461a      	mov	r2, r3
 8005310:	7dbb      	ldrb	r3, [r7, #22]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	fa42 f303 	asr.w	r3, r2, r3
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <initVL53L0X+0x198>
    {
      spads_enabled++;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	3301      	adds	r3, #1
 8005326:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8005328:	7dbb      	ldrb	r3, [r7, #22]
 800532a:	3301      	adds	r3, #1
 800532c:	75bb      	strb	r3, [r7, #22]
 800532e:	7dbb      	ldrb	r3, [r7, #22]
 8005330:	2b2f      	cmp	r3, #47	; 0x2f
 8005332:	d9bc      	bls.n	80052ae <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	2206      	movs	r2, #6
 800533a:	4619      	mov	r1, r3
 800533c:	20b0      	movs	r0, #176	; 0xb0
 800533e:	f7ff fecf 	bl	80050e0 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8005342:	2101      	movs	r1, #1
 8005344:	20ff      	movs	r0, #255	; 0xff
 8005346:	f7ff fe1f 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x00);
 800534a:	2100      	movs	r1, #0
 800534c:	2000      	movs	r0, #0
 800534e:	f7ff fe1b 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 8005352:	2100      	movs	r1, #0
 8005354:	20ff      	movs	r0, #255	; 0xff
 8005356:	f7ff fe17 	bl	8004f88 <writeReg>
  writeReg(0x09, 0x00);
 800535a:	2100      	movs	r1, #0
 800535c:	2009      	movs	r0, #9
 800535e:	f7ff fe13 	bl	8004f88 <writeReg>
  writeReg(0x10, 0x00);
 8005362:	2100      	movs	r1, #0
 8005364:	2010      	movs	r0, #16
 8005366:	f7ff fe0f 	bl	8004f88 <writeReg>
  writeReg(0x11, 0x00);
 800536a:	2100      	movs	r1, #0
 800536c:	2011      	movs	r0, #17
 800536e:	f7ff fe0b 	bl	8004f88 <writeReg>

  writeReg(0x24, 0x01);
 8005372:	2101      	movs	r1, #1
 8005374:	2024      	movs	r0, #36	; 0x24
 8005376:	f7ff fe07 	bl	8004f88 <writeReg>
  writeReg(0x25, 0xFF);
 800537a:	21ff      	movs	r1, #255	; 0xff
 800537c:	2025      	movs	r0, #37	; 0x25
 800537e:	f7ff fe03 	bl	8004f88 <writeReg>
  writeReg(0x75, 0x00);
 8005382:	2100      	movs	r1, #0
 8005384:	2075      	movs	r0, #117	; 0x75
 8005386:	f7ff fdff 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x01);
 800538a:	2101      	movs	r1, #1
 800538c:	20ff      	movs	r0, #255	; 0xff
 800538e:	f7ff fdfb 	bl	8004f88 <writeReg>
  writeReg(0x4E, 0x2C);
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	204e      	movs	r0, #78	; 0x4e
 8005396:	f7ff fdf7 	bl	8004f88 <writeReg>
  writeReg(0x48, 0x00);
 800539a:	2100      	movs	r1, #0
 800539c:	2048      	movs	r0, #72	; 0x48
 800539e:	f7ff fdf3 	bl	8004f88 <writeReg>
  writeReg(0x30, 0x20);
 80053a2:	2120      	movs	r1, #32
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	f7ff fdef 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 80053aa:	2100      	movs	r1, #0
 80053ac:	20ff      	movs	r0, #255	; 0xff
 80053ae:	f7ff fdeb 	bl	8004f88 <writeReg>
  writeReg(0x30, 0x09);
 80053b2:	2109      	movs	r1, #9
 80053b4:	2030      	movs	r0, #48	; 0x30
 80053b6:	f7ff fde7 	bl	8004f88 <writeReg>
  writeReg(0x54, 0x00);
 80053ba:	2100      	movs	r1, #0
 80053bc:	2054      	movs	r0, #84	; 0x54
 80053be:	f7ff fde3 	bl	8004f88 <writeReg>
  writeReg(0x31, 0x04);
 80053c2:	2104      	movs	r1, #4
 80053c4:	2031      	movs	r0, #49	; 0x31
 80053c6:	f7ff fddf 	bl	8004f88 <writeReg>
  writeReg(0x32, 0x03);
 80053ca:	2103      	movs	r1, #3
 80053cc:	2032      	movs	r0, #50	; 0x32
 80053ce:	f7ff fddb 	bl	8004f88 <writeReg>
  writeReg(0x40, 0x83);
 80053d2:	2183      	movs	r1, #131	; 0x83
 80053d4:	2040      	movs	r0, #64	; 0x40
 80053d6:	f7ff fdd7 	bl	8004f88 <writeReg>
  writeReg(0x46, 0x25);
 80053da:	2125      	movs	r1, #37	; 0x25
 80053dc:	2046      	movs	r0, #70	; 0x46
 80053de:	f7ff fdd3 	bl	8004f88 <writeReg>
  writeReg(0x60, 0x00);
 80053e2:	2100      	movs	r1, #0
 80053e4:	2060      	movs	r0, #96	; 0x60
 80053e6:	f7ff fdcf 	bl	8004f88 <writeReg>
  writeReg(0x27, 0x00);
 80053ea:	2100      	movs	r1, #0
 80053ec:	2027      	movs	r0, #39	; 0x27
 80053ee:	f7ff fdcb 	bl	8004f88 <writeReg>
  writeReg(0x50, 0x06);
 80053f2:	2106      	movs	r1, #6
 80053f4:	2050      	movs	r0, #80	; 0x50
 80053f6:	f7ff fdc7 	bl	8004f88 <writeReg>
  writeReg(0x51, 0x00);
 80053fa:	2100      	movs	r1, #0
 80053fc:	2051      	movs	r0, #81	; 0x51
 80053fe:	f7ff fdc3 	bl	8004f88 <writeReg>
  writeReg(0x52, 0x96);
 8005402:	2196      	movs	r1, #150	; 0x96
 8005404:	2052      	movs	r0, #82	; 0x52
 8005406:	f7ff fdbf 	bl	8004f88 <writeReg>
  writeReg(0x56, 0x08);
 800540a:	2108      	movs	r1, #8
 800540c:	2056      	movs	r0, #86	; 0x56
 800540e:	f7ff fdbb 	bl	8004f88 <writeReg>
  writeReg(0x57, 0x30);
 8005412:	2130      	movs	r1, #48	; 0x30
 8005414:	2057      	movs	r0, #87	; 0x57
 8005416:	f7ff fdb7 	bl	8004f88 <writeReg>
  writeReg(0x61, 0x00);
 800541a:	2100      	movs	r1, #0
 800541c:	2061      	movs	r0, #97	; 0x61
 800541e:	f7ff fdb3 	bl	8004f88 <writeReg>
  writeReg(0x62, 0x00);
 8005422:	2100      	movs	r1, #0
 8005424:	2062      	movs	r0, #98	; 0x62
 8005426:	f7ff fdaf 	bl	8004f88 <writeReg>
  writeReg(0x64, 0x00);
 800542a:	2100      	movs	r1, #0
 800542c:	2064      	movs	r0, #100	; 0x64
 800542e:	f7ff fdab 	bl	8004f88 <writeReg>
  writeReg(0x65, 0x00);
 8005432:	2100      	movs	r1, #0
 8005434:	2065      	movs	r0, #101	; 0x65
 8005436:	f7ff fda7 	bl	8004f88 <writeReg>
  writeReg(0x66, 0xA0);
 800543a:	21a0      	movs	r1, #160	; 0xa0
 800543c:	2066      	movs	r0, #102	; 0x66
 800543e:	f7ff fda3 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x01);
 8005442:	2101      	movs	r1, #1
 8005444:	20ff      	movs	r0, #255	; 0xff
 8005446:	f7ff fd9f 	bl	8004f88 <writeReg>
  writeReg(0x22, 0x32);
 800544a:	2132      	movs	r1, #50	; 0x32
 800544c:	2022      	movs	r0, #34	; 0x22
 800544e:	f7ff fd9b 	bl	8004f88 <writeReg>
  writeReg(0x47, 0x14);
 8005452:	2114      	movs	r1, #20
 8005454:	2047      	movs	r0, #71	; 0x47
 8005456:	f7ff fd97 	bl	8004f88 <writeReg>
  writeReg(0x49, 0xFF);
 800545a:	21ff      	movs	r1, #255	; 0xff
 800545c:	2049      	movs	r0, #73	; 0x49
 800545e:	f7ff fd93 	bl	8004f88 <writeReg>
  writeReg(0x4A, 0x00);
 8005462:	2100      	movs	r1, #0
 8005464:	204a      	movs	r0, #74	; 0x4a
 8005466:	f7ff fd8f 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 800546a:	2100      	movs	r1, #0
 800546c:	20ff      	movs	r0, #255	; 0xff
 800546e:	f7ff fd8b 	bl	8004f88 <writeReg>
  writeReg(0x7A, 0x0A);
 8005472:	210a      	movs	r1, #10
 8005474:	207a      	movs	r0, #122	; 0x7a
 8005476:	f7ff fd87 	bl	8004f88 <writeReg>
  writeReg(0x7B, 0x00);
 800547a:	2100      	movs	r1, #0
 800547c:	207b      	movs	r0, #123	; 0x7b
 800547e:	f7ff fd83 	bl	8004f88 <writeReg>
  writeReg(0x78, 0x21);
 8005482:	2121      	movs	r1, #33	; 0x21
 8005484:	2078      	movs	r0, #120	; 0x78
 8005486:	f7ff fd7f 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x01);
 800548a:	2101      	movs	r1, #1
 800548c:	20ff      	movs	r0, #255	; 0xff
 800548e:	f7ff fd7b 	bl	8004f88 <writeReg>
  writeReg(0x23, 0x34);
 8005492:	2134      	movs	r1, #52	; 0x34
 8005494:	2023      	movs	r0, #35	; 0x23
 8005496:	f7ff fd77 	bl	8004f88 <writeReg>
  writeReg(0x42, 0x00);
 800549a:	2100      	movs	r1, #0
 800549c:	2042      	movs	r0, #66	; 0x42
 800549e:	f7ff fd73 	bl	8004f88 <writeReg>
  writeReg(0x44, 0xFF);
 80054a2:	21ff      	movs	r1, #255	; 0xff
 80054a4:	2044      	movs	r0, #68	; 0x44
 80054a6:	f7ff fd6f 	bl	8004f88 <writeReg>
  writeReg(0x45, 0x26);
 80054aa:	2126      	movs	r1, #38	; 0x26
 80054ac:	2045      	movs	r0, #69	; 0x45
 80054ae:	f7ff fd6b 	bl	8004f88 <writeReg>
  writeReg(0x46, 0x05);
 80054b2:	2105      	movs	r1, #5
 80054b4:	2046      	movs	r0, #70	; 0x46
 80054b6:	f7ff fd67 	bl	8004f88 <writeReg>
  writeReg(0x40, 0x40);
 80054ba:	2140      	movs	r1, #64	; 0x40
 80054bc:	2040      	movs	r0, #64	; 0x40
 80054be:	f7ff fd63 	bl	8004f88 <writeReg>
  writeReg(0x0E, 0x06);
 80054c2:	2106      	movs	r1, #6
 80054c4:	200e      	movs	r0, #14
 80054c6:	f7ff fd5f 	bl	8004f88 <writeReg>
  writeReg(0x20, 0x1A);
 80054ca:	211a      	movs	r1, #26
 80054cc:	2020      	movs	r0, #32
 80054ce:	f7ff fd5b 	bl	8004f88 <writeReg>
  writeReg(0x43, 0x40);
 80054d2:	2140      	movs	r1, #64	; 0x40
 80054d4:	2043      	movs	r0, #67	; 0x43
 80054d6:	f7ff fd57 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 80054da:	2100      	movs	r1, #0
 80054dc:	20ff      	movs	r0, #255	; 0xff
 80054de:	f7ff fd53 	bl	8004f88 <writeReg>
  writeReg(0x34, 0x03);
 80054e2:	2103      	movs	r1, #3
 80054e4:	2034      	movs	r0, #52	; 0x34
 80054e6:	f7ff fd4f 	bl	8004f88 <writeReg>
  writeReg(0x35, 0x44);
 80054ea:	2144      	movs	r1, #68	; 0x44
 80054ec:	2035      	movs	r0, #53	; 0x35
 80054ee:	f7ff fd4b 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x01);
 80054f2:	2101      	movs	r1, #1
 80054f4:	20ff      	movs	r0, #255	; 0xff
 80054f6:	f7ff fd47 	bl	8004f88 <writeReg>
  writeReg(0x31, 0x04);
 80054fa:	2104      	movs	r1, #4
 80054fc:	2031      	movs	r0, #49	; 0x31
 80054fe:	f7ff fd43 	bl	8004f88 <writeReg>
  writeReg(0x4B, 0x09);
 8005502:	2109      	movs	r1, #9
 8005504:	204b      	movs	r0, #75	; 0x4b
 8005506:	f7ff fd3f 	bl	8004f88 <writeReg>
  writeReg(0x4C, 0x05);
 800550a:	2105      	movs	r1, #5
 800550c:	204c      	movs	r0, #76	; 0x4c
 800550e:	f7ff fd3b 	bl	8004f88 <writeReg>
  writeReg(0x4D, 0x04);
 8005512:	2104      	movs	r1, #4
 8005514:	204d      	movs	r0, #77	; 0x4d
 8005516:	f7ff fd37 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 800551a:	2100      	movs	r1, #0
 800551c:	20ff      	movs	r0, #255	; 0xff
 800551e:	f7ff fd33 	bl	8004f88 <writeReg>
  writeReg(0x44, 0x00);
 8005522:	2100      	movs	r1, #0
 8005524:	2044      	movs	r0, #68	; 0x44
 8005526:	f7ff fd2f 	bl	8004f88 <writeReg>
  writeReg(0x45, 0x20);
 800552a:	2120      	movs	r1, #32
 800552c:	2045      	movs	r0, #69	; 0x45
 800552e:	f7ff fd2b 	bl	8004f88 <writeReg>
  writeReg(0x47, 0x08);
 8005532:	2108      	movs	r1, #8
 8005534:	2047      	movs	r0, #71	; 0x47
 8005536:	f7ff fd27 	bl	8004f88 <writeReg>
  writeReg(0x48, 0x28);
 800553a:	2128      	movs	r1, #40	; 0x28
 800553c:	2048      	movs	r0, #72	; 0x48
 800553e:	f7ff fd23 	bl	8004f88 <writeReg>
  writeReg(0x67, 0x00);
 8005542:	2100      	movs	r1, #0
 8005544:	2067      	movs	r0, #103	; 0x67
 8005546:	f7ff fd1f 	bl	8004f88 <writeReg>
  writeReg(0x70, 0x04);
 800554a:	2104      	movs	r1, #4
 800554c:	2070      	movs	r0, #112	; 0x70
 800554e:	f7ff fd1b 	bl	8004f88 <writeReg>
  writeReg(0x71, 0x01);
 8005552:	2101      	movs	r1, #1
 8005554:	2071      	movs	r0, #113	; 0x71
 8005556:	f7ff fd17 	bl	8004f88 <writeReg>
  writeReg(0x72, 0xFE);
 800555a:	21fe      	movs	r1, #254	; 0xfe
 800555c:	2072      	movs	r0, #114	; 0x72
 800555e:	f7ff fd13 	bl	8004f88 <writeReg>
  writeReg(0x76, 0x00);
 8005562:	2100      	movs	r1, #0
 8005564:	2076      	movs	r0, #118	; 0x76
 8005566:	f7ff fd0f 	bl	8004f88 <writeReg>
  writeReg(0x77, 0x00);
 800556a:	2100      	movs	r1, #0
 800556c:	2077      	movs	r0, #119	; 0x77
 800556e:	f7ff fd0b 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x01);
 8005572:	2101      	movs	r1, #1
 8005574:	20ff      	movs	r0, #255	; 0xff
 8005576:	f7ff fd07 	bl	8004f88 <writeReg>
  writeReg(0x0D, 0x01);
 800557a:	2101      	movs	r1, #1
 800557c:	200d      	movs	r0, #13
 800557e:	f7ff fd03 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 8005582:	2100      	movs	r1, #0
 8005584:	20ff      	movs	r0, #255	; 0xff
 8005586:	f7ff fcff 	bl	8004f88 <writeReg>
  writeReg(0x80, 0x01);
 800558a:	2101      	movs	r1, #1
 800558c:	2080      	movs	r0, #128	; 0x80
 800558e:	f7ff fcfb 	bl	8004f88 <writeReg>
  writeReg(0x01, 0xF8);
 8005592:	21f8      	movs	r1, #248	; 0xf8
 8005594:	2001      	movs	r0, #1
 8005596:	f7ff fcf7 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x01);
 800559a:	2101      	movs	r1, #1
 800559c:	20ff      	movs	r0, #255	; 0xff
 800559e:	f7ff fcf3 	bl	8004f88 <writeReg>
  writeReg(0x8E, 0x01);
 80055a2:	2101      	movs	r1, #1
 80055a4:	208e      	movs	r0, #142	; 0x8e
 80055a6:	f7ff fcef 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x01);
 80055aa:	2101      	movs	r1, #1
 80055ac:	2000      	movs	r0, #0
 80055ae:	f7ff fceb 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x00);
 80055b2:	2100      	movs	r1, #0
 80055b4:	20ff      	movs	r0, #255	; 0xff
 80055b6:	f7ff fce7 	bl	8004f88 <writeReg>
  writeReg(0x80, 0x00);
 80055ba:	2100      	movs	r1, #0
 80055bc:	2080      	movs	r0, #128	; 0x80
 80055be:	f7ff fce3 	bl	8004f88 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80055c2:	2104      	movs	r1, #4
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7ff fcdf 	bl	8004f88 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80055ca:	2084      	movs	r0, #132	; 0x84
 80055cc:	f7ff fd30 	bl	8005030 <readReg>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	4619      	mov	r1, r3
 80055da:	2084      	movs	r0, #132	; 0x84
 80055dc:	f7ff fcd4 	bl	8004f88 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80055e0:	2101      	movs	r1, #1
 80055e2:	200b      	movs	r0, #11
 80055e4:	f7ff fcd0 	bl	8004f88 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 80055e8:	f000 f8fe 	bl	80057e8 <getMeasurementTimingBudget>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <initVL53L0X+0x4b8>)
 80055f0:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80055f2:	21e8      	movs	r1, #232	; 0xe8
 80055f4:	2001      	movs	r0, #1
 80055f6:	f7ff fcc7 	bl	8004f88 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 80055fa:	4b13      	ldr	r3, [pc, #76]	; (8005648 <initVL53L0X+0x4b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f85a 	bl	80056b8 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005604:	2101      	movs	r1, #1
 8005606:	2001      	movs	r0, #1
 8005608:	f7ff fcbe 	bl	8004f88 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 800560c:	2040      	movs	r0, #64	; 0x40
 800560e:	f000 fd47 	bl	80060a0 <performSingleRefCalibration>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <initVL53L0X+0x48c>
 8005618:	2300      	movs	r3, #0
 800561a:	e010      	b.n	800563e <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800561c:	2102      	movs	r1, #2
 800561e:	2001      	movs	r0, #1
 8005620:	f7ff fcb2 	bl	8004f88 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8005624:	2000      	movs	r0, #0
 8005626:	f000 fd3b 	bl	80060a0 <performSingleRefCalibration>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <initVL53L0X+0x4a4>
 8005630:	2300      	movs	r3, #0
 8005632:	e004      	b.n	800563e <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8005634:	21e8      	movs	r1, #232	; 0xe8
 8005636:	2001      	movs	r0, #1
 8005638:	f7ff fca6 	bl	8004f88 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 800563c:	2301      	movs	r3, #1
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000308 	.word	0x20000308
 800564c:	00000000 	.word	0x00000000

08005650 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8005658:	f04f 0100 	mov.w	r1, #0
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fb f959 	bl	8000914 <__aeabi_fcmplt>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <setSignalRateLimit+0x2e>
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fa fed5 	bl	8000418 <__aeabi_f2d>
 800566e:	a310      	add	r3, pc, #64	; (adr r3, 80056b0 <setSignalRateLimit+0x60>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa ffa6 	bl	80005c4 <__aeabi_dcmpgt>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <setSignalRateLimit+0x32>
 800567e:	2300      	movs	r3, #0
 8005680:	e00f      	b.n	80056a2 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8005682:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fa ffa6 	bl	80005d8 <__aeabi_fmul>
 800568c:	4603      	mov	r3, r0
 800568e:	4618      	mov	r0, r3
 8005690:	f7fb f968 	bl	8000964 <__aeabi_f2uiz>
 8005694:	4603      	mov	r3, r0
 8005696:	b29b      	uxth	r3, r3
 8005698:	4619      	mov	r1, r3
 800569a:	2044      	movs	r0, #68	; 0x44
 800569c:	f7ff fc9e 	bl	8004fdc <writeReg16Bit>
  return true;
 80056a0:	2301      	movs	r3, #1
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w
 80056b0:	0a3d70a4 	.word	0x0a3d70a4
 80056b4:	407fffd7 	.word	0x407fffd7

080056b8 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b092      	sub	sp, #72	; 0x48
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80056c0:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80056c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 80056c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80056cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 80056ce:	f44f 7325 	mov.w	r3, #660	; 0x294
 80056d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 80056d4:	f240 234e 	movw	r3, #590	; 0x24e
 80056d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 80056da:	f240 23b2 	movw	r3, #690	; 0x2b2
 80056de:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 80056e0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80056e4:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 80056e6:	f240 2326 	movw	r3, #550	; 0x226
 80056ea:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 80056ec:	f644 6320 	movw	r3, #20000	; 0x4e20
 80056f0:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d201      	bcs.n	80056fe <setMeasurementTimingBudget+0x46>
 80056fa:	2300      	movs	r3, #0
 80056fc:	e06e      	b.n	80057dc <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80056fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005704:	4413      	add	r3, r2
 8005706:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(&enables);
 8005708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fba3 	bl	8005e58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8005712:	f107 020c 	add.w	r2, r7, #12
 8005716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fbcd 	bl	8005ebc <getSequenceStepTimeouts>

  if (enables.tcc)
 8005722:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800572e:	4413      	add	r3, r2
 8005730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005732:	4413      	add	r3, r2
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8005736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005742:	4413      	add	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005748:	4413      	add	r3, r2
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
 800574c:	e009      	b.n	8005762 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 800574e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800575a:	4413      	add	r3, r2
 800575c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575e:	4413      	add	r3, r2
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 8005762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800576e:	4413      	add	r3, r2
 8005770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005772:	4413      	add	r3, r2
 8005774:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8005776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02d      	beq.n	80057da <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 800577e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005782:	4413      	add	r3, r2
 8005784:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8005786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d901      	bls.n	8005792 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 800578e:	2300      	movs	r3, #0
 8005790:	e024      	b.n	80057dc <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800579a:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800579c:	b2db      	uxtb	r3, r3
 800579e:	4619      	mov	r1, r3
 80057a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057a2:	f000 fc57 	bl	8006054 <timeoutMicrosecondsToMclks>
 80057a6:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80057a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 80057ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80057b4:	8a7a      	ldrh	r2, [r7, #18]
 80057b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057ba:	4413      	add	r3, r2
 80057bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80057c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fbf2 	bl	8005fae <encodeTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4619      	mov	r1, r3
 80057ce:	2071      	movs	r0, #113	; 0x71
 80057d0:	f7ff fc04 	bl	8004fdc <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80057d4:	4a03      	ldr	r2, [pc, #12]	; (80057e4 <setMeasurementTimingBudget+0x12c>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6013      	str	r3, [r2, #0]
  }
  return true;
 80057da:	2301      	movs	r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3748      	adds	r7, #72	; 0x48
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000308 	.word	0x20000308

080057e8 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	; 0x30
 80057ec:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80057ee:	f240 7376 	movw	r3, #1910	; 0x776
 80057f2:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 80057f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80057f8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 80057fa:	f44f 7325 	mov.w	r3, #660	; 0x294
 80057fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8005800:	f240 234e 	movw	r3, #590	; 0x24e
 8005804:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 8005806:	f240 23b2 	movw	r3, #690	; 0x2b2
 800580a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 800580c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005810:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8005812:	f240 2326 	movw	r3, #550	; 0x226
 8005816:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8005818:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800581a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800581c:	4413      	add	r3, r2
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c

  getSequenceStepEnables(&enables);
 8005820:	f107 0318 	add.w	r3, r7, #24
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fb17 	bl	8005e58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800582a:	463a      	mov	r2, r7
 800582c:	f107 0318 	add.w	r3, r7, #24
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fb42 	bl	8005ebc <getSequenceStepTimeouts>

  if (enables.tcc)
 8005838:	7e3b      	ldrb	r3, [r7, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005842:	4413      	add	r3, r2
 8005844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005846:	4413      	add	r3, r2
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.dss)
 800584a:	7ebb      	ldrb	r3, [r7, #26]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005854:	4413      	add	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585a:	4413      	add	r3, r2
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585e:	e008      	b.n	8005872 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 8005860:	7e7b      	ldrb	r3, [r7, #25]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800586a:	4413      	add	r3, r2
 800586c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800586e:	4413      	add	r3, r2
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.pre_range)
 8005872:	7efb      	ldrb	r3, [r7, #27]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	8c3b      	ldrh	r3, [r7, #32]
 800587c:	4413      	add	r3, r2
 800587e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005880:	4413      	add	r3, r2
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables.final_range)
 8005884:	7f3b      	ldrb	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	8bfb      	ldrh	r3, [r7, #30]
 800588e:	4413      	add	r3, r2
 8005890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005892:	4413      	add	r3, r2
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8005896:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <getMeasurementTimingBudget+0xc0>)
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	6013      	str	r3, [r2, #0]
  return budget_us;
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3730      	adds	r7, #48	; 0x30
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000308 	.word	0x20000308

080058ac <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08c      	sub	sp, #48	; 0x30
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	460a      	mov	r2, r1
 80058b6:	71fb      	strb	r3, [r7, #7]
 80058b8:	4613      	mov	r3, r2
 80058ba:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 80058bc:	79bb      	ldrb	r3, [r7, #6]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 80058c8:	f107 0320 	add.w	r3, r7, #32
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fac3 	bl	8005e58 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80058d2:	f107 0208 	add.w	r2, r7, #8
 80058d6:	f107 0320 	add.w	r3, r7, #32
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 faed 	bl	8005ebc <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d15d      	bne.n	80059a4 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 80058e8:	79bb      	ldrb	r3, [r7, #6]
 80058ea:	3b0c      	subs	r3, #12
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	d825      	bhi.n	800593c <setVcselPulsePeriod+0x90>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <setVcselPulsePeriod+0x4c>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	08005915 	.word	0x08005915
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	0800591f 	.word	0x0800591f
 8005904:	0800593d 	.word	0x0800593d
 8005908:	08005929 	.word	0x08005929
 800590c:	0800593d 	.word	0x0800593d
 8005910:	08005933 	.word	0x08005933
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8005914:	2118      	movs	r1, #24
 8005916:	2057      	movs	r0, #87	; 0x57
 8005918:	f7ff fb36 	bl	8004f88 <writeReg>
        break;
 800591c:	e010      	b.n	8005940 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 800591e:	2130      	movs	r1, #48	; 0x30
 8005920:	2057      	movs	r0, #87	; 0x57
 8005922:	f7ff fb31 	bl	8004f88 <writeReg>
        break;
 8005926:	e00b      	b.n	8005940 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8005928:	2140      	movs	r1, #64	; 0x40
 800592a:	2057      	movs	r0, #87	; 0x57
 800592c:	f7ff fb2c 	bl	8004f88 <writeReg>
        break;
 8005930:	e006      	b.n	8005940 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8005932:	2150      	movs	r1, #80	; 0x50
 8005934:	2057      	movs	r0, #87	; 0x57
 8005936:	f7ff fb27 	bl	8004f88 <writeReg>
        break;
 800593a:	e001      	b.n	8005940 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return false;
 800593c:	2300      	movs	r3, #0
 800593e:	e0fc      	b.n	8005b3a <setVcselPulsePeriod+0x28e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8005940:	2108      	movs	r1, #8
 8005942:	2056      	movs	r0, #86	; 0x56
 8005944:	f7ff fb20 	bl	8004f88 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8005948:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800594c:	4619      	mov	r1, r3
 800594e:	2050      	movs	r0, #80	; 0x50
 8005950:	f7ff fb1a 	bl	8004f88 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	79ba      	ldrb	r2, [r7, #6]
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fb7a 	bl	8006054 <timeoutMicrosecondsToMclks>
 8005960:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8005962:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8005964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fb21 	bl	8005fae <encodeTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	4619      	mov	r1, r3
 8005970:	2051      	movs	r0, #81	; 0x51
 8005972:	f7ff fb33 	bl	8004fdc <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	79ba      	ldrb	r2, [r7, #6]
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb69 	bl	8006054 <timeoutMicrosecondsToMclks>
 8005982:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8005984:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8005986:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598c:	d804      	bhi.n	8005998 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 800598e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005990:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8005992:	3b01      	subs	r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e000      	b.n	800599a <setVcselPulsePeriod+0xee>
 8005998:	23ff      	movs	r3, #255	; 0xff
 800599a:	4619      	mov	r1, r3
 800599c:	2046      	movs	r0, #70	; 0x46
 800599e:	f7ff faf3 	bl	8004f88 <writeReg>
 80059a2:	e0b1      	b.n	8005b08 <setVcselPulsePeriod+0x25c>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	f040 80ac 	bne.w	8005b04 <setVcselPulsePeriod+0x258>
  {
    switch (period_pclks)
 80059ac:	79bb      	ldrb	r3, [r7, #6]
 80059ae:	3b08      	subs	r3, #8
 80059b0:	2b06      	cmp	r3, #6
 80059b2:	f200 8085 	bhi.w	8005ac0 <setVcselPulsePeriod+0x214>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <setVcselPulsePeriod+0x110>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	08005ac1 	.word	0x08005ac1
 80059c4:	08005a13 	.word	0x08005a13
 80059c8:	08005ac1 	.word	0x08005ac1
 80059cc:	08005a4d 	.word	0x08005a4d
 80059d0:	08005ac1 	.word	0x08005ac1
 80059d4:	08005a87 	.word	0x08005a87
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 80059d8:	2110      	movs	r1, #16
 80059da:	2048      	movs	r0, #72	; 0x48
 80059dc:	f7ff fad4 	bl	8004f88 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80059e0:	2108      	movs	r1, #8
 80059e2:	2047      	movs	r0, #71	; 0x47
 80059e4:	f7ff fad0 	bl	8004f88 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 80059e8:	2102      	movs	r1, #2
 80059ea:	2032      	movs	r0, #50	; 0x32
 80059ec:	f7ff facc 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 80059f0:	210c      	movs	r1, #12
 80059f2:	2030      	movs	r0, #48	; 0x30
 80059f4:	f7ff fac8 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x01);
 80059f8:	2101      	movs	r1, #1
 80059fa:	20ff      	movs	r0, #255	; 0xff
 80059fc:	f7ff fac4 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8005a00:	2130      	movs	r1, #48	; 0x30
 8005a02:	2030      	movs	r0, #48	; 0x30
 8005a04:	f7ff fac0 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x00);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	20ff      	movs	r0, #255	; 0xff
 8005a0c:	f7ff fabc 	bl	8004f88 <writeReg>
        break;
 8005a10:	e058      	b.n	8005ac4 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8005a12:	2128      	movs	r1, #40	; 0x28
 8005a14:	2048      	movs	r0, #72	; 0x48
 8005a16:	f7ff fab7 	bl	8004f88 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8005a1a:	2108      	movs	r1, #8
 8005a1c:	2047      	movs	r0, #71	; 0x47
 8005a1e:	f7ff fab3 	bl	8004f88 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8005a22:	2103      	movs	r1, #3
 8005a24:	2032      	movs	r0, #50	; 0x32
 8005a26:	f7ff faaf 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8005a2a:	2109      	movs	r1, #9
 8005a2c:	2030      	movs	r0, #48	; 0x30
 8005a2e:	f7ff faab 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x01);
 8005a32:	2101      	movs	r1, #1
 8005a34:	20ff      	movs	r0, #255	; 0xff
 8005a36:	f7ff faa7 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8005a3a:	2120      	movs	r1, #32
 8005a3c:	2030      	movs	r0, #48	; 0x30
 8005a3e:	f7ff faa3 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x00);
 8005a42:	2100      	movs	r1, #0
 8005a44:	20ff      	movs	r0, #255	; 0xff
 8005a46:	f7ff fa9f 	bl	8004f88 <writeReg>
        break;
 8005a4a:	e03b      	b.n	8005ac4 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8005a4c:	2138      	movs	r1, #56	; 0x38
 8005a4e:	2048      	movs	r0, #72	; 0x48
 8005a50:	f7ff fa9a 	bl	8004f88 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8005a54:	2108      	movs	r1, #8
 8005a56:	2047      	movs	r0, #71	; 0x47
 8005a58:	f7ff fa96 	bl	8004f88 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8005a5c:	2103      	movs	r1, #3
 8005a5e:	2032      	movs	r0, #50	; 0x32
 8005a60:	f7ff fa92 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8005a64:	2108      	movs	r1, #8
 8005a66:	2030      	movs	r0, #48	; 0x30
 8005a68:	f7ff fa8e 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x01);
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	20ff      	movs	r0, #255	; 0xff
 8005a70:	f7ff fa8a 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8005a74:	2120      	movs	r1, #32
 8005a76:	2030      	movs	r0, #48	; 0x30
 8005a78:	f7ff fa86 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x00);
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	20ff      	movs	r0, #255	; 0xff
 8005a80:	f7ff fa82 	bl	8004f88 <writeReg>
        break;
 8005a84:	e01e      	b.n	8005ac4 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8005a86:	2148      	movs	r1, #72	; 0x48
 8005a88:	2048      	movs	r0, #72	; 0x48
 8005a8a:	f7ff fa7d 	bl	8004f88 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8005a8e:	2108      	movs	r1, #8
 8005a90:	2047      	movs	r0, #71	; 0x47
 8005a92:	f7ff fa79 	bl	8004f88 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8005a96:	2103      	movs	r1, #3
 8005a98:	2032      	movs	r0, #50	; 0x32
 8005a9a:	f7ff fa75 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8005a9e:	2107      	movs	r1, #7
 8005aa0:	2030      	movs	r0, #48	; 0x30
 8005aa2:	f7ff fa71 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x01);
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	20ff      	movs	r0, #255	; 0xff
 8005aaa:	f7ff fa6d 	bl	8004f88 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8005aae:	2120      	movs	r1, #32
 8005ab0:	2030      	movs	r0, #48	; 0x30
 8005ab2:	f7ff fa69 	bl	8004f88 <writeReg>
        writeReg(0xFF, 0x00);
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	20ff      	movs	r0, #255	; 0xff
 8005aba:	f7ff fa65 	bl	8004f88 <writeReg>
        break;
 8005abe:	e001      	b.n	8005ac4 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return false;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e03a      	b.n	8005b3a <setVcselPulsePeriod+0x28e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8005ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2070      	movs	r0, #112	; 0x70
 8005acc:	f7ff fa5c 	bl	8004f88 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	79ba      	ldrb	r2, [r7, #6]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fabc 	bl	8006054 <timeoutMicrosecondsToMclks>
 8005adc:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8005ade:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8005ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <setVcselPulsePeriod+0x244>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8005ae8:	89fa      	ldrh	r2, [r7, #14]
 8005aea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005aec:	4413      	add	r3, r2
 8005aee:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8005af0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fa5b 	bl	8005fae <encodeTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4619      	mov	r1, r3
 8005afc:	2071      	movs	r0, #113	; 0x71
 8005afe:	f7ff fa6d 	bl	8004fdc <writeReg16Bit>
 8005b02:	e001      	b.n	8005b08 <setVcselPulsePeriod+0x25c>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e018      	b.n	8005b3a <setVcselPulsePeriod+0x28e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <setVcselPulsePeriod+0x298>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fdd3 	bl	80056b8 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7ff fa8c 	bl	8005030 <readReg>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005b1e:	2102      	movs	r1, #2
 8005b20:	2001      	movs	r0, #1
 8005b22:	f7ff fa31 	bl	8004f88 <writeReg>
  performSingleRefCalibration(0x0);
 8005b26:	2000      	movs	r0, #0
 8005b28:	f000 faba 	bl	80060a0 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8005b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b30:	4619      	mov	r1, r3
 8005b32:	2001      	movs	r0, #1
 8005b34:	f7ff fa28 	bl	8004f88 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8005b38:	2301      	movs	r3, #1
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3730      	adds	r7, #48	; 0x30
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000308 	.word	0x20000308

08005b48 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d108      	bne.n	8005b6a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8005b58:	2050      	movs	r0, #80	; 0x50
 8005b5a:	f7ff fa69 	bl	8005030 <readReg>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	3301      	adds	r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	e00c      	b.n	8005b84 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d108      	bne.n	8005b82 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8005b70:	2070      	movs	r0, #112	; 0x70
 8005b72:	f7ff fa5d 	bl	8005030 <readReg>
 8005b76:	4603      	mov	r3, r0
 8005b78:	3301      	adds	r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	e000      	b.n	8005b84 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8005b82:	23ff      	movs	r3, #255	; 0xff
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8005b94:	f7fb ff80 	bl	8001a98 <HAL_GetTick>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	4b33      	ldr	r3, [pc, #204]	; (8005c6c <readRangeContinuousMillimeters+0xe0>)
 8005b9e:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8005ba0:	e015      	b.n	8005bce <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 8005ba2:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <readRangeContinuousMillimeters+0xe4>)
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <readRangeContinuousMillimeters+0x42>
 8005baa:	f7fb ff75 	bl	8001a98 <HAL_GetTick>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	; (8005c6c <readRangeContinuousMillimeters+0xe0>)
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	4a2d      	ldr	r2, [pc, #180]	; (8005c70 <readRangeContinuousMillimeters+0xe4>)
 8005bbc:	8812      	ldrh	r2, [r2, #0]
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	dd05      	ble.n	8005bce <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 8005bc2:	4b2c      	ldr	r3, [pc, #176]	; (8005c74 <readRangeContinuousMillimeters+0xe8>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	701a      	strb	r2, [r3, #0]
      return 65535;
 8005bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bcc:	e04a      	b.n	8005c64 <readRangeContinuousMillimeters+0xd8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8005bce:	2013      	movs	r0, #19
 8005bd0:	f7ff fa2e 	bl	8005030 <readReg>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0e1      	beq.n	8005ba2 <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <readRangeContinuousMillimeters+0x64>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8005be4:	201e      	movs	r0, #30
 8005be6:	f7ff fa4f 	bl	8005088 <readReg16Bit>
 8005bea:	4603      	mov	r3, r0
 8005bec:	82fb      	strh	r3, [r7, #22]
 8005bee:	e034      	b.n	8005c5a <readRangeContinuousMillimeters+0xce>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	220c      	movs	r2, #12
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	2014      	movs	r0, #20
 8005bfa:	f7ff fa9f 	bl	800513c <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8005bfe:	7a3b      	ldrb	r3, [r7, #8]
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8005c08:	7abb      	ldrb	r3, [r7, #10]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	b21a      	sxth	r2, r3
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b21b      	sxth	r3, r3
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	b21a      	sxth	r2, r3
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	b21b      	sxth	r3, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b21b      	sxth	r3, r3
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];    
 8005c30:	7c3b      	ldrb	r3, [r7, #16]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	b21a      	sxth	r2, r3
 8005c36:	7c7b      	ldrb	r3, [r7, #17]
 8005c38:	b21b      	sxth	r3, r3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b21b      	sxth	r3, r3
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 8005c44:	7cbb      	ldrb	r3, [r7, #18]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	b21a      	sxth	r2, r3
 8005c4a:	7cfb      	ldrb	r3, [r7, #19]
 8005c4c:	b21b      	sxth	r3, r3
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b21b      	sxth	r3, r3
 8005c52:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8afa      	ldrh	r2, [r7, #22]
 8005c58:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	200b      	movs	r0, #11
 8005c5e:	f7ff f993 	bl	8004f88 <writeReg>
  return temp;
 8005c62:	8afb      	ldrh	r3, [r7, #22]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000304 	.word	0x20000304
 8005c70:	20000300 	.word	0x20000300
 8005c74:	20000302 	.word	0x20000302

08005c78 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8005c80:	2101      	movs	r1, #1
 8005c82:	2080      	movs	r0, #128	; 0x80
 8005c84:	f7ff f980 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x01);
 8005c88:	2101      	movs	r1, #1
 8005c8a:	20ff      	movs	r0, #255	; 0xff
 8005c8c:	f7ff f97c 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x00);
 8005c90:	2100      	movs	r1, #0
 8005c92:	2000      	movs	r0, #0
 8005c94:	f7ff f978 	bl	8004f88 <writeReg>
  writeReg(0x91, g_stopVariable);
 8005c98:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <readRangeSingleMillimeters+0xa8>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	2091      	movs	r0, #145	; 0x91
 8005ca0:	f7ff f972 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x01);
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f7ff f96e 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x00);
 8005cac:	2100      	movs	r1, #0
 8005cae:	20ff      	movs	r0, #255	; 0xff
 8005cb0:	f7ff f96a 	bl	8004f88 <writeReg>
  writeReg(0x80, 0x00);
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2080      	movs	r0, #128	; 0x80
 8005cb8:	f7ff f966 	bl	8004f88 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	f7ff f962 	bl	8004f88 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 8005cc4:	f7fb fee8 	bl	8001a98 <HAL_GetTick>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <readRangeSingleMillimeters+0xac>)
 8005cce:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 8005cd0:	e015      	b.n	8005cfe <readRangeSingleMillimeters+0x86>
    if (checkTimeoutExpired()){
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <readRangeSingleMillimeters+0xb0>)
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d011      	beq.n	8005cfe <readRangeSingleMillimeters+0x86>
 8005cda:	f7fb fedd 	bl	8001a98 <HAL_GetTick>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <readRangeSingleMillimeters+0xac>)
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <readRangeSingleMillimeters+0xb0>)
 8005cec:	8812      	ldrh	r2, [r2, #0]
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	dd05      	ble.n	8005cfe <readRangeSingleMillimeters+0x86>
      g_isTimeout = true;
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <readRangeSingleMillimeters+0xb4>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
      return 65535;
 8005cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cfc:	e00b      	b.n	8005d16 <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7ff f996 	bl	8005030 <readReg>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e1      	bne.n	8005cd2 <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff3c 	bl	8005b8c <readRangeContinuousMillimeters>
 8005d14:	4603      	mov	r3, r0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000306 	.word	0x20000306
 8005d24:	20000304 	.word	0x20000304
 8005d28:	20000300 	.word	0x20000300
 8005d2c:	20000302 	.word	0x20000302

08005d30 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	2080      	movs	r0, #128	; 0x80
 8005d3e:	f7ff f923 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x01);
 8005d42:	2101      	movs	r1, #1
 8005d44:	20ff      	movs	r0, #255	; 0xff
 8005d46:	f7ff f91f 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x00);
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f7ff f91b 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x06);
 8005d52:	2106      	movs	r1, #6
 8005d54:	20ff      	movs	r0, #255	; 0xff
 8005d56:	f7ff f917 	bl	8004f88 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8005d5a:	2083      	movs	r0, #131	; 0x83
 8005d5c:	f7ff f968 	bl	8005030 <readReg>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f043 0304 	orr.w	r3, r3, #4
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	4619      	mov	r1, r3
 8005d6a:	2083      	movs	r0, #131	; 0x83
 8005d6c:	f7ff f90c 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x07);
 8005d70:	2107      	movs	r1, #7
 8005d72:	20ff      	movs	r0, #255	; 0xff
 8005d74:	f7ff f908 	bl	8004f88 <writeReg>
  writeReg(0x81, 0x01);
 8005d78:	2101      	movs	r1, #1
 8005d7a:	2081      	movs	r0, #129	; 0x81
 8005d7c:	f7ff f904 	bl	8004f88 <writeReg>

  writeReg(0x80, 0x01);
 8005d80:	2101      	movs	r1, #1
 8005d82:	2080      	movs	r0, #128	; 0x80
 8005d84:	f7ff f900 	bl	8004f88 <writeReg>

  writeReg(0x94, 0x6b);
 8005d88:	216b      	movs	r1, #107	; 0x6b
 8005d8a:	2094      	movs	r0, #148	; 0x94
 8005d8c:	f7ff f8fc 	bl	8004f88 <writeReg>
  writeReg(0x83, 0x00);
 8005d90:	2100      	movs	r1, #0
 8005d92:	2083      	movs	r0, #131	; 0x83
 8005d94:	f7ff f8f8 	bl	8004f88 <writeReg>
  startTimeout();
 8005d98:	f7fb fe7e 	bl	8001a98 <HAL_GetTick>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <getSpadInfo+0x120>)
 8005da2:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8005da4:	e011      	b.n	8005dca <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 8005da6:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <getSpadInfo+0x124>)
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <getSpadInfo+0x9a>
 8005dae:	f7fb fe73 	bl	8001a98 <HAL_GetTick>
 8005db2:	4603      	mov	r3, r0
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <getSpadInfo+0x120>)
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	4a25      	ldr	r2, [pc, #148]	; (8005e54 <getSpadInfo+0x124>)
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	dd01      	ble.n	8005dca <getSpadInfo+0x9a>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e03d      	b.n	8005e46 <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8005dca:	2083      	movs	r0, #131	; 0x83
 8005dcc:	f7ff f930 	bl	8005030 <readReg>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0e7      	beq.n	8005da6 <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	2083      	movs	r0, #131	; 0x83
 8005dda:	f7ff f8d5 	bl	8004f88 <writeReg>
  tmp = readReg(0x92);
 8005dde:	2092      	movs	r0, #146	; 0x92
 8005de0:	f7ff f926 	bl	8005030 <readReg>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8005dfe:	2100      	movs	r1, #0
 8005e00:	2081      	movs	r0, #129	; 0x81
 8005e02:	f7ff f8c1 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x06);
 8005e06:	2106      	movs	r1, #6
 8005e08:	20ff      	movs	r0, #255	; 0xff
 8005e0a:	f7ff f8bd 	bl	8004f88 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8005e0e:	2083      	movs	r0, #131	; 0x83
 8005e10:	f7ff f90e 	bl	8005030 <readReg>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f023 0304 	bic.w	r3, r3, #4
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	2083      	movs	r0, #131	; 0x83
 8005e20:	f7ff f8b2 	bl	8004f88 <writeReg>
  writeReg(0xFF, 0x01);
 8005e24:	2101      	movs	r1, #1
 8005e26:	20ff      	movs	r0, #255	; 0xff
 8005e28:	f7ff f8ae 	bl	8004f88 <writeReg>
  writeReg(0x00, 0x01);
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f7ff f8aa 	bl	8004f88 <writeReg>

  writeReg(0xFF, 0x00);
 8005e34:	2100      	movs	r1, #0
 8005e36:	20ff      	movs	r0, #255	; 0xff
 8005e38:	f7ff f8a6 	bl	8004f88 <writeReg>
  writeReg(0x80, 0x00);
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	2080      	movs	r0, #128	; 0x80
 8005e40:	f7ff f8a2 	bl	8004f88 <writeReg>

  return true;
 8005e44:	2301      	movs	r3, #1
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000304 	.word	0x20000304
 8005e54:	20000300 	.word	0x20000300

08005e58 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8005e60:	2001      	movs	r0, #1
 8005e62:	f7ff f8e5 	bl	8005030 <readReg>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	089b      	lsrs	r3, r3, #2
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	099b      	lsrs	r3, r3, #6
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	09db      	lsrs	r3, r3, #7
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	711a      	strb	r2, [r3, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7ff fe3e 	bl	8005b48 <getVcselPulsePeriod>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8005ed4:	2046      	movs	r0, #70	; 0x46
 8005ed6:	f7ff f8ab 	bl	8005030 <readReg>
 8005eda:	4603      	mov	r3, r0
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f000 f886 	bl	8006004 <timeoutMclksToMicroseconds>
 8005ef8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8005efe:	2051      	movs	r0, #81	; 0x51
 8005f00:	f7ff f8c2 	bl	8005088 <readReg16Bit>
 8005f04:	4603      	mov	r3, r0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f83e 	bl	8005f88 <decodeTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 f86f 	bl	8006004 <timeoutMclksToMicroseconds>
 8005f26:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f7ff fe0b 	bl	8005b48 <getVcselPulsePeriod>
 8005f32:	4603      	mov	r3, r0
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8005f3a:	2071      	movs	r0, #113	; 0x71
 8005f3c:	f7ff f8a4 	bl	8005088 <readReg16Bit>
 8005f40:	4603      	mov	r3, r0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f820 	bl	8005f88 <decodeTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	78db      	ldrb	r3, [r3, #3]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <getSequenceStepTimeouts+0xac>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	891a      	ldrh	r2, [r3, #8]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	88db      	ldrh	r3, [r3, #6]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 f845 	bl	8006004 <timeoutMclksToMicroseconds>
 8005f7a:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	615a      	str	r2, [r3, #20]
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	0a12      	lsrs	r2, r2, #8
 8005f9a:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8005f9c:	4093      	lsls	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b29b      	uxth	r3, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8005fcc:	e005      	b.n	8005fda <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8005fd4:	897b      	ldrh	r3, [r7, #10]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f4      	bne.n	8005fce <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8005fe4:	897b      	ldrh	r3, [r7, #10]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	e000      	b.n	8005ffa <encodeTimeout+0x4c>
  }
  else { return 0; }
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr

08006004 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	460a      	mov	r2, r1
 800600e:	80fb      	strh	r3, [r7, #6]
 8006010:	4613      	mov	r3, r2
 8006012:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006014:	797b      	ldrb	r3, [r7, #5]
 8006016:	4a0d      	ldr	r2, [pc, #52]	; (800604c <timeoutMclksToMicroseconds+0x48>)
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006020:	4a0b      	ldr	r2, [pc, #44]	; (8006050 <timeoutMclksToMicroseconds+0x4c>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	fb03 f202 	mul.w	r2, r3, r2
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	4a05      	ldr	r2, [pc, #20]	; (8006050 <timeoutMclksToMicroseconds+0x4c>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	099b      	lsrs	r3, r3, #6
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	003a2f00 	.word	0x003a2f00
 8006050:	10624dd3 	.word	0x10624dd3

08006054 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <timeoutMicrosecondsToMclks+0x44>)
 8006064:	fb02 f303 	mul.w	r3, r2, r3
 8006068:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800606c:	4a0b      	ldr	r2, [pc, #44]	; (800609c <timeoutMicrosecondsToMclks+0x48>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	099b      	lsrs	r3, r3, #6
 8006074:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800607c:	fb03 f202 	mul.w	r2, r3, r2
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	441a      	add	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	003a2f00 	.word	0x003a2f00
 800609c:	10624dd3 	.word	0x10624dd3

080060a0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	2000      	movs	r0, #0
 80060b6:	f7fe ff67 	bl	8004f88 <writeReg>

  startTimeout();
 80060ba:	f7fb fced 	bl	8001a98 <HAL_GetTick>
 80060be:	4603      	mov	r3, r0
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <performSingleRefCalibration+0x78>)
 80060c4:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80060c6:	e011      	b.n	80060ec <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <performSingleRefCalibration+0x7c>)
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <performSingleRefCalibration+0x4c>
 80060d0:	f7fb fce2 	bl	8001a98 <HAL_GetTick>
 80060d4:	4603      	mov	r3, r0
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <performSingleRefCalibration+0x78>)
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	4a0e      	ldr	r2, [pc, #56]	; (800611c <performSingleRefCalibration+0x7c>)
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	dd01      	ble.n	80060ec <performSingleRefCalibration+0x4c>
 80060e8:	2300      	movs	r3, #0
 80060ea:	e010      	b.n	800610e <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80060ec:	2013      	movs	r0, #19
 80060ee:	f7fe ff9f 	bl	8005030 <readReg>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0e5      	beq.n	80060c8 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80060fc:	2101      	movs	r1, #1
 80060fe:	200b      	movs	r0, #11
 8006100:	f7fe ff42 	bl	8004f88 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8006104:	2100      	movs	r1, #0
 8006106:	2000      	movs	r0, #0
 8006108:	f7fe ff3e 	bl	8004f88 <writeReg>

  return true;
 800610c:	2301      	movs	r3, #1
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000304 	.word	0x20000304
 800611c:	20000300 	.word	0x20000300

08006120 <std>:
 8006120:	2300      	movs	r3, #0
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	e9c0 3300 	strd	r3, r3, [r0]
 800612a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612e:	6083      	str	r3, [r0, #8]
 8006130:	8181      	strh	r1, [r0, #12]
 8006132:	6643      	str	r3, [r0, #100]	; 0x64
 8006134:	81c2      	strh	r2, [r0, #14]
 8006136:	6183      	str	r3, [r0, #24]
 8006138:	4619      	mov	r1, r3
 800613a:	2208      	movs	r2, #8
 800613c:	305c      	adds	r0, #92	; 0x5c
 800613e:	f000 f9ed 	bl	800651c <memset>
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <std+0x38>)
 8006144:	6224      	str	r4, [r4, #32]
 8006146:	6263      	str	r3, [r4, #36]	; 0x24
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <std+0x3c>)
 800614a:	62a3      	str	r3, [r4, #40]	; 0x28
 800614c:	4b04      	ldr	r3, [pc, #16]	; (8006160 <std+0x40>)
 800614e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <std+0x44>)
 8006152:	6323      	str	r3, [r4, #48]	; 0x30
 8006154:	bd10      	pop	{r4, pc}
 8006156:	bf00      	nop
 8006158:	0800636d 	.word	0x0800636d
 800615c:	0800638f 	.word	0x0800638f
 8006160:	080063c7 	.word	0x080063c7
 8006164:	080063eb 	.word	0x080063eb

08006168 <stdio_exit_handler>:
 8006168:	4a02      	ldr	r2, [pc, #8]	; (8006174 <stdio_exit_handler+0xc>)
 800616a:	4903      	ldr	r1, [pc, #12]	; (8006178 <stdio_exit_handler+0x10>)
 800616c:	4803      	ldr	r0, [pc, #12]	; (800617c <stdio_exit_handler+0x14>)
 800616e:	f000 b869 	b.w	8006244 <_fwalk_sglue>
 8006172:	bf00      	nop
 8006174:	2000000c 	.word	0x2000000c
 8006178:	08006ec5 	.word	0x08006ec5
 800617c:	20000018 	.word	0x20000018

08006180 <cleanup_stdio>:
 8006180:	6841      	ldr	r1, [r0, #4]
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <cleanup_stdio+0x34>)
 8006184:	b510      	push	{r4, lr}
 8006186:	4299      	cmp	r1, r3
 8006188:	4604      	mov	r4, r0
 800618a:	d001      	beq.n	8006190 <cleanup_stdio+0x10>
 800618c:	f000 fe9a 	bl	8006ec4 <_fflush_r>
 8006190:	68a1      	ldr	r1, [r4, #8]
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <cleanup_stdio+0x38>)
 8006194:	4299      	cmp	r1, r3
 8006196:	d002      	beq.n	800619e <cleanup_stdio+0x1e>
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fe93 	bl	8006ec4 <_fflush_r>
 800619e:	68e1      	ldr	r1, [r4, #12]
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <cleanup_stdio+0x3c>)
 80061a2:	4299      	cmp	r1, r3
 80061a4:	d004      	beq.n	80061b0 <cleanup_stdio+0x30>
 80061a6:	4620      	mov	r0, r4
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	f000 be8a 	b.w	8006ec4 <_fflush_r>
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	bf00      	nop
 80061b4:	20000368 	.word	0x20000368
 80061b8:	200003d0 	.word	0x200003d0
 80061bc:	20000438 	.word	0x20000438

080061c0 <global_stdio_init.part.0>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <global_stdio_init.part.0+0x30>)
 80061c4:	4c0b      	ldr	r4, [pc, #44]	; (80061f4 <global_stdio_init.part.0+0x34>)
 80061c6:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <global_stdio_init.part.0+0x38>)
 80061c8:	4620      	mov	r0, r4
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	2104      	movs	r1, #4
 80061ce:	2200      	movs	r2, #0
 80061d0:	f7ff ffa6 	bl	8006120 <std>
 80061d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061d8:	2201      	movs	r2, #1
 80061da:	2109      	movs	r1, #9
 80061dc:	f7ff ffa0 	bl	8006120 <std>
 80061e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80061e4:	2202      	movs	r2, #2
 80061e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ea:	2112      	movs	r1, #18
 80061ec:	f7ff bf98 	b.w	8006120 <std>
 80061f0:	200004a0 	.word	0x200004a0
 80061f4:	20000368 	.word	0x20000368
 80061f8:	08006169 	.word	0x08006169

080061fc <__sfp_lock_acquire>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__sfp_lock_acquire+0x8>)
 80061fe:	f000 ba05 	b.w	800660c <__retarget_lock_acquire_recursive>
 8006202:	bf00      	nop
 8006204:	200004a9 	.word	0x200004a9

08006208 <__sfp_lock_release>:
 8006208:	4801      	ldr	r0, [pc, #4]	; (8006210 <__sfp_lock_release+0x8>)
 800620a:	f000 ba00 	b.w	800660e <__retarget_lock_release_recursive>
 800620e:	bf00      	nop
 8006210:	200004a9 	.word	0x200004a9

08006214 <__sinit>:
 8006214:	b510      	push	{r4, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	f7ff fff0 	bl	80061fc <__sfp_lock_acquire>
 800621c:	6a23      	ldr	r3, [r4, #32]
 800621e:	b11b      	cbz	r3, 8006228 <__sinit+0x14>
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006224:	f7ff bff0 	b.w	8006208 <__sfp_lock_release>
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <__sinit+0x28>)
 800622a:	6223      	str	r3, [r4, #32]
 800622c:	4b04      	ldr	r3, [pc, #16]	; (8006240 <__sinit+0x2c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f5      	bne.n	8006220 <__sinit+0xc>
 8006234:	f7ff ffc4 	bl	80061c0 <global_stdio_init.part.0>
 8006238:	e7f2      	b.n	8006220 <__sinit+0xc>
 800623a:	bf00      	nop
 800623c:	08006181 	.word	0x08006181
 8006240:	200004a0 	.word	0x200004a0

08006244 <_fwalk_sglue>:
 8006244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006248:	4607      	mov	r7, r0
 800624a:	4688      	mov	r8, r1
 800624c:	4614      	mov	r4, r2
 800624e:	2600      	movs	r6, #0
 8006250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006254:	f1b9 0901 	subs.w	r9, r9, #1
 8006258:	d505      	bpl.n	8006266 <_fwalk_sglue+0x22>
 800625a:	6824      	ldr	r4, [r4, #0]
 800625c:	2c00      	cmp	r4, #0
 800625e:	d1f7      	bne.n	8006250 <_fwalk_sglue+0xc>
 8006260:	4630      	mov	r0, r6
 8006262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006266:	89ab      	ldrh	r3, [r5, #12]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d907      	bls.n	800627c <_fwalk_sglue+0x38>
 800626c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006270:	3301      	adds	r3, #1
 8006272:	d003      	beq.n	800627c <_fwalk_sglue+0x38>
 8006274:	4629      	mov	r1, r5
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	4306      	orrs	r6, r0
 800627c:	3568      	adds	r5, #104	; 0x68
 800627e:	e7e9      	b.n	8006254 <_fwalk_sglue+0x10>

08006280 <iprintf>:
 8006280:	b40f      	push	{r0, r1, r2, r3}
 8006282:	b507      	push	{r0, r1, r2, lr}
 8006284:	4906      	ldr	r1, [pc, #24]	; (80062a0 <iprintf+0x20>)
 8006286:	ab04      	add	r3, sp, #16
 8006288:	6808      	ldr	r0, [r1, #0]
 800628a:	f853 2b04 	ldr.w	r2, [r3], #4
 800628e:	6881      	ldr	r1, [r0, #8]
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	f000 fae7 	bl	8006864 <_vfiprintf_r>
 8006296:	b003      	add	sp, #12
 8006298:	f85d eb04 	ldr.w	lr, [sp], #4
 800629c:	b004      	add	sp, #16
 800629e:	4770      	bx	lr
 80062a0:	20000064 	.word	0x20000064

080062a4 <putchar>:
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <putchar+0xc>)
 80062a6:	4601      	mov	r1, r0
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	6882      	ldr	r2, [r0, #8]
 80062ac:	f000 be93 	b.w	8006fd6 <_putc_r>
 80062b0:	20000064 	.word	0x20000064

080062b4 <_puts_r>:
 80062b4:	6a03      	ldr	r3, [r0, #32]
 80062b6:	b570      	push	{r4, r5, r6, lr}
 80062b8:	4605      	mov	r5, r0
 80062ba:	460e      	mov	r6, r1
 80062bc:	6884      	ldr	r4, [r0, #8]
 80062be:	b90b      	cbnz	r3, 80062c4 <_puts_r+0x10>
 80062c0:	f7ff ffa8 	bl	8006214 <__sinit>
 80062c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062c6:	07db      	lsls	r3, r3, #31
 80062c8:	d405      	bmi.n	80062d6 <_puts_r+0x22>
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	0598      	lsls	r0, r3, #22
 80062ce:	d402      	bmi.n	80062d6 <_puts_r+0x22>
 80062d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d2:	f000 f99b 	bl	800660c <__retarget_lock_acquire_recursive>
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	0719      	lsls	r1, r3, #28
 80062da:	d513      	bpl.n	8006304 <_puts_r+0x50>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	b18b      	cbz	r3, 8006304 <_puts_r+0x50>
 80062e0:	3e01      	subs	r6, #1
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60a3      	str	r3, [r4, #8]
 80062ec:	b9e9      	cbnz	r1, 800632a <_puts_r+0x76>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da2e      	bge.n	8006350 <_puts_r+0x9c>
 80062f2:	4622      	mov	r2, r4
 80062f4:	210a      	movs	r1, #10
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f87b 	bl	80063f2 <__swbuf_r>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d007      	beq.n	8006310 <_puts_r+0x5c>
 8006300:	250a      	movs	r5, #10
 8006302:	e007      	b.n	8006314 <_puts_r+0x60>
 8006304:	4621      	mov	r1, r4
 8006306:	4628      	mov	r0, r5
 8006308:	f000 f8b0 	bl	800646c <__swsetup_r>
 800630c:	2800      	cmp	r0, #0
 800630e:	d0e7      	beq.n	80062e0 <_puts_r+0x2c>
 8006310:	f04f 35ff 	mov.w	r5, #4294967295
 8006314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006316:	07da      	lsls	r2, r3, #31
 8006318:	d405      	bmi.n	8006326 <_puts_r+0x72>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	059b      	lsls	r3, r3, #22
 800631e:	d402      	bmi.n	8006326 <_puts_r+0x72>
 8006320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006322:	f000 f974 	bl	800660e <__retarget_lock_release_recursive>
 8006326:	4628      	mov	r0, r5
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	2b00      	cmp	r3, #0
 800632c:	da04      	bge.n	8006338 <_puts_r+0x84>
 800632e:	69a2      	ldr	r2, [r4, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	dc06      	bgt.n	8006342 <_puts_r+0x8e>
 8006334:	290a      	cmp	r1, #10
 8006336:	d004      	beq.n	8006342 <_puts_r+0x8e>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	7019      	strb	r1, [r3, #0]
 8006340:	e7cf      	b.n	80062e2 <_puts_r+0x2e>
 8006342:	4622      	mov	r2, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f854 	bl	80063f2 <__swbuf_r>
 800634a:	3001      	adds	r0, #1
 800634c:	d1c9      	bne.n	80062e2 <_puts_r+0x2e>
 800634e:	e7df      	b.n	8006310 <_puts_r+0x5c>
 8006350:	250a      	movs	r5, #10
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	6022      	str	r2, [r4, #0]
 8006358:	701d      	strb	r5, [r3, #0]
 800635a:	e7db      	b.n	8006314 <_puts_r+0x60>

0800635c <puts>:
 800635c:	4b02      	ldr	r3, [pc, #8]	; (8006368 <puts+0xc>)
 800635e:	4601      	mov	r1, r0
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	f7ff bfa7 	b.w	80062b4 <_puts_r>
 8006366:	bf00      	nop
 8006368:	20000064 	.word	0x20000064

0800636c <__sread>:
 800636c:	b510      	push	{r4, lr}
 800636e:	460c      	mov	r4, r1
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	f000 f8fc 	bl	8006570 <_read_r>
 8006378:	2800      	cmp	r0, #0
 800637a:	bfab      	itete	ge
 800637c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800637e:	89a3      	ldrhlt	r3, [r4, #12]
 8006380:	181b      	addge	r3, r3, r0
 8006382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006386:	bfac      	ite	ge
 8006388:	6563      	strge	r3, [r4, #84]	; 0x54
 800638a:	81a3      	strhlt	r3, [r4, #12]
 800638c:	bd10      	pop	{r4, pc}

0800638e <__swrite>:
 800638e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006392:	461f      	mov	r7, r3
 8006394:	898b      	ldrh	r3, [r1, #12]
 8006396:	4605      	mov	r5, r0
 8006398:	05db      	lsls	r3, r3, #23
 800639a:	460c      	mov	r4, r1
 800639c:	4616      	mov	r6, r2
 800639e:	d505      	bpl.n	80063ac <__swrite+0x1e>
 80063a0:	2302      	movs	r3, #2
 80063a2:	2200      	movs	r2, #0
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	f000 f8d0 	bl	800654c <_lseek_r>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	4632      	mov	r2, r6
 80063b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	4628      	mov	r0, r5
 80063b8:	463b      	mov	r3, r7
 80063ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	f000 b8e7 	b.w	8006594 <_write_r>

080063c6 <__sseek>:
 80063c6:	b510      	push	{r4, lr}
 80063c8:	460c      	mov	r4, r1
 80063ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ce:	f000 f8bd 	bl	800654c <_lseek_r>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	bf15      	itete	ne
 80063d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063e2:	81a3      	strheq	r3, [r4, #12]
 80063e4:	bf18      	it	ne
 80063e6:	81a3      	strhne	r3, [r4, #12]
 80063e8:	bd10      	pop	{r4, pc}

080063ea <__sclose>:
 80063ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ee:	f000 b89d 	b.w	800652c <_close_r>

080063f2 <__swbuf_r>:
 80063f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f4:	460e      	mov	r6, r1
 80063f6:	4614      	mov	r4, r2
 80063f8:	4605      	mov	r5, r0
 80063fa:	b118      	cbz	r0, 8006404 <__swbuf_r+0x12>
 80063fc:	6a03      	ldr	r3, [r0, #32]
 80063fe:	b90b      	cbnz	r3, 8006404 <__swbuf_r+0x12>
 8006400:	f7ff ff08 	bl	8006214 <__sinit>
 8006404:	69a3      	ldr	r3, [r4, #24]
 8006406:	60a3      	str	r3, [r4, #8]
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	071a      	lsls	r2, r3, #28
 800640c:	d525      	bpl.n	800645a <__swbuf_r+0x68>
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	b31b      	cbz	r3, 800645a <__swbuf_r+0x68>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	b2f6      	uxtb	r6, r6
 8006418:	1a98      	subs	r0, r3, r2
 800641a:	6963      	ldr	r3, [r4, #20]
 800641c:	4637      	mov	r7, r6
 800641e:	4283      	cmp	r3, r0
 8006420:	dc04      	bgt.n	800642c <__swbuf_r+0x3a>
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f000 fd4d 	bl	8006ec4 <_fflush_r>
 800642a:	b9e0      	cbnz	r0, 8006466 <__swbuf_r+0x74>
 800642c:	68a3      	ldr	r3, [r4, #8]
 800642e:	3b01      	subs	r3, #1
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	6022      	str	r2, [r4, #0]
 8006438:	701e      	strb	r6, [r3, #0]
 800643a:	6962      	ldr	r2, [r4, #20]
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	429a      	cmp	r2, r3
 8006440:	d004      	beq.n	800644c <__swbuf_r+0x5a>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	07db      	lsls	r3, r3, #31
 8006446:	d506      	bpl.n	8006456 <__swbuf_r+0x64>
 8006448:	2e0a      	cmp	r6, #10
 800644a:	d104      	bne.n	8006456 <__swbuf_r+0x64>
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f000 fd38 	bl	8006ec4 <_fflush_r>
 8006454:	b938      	cbnz	r0, 8006466 <__swbuf_r+0x74>
 8006456:	4638      	mov	r0, r7
 8006458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645a:	4621      	mov	r1, r4
 800645c:	4628      	mov	r0, r5
 800645e:	f000 f805 	bl	800646c <__swsetup_r>
 8006462:	2800      	cmp	r0, #0
 8006464:	d0d5      	beq.n	8006412 <__swbuf_r+0x20>
 8006466:	f04f 37ff 	mov.w	r7, #4294967295
 800646a:	e7f4      	b.n	8006456 <__swbuf_r+0x64>

0800646c <__swsetup_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4b2a      	ldr	r3, [pc, #168]	; (8006518 <__swsetup_r+0xac>)
 8006470:	4605      	mov	r5, r0
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	460c      	mov	r4, r1
 8006476:	b118      	cbz	r0, 8006480 <__swsetup_r+0x14>
 8006478:	6a03      	ldr	r3, [r0, #32]
 800647a:	b90b      	cbnz	r3, 8006480 <__swsetup_r+0x14>
 800647c:	f7ff feca 	bl	8006214 <__sinit>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006486:	0718      	lsls	r0, r3, #28
 8006488:	d422      	bmi.n	80064d0 <__swsetup_r+0x64>
 800648a:	06d9      	lsls	r1, r3, #27
 800648c:	d407      	bmi.n	800649e <__swsetup_r+0x32>
 800648e:	2309      	movs	r3, #9
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006496:	f04f 30ff 	mov.w	r0, #4294967295
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	e034      	b.n	8006508 <__swsetup_r+0x9c>
 800649e:	0758      	lsls	r0, r3, #29
 80064a0:	d512      	bpl.n	80064c8 <__swsetup_r+0x5c>
 80064a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064a4:	b141      	cbz	r1, 80064b8 <__swsetup_r+0x4c>
 80064a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064aa:	4299      	cmp	r1, r3
 80064ac:	d002      	beq.n	80064b4 <__swsetup_r+0x48>
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f8bc 	bl	800662c <_free_r>
 80064b4:	2300      	movs	r3, #0
 80064b6:	6363      	str	r3, [r4, #52]	; 0x34
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064be:	81a3      	strh	r3, [r4, #12]
 80064c0:	2300      	movs	r3, #0
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f043 0308 	orr.w	r3, r3, #8
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	b94b      	cbnz	r3, 80064e8 <__swsetup_r+0x7c>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064de:	d003      	beq.n	80064e8 <__swsetup_r+0x7c>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 fd3b 	bl	8006f5e <__smakebuf_r>
 80064e8:	89a0      	ldrh	r0, [r4, #12]
 80064ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064ee:	f010 0301 	ands.w	r3, r0, #1
 80064f2:	d00a      	beq.n	800650a <__swsetup_r+0x9e>
 80064f4:	2300      	movs	r3, #0
 80064f6:	60a3      	str	r3, [r4, #8]
 80064f8:	6963      	ldr	r3, [r4, #20]
 80064fa:	425b      	negs	r3, r3
 80064fc:	61a3      	str	r3, [r4, #24]
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	b943      	cbnz	r3, 8006514 <__swsetup_r+0xa8>
 8006502:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006506:	d1c4      	bne.n	8006492 <__swsetup_r+0x26>
 8006508:	bd38      	pop	{r3, r4, r5, pc}
 800650a:	0781      	lsls	r1, r0, #30
 800650c:	bf58      	it	pl
 800650e:	6963      	ldrpl	r3, [r4, #20]
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	e7f4      	b.n	80064fe <__swsetup_r+0x92>
 8006514:	2000      	movs	r0, #0
 8006516:	e7f7      	b.n	8006508 <__swsetup_r+0x9c>
 8006518:	20000064 	.word	0x20000064

0800651c <memset>:
 800651c:	4603      	mov	r3, r0
 800651e:	4402      	add	r2, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <_close_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	2300      	movs	r3, #0
 8006530:	4d05      	ldr	r5, [pc, #20]	; (8006548 <_close_r+0x1c>)
 8006532:	4604      	mov	r4, r0
 8006534:	4608      	mov	r0, r1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	f7fb f9c3 	bl	80018c2 <_close>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_close_r+0x1a>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_close_r+0x1a>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200004a4 	.word	0x200004a4

0800654c <_lseek_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	2200      	movs	r2, #0
 8006556:	4d05      	ldr	r5, [pc, #20]	; (800656c <_lseek_r+0x20>)
 8006558:	602a      	str	r2, [r5, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	f7fb f9d5 	bl	800190a <_lseek>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_lseek_r+0x1e>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_lseek_r+0x1e>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200004a4 	.word	0x200004a4

08006570 <_read_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	2200      	movs	r2, #0
 800657a:	4d05      	ldr	r5, [pc, #20]	; (8006590 <_read_r+0x20>)
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fb f982 	bl	8001888 <_read>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_read_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_read_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200004a4 	.word	0x200004a4

08006594 <_write_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	2200      	movs	r2, #0
 800659e:	4d05      	ldr	r5, [pc, #20]	; (80065b4 <_write_r+0x20>)
 80065a0:	602a      	str	r2, [r5, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f7fa fa24 	bl	80009f0 <_write>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_write_r+0x1e>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_write_r+0x1e>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	200004a4 	.word	0x200004a4

080065b8 <__errno>:
 80065b8:	4b01      	ldr	r3, [pc, #4]	; (80065c0 <__errno+0x8>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	20000064 	.word	0x20000064

080065c4 <__libc_init_array>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	2600      	movs	r6, #0
 80065c8:	4d0c      	ldr	r5, [pc, #48]	; (80065fc <__libc_init_array+0x38>)
 80065ca:	4c0d      	ldr	r4, [pc, #52]	; (8006600 <__libc_init_array+0x3c>)
 80065cc:	1b64      	subs	r4, r4, r5
 80065ce:	10a4      	asrs	r4, r4, #2
 80065d0:	42a6      	cmp	r6, r4
 80065d2:	d109      	bne.n	80065e8 <__libc_init_array+0x24>
 80065d4:	f000 fd74 	bl	80070c0 <_init>
 80065d8:	2600      	movs	r6, #0
 80065da:	4d0a      	ldr	r5, [pc, #40]	; (8006604 <__libc_init_array+0x40>)
 80065dc:	4c0a      	ldr	r4, [pc, #40]	; (8006608 <__libc_init_array+0x44>)
 80065de:	1b64      	subs	r4, r4, r5
 80065e0:	10a4      	asrs	r4, r4, #2
 80065e2:	42a6      	cmp	r6, r4
 80065e4:	d105      	bne.n	80065f2 <__libc_init_array+0x2e>
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ec:	4798      	blx	r3
 80065ee:	3601      	adds	r6, #1
 80065f0:	e7ee      	b.n	80065d0 <__libc_init_array+0xc>
 80065f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f6:	4798      	blx	r3
 80065f8:	3601      	adds	r6, #1
 80065fa:	e7f2      	b.n	80065e2 <__libc_init_array+0x1e>
 80065fc:	080073ec 	.word	0x080073ec
 8006600:	080073ec 	.word	0x080073ec
 8006604:	080073ec 	.word	0x080073ec
 8006608:	080073f0 	.word	0x080073f0

0800660c <__retarget_lock_acquire_recursive>:
 800660c:	4770      	bx	lr

0800660e <__retarget_lock_release_recursive>:
 800660e:	4770      	bx	lr

08006610 <memcpy>:
 8006610:	440a      	add	r2, r1
 8006612:	4291      	cmp	r1, r2
 8006614:	f100 33ff 	add.w	r3, r0, #4294967295
 8006618:	d100      	bne.n	800661c <memcpy+0xc>
 800661a:	4770      	bx	lr
 800661c:	b510      	push	{r4, lr}
 800661e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006622:	4291      	cmp	r1, r2
 8006624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006628:	d1f9      	bne.n	800661e <memcpy+0xe>
 800662a:	bd10      	pop	{r4, pc}

0800662c <_free_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4605      	mov	r5, r0
 8006630:	2900      	cmp	r1, #0
 8006632:	d040      	beq.n	80066b6 <_free_r+0x8a>
 8006634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006638:	1f0c      	subs	r4, r1, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfb8      	it	lt
 800663e:	18e4      	addlt	r4, r4, r3
 8006640:	f000 f8dc 	bl	80067fc <__malloc_lock>
 8006644:	4a1c      	ldr	r2, [pc, #112]	; (80066b8 <_free_r+0x8c>)
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	b933      	cbnz	r3, 8006658 <_free_r+0x2c>
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6014      	str	r4, [r2, #0]
 800664e:	4628      	mov	r0, r5
 8006650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006654:	f000 b8d8 	b.w	8006808 <__malloc_unlock>
 8006658:	42a3      	cmp	r3, r4
 800665a:	d908      	bls.n	800666e <_free_r+0x42>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	1821      	adds	r1, r4, r0
 8006660:	428b      	cmp	r3, r1
 8006662:	bf01      	itttt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	1809      	addeq	r1, r1, r0
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	e7ed      	b.n	800664a <_free_r+0x1e>
 800666e:	461a      	mov	r2, r3
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b10b      	cbz	r3, 8006678 <_free_r+0x4c>
 8006674:	42a3      	cmp	r3, r4
 8006676:	d9fa      	bls.n	800666e <_free_r+0x42>
 8006678:	6811      	ldr	r1, [r2, #0]
 800667a:	1850      	adds	r0, r2, r1
 800667c:	42a0      	cmp	r0, r4
 800667e:	d10b      	bne.n	8006698 <_free_r+0x6c>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	4401      	add	r1, r0
 8006684:	1850      	adds	r0, r2, r1
 8006686:	4283      	cmp	r3, r0
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	d1e0      	bne.n	800664e <_free_r+0x22>
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4408      	add	r0, r1
 8006692:	6010      	str	r0, [r2, #0]
 8006694:	6053      	str	r3, [r2, #4]
 8006696:	e7da      	b.n	800664e <_free_r+0x22>
 8006698:	d902      	bls.n	80066a0 <_free_r+0x74>
 800669a:	230c      	movs	r3, #12
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	e7d6      	b.n	800664e <_free_r+0x22>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	1821      	adds	r1, r4, r0
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf01      	itttt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	1809      	addeq	r1, r1, r0
 80066ae:	6021      	streq	r1, [r4, #0]
 80066b0:	6063      	str	r3, [r4, #4]
 80066b2:	6054      	str	r4, [r2, #4]
 80066b4:	e7cb      	b.n	800664e <_free_r+0x22>
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	200004ac 	.word	0x200004ac

080066bc <sbrk_aligned>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	4e0e      	ldr	r6, [pc, #56]	; (80066f8 <sbrk_aligned+0x3c>)
 80066c0:	460c      	mov	r4, r1
 80066c2:	6831      	ldr	r1, [r6, #0]
 80066c4:	4605      	mov	r5, r0
 80066c6:	b911      	cbnz	r1, 80066ce <sbrk_aligned+0x12>
 80066c8:	f000 fcdc 	bl	8007084 <_sbrk_r>
 80066cc:	6030      	str	r0, [r6, #0]
 80066ce:	4621      	mov	r1, r4
 80066d0:	4628      	mov	r0, r5
 80066d2:	f000 fcd7 	bl	8007084 <_sbrk_r>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d00a      	beq.n	80066f0 <sbrk_aligned+0x34>
 80066da:	1cc4      	adds	r4, r0, #3
 80066dc:	f024 0403 	bic.w	r4, r4, #3
 80066e0:	42a0      	cmp	r0, r4
 80066e2:	d007      	beq.n	80066f4 <sbrk_aligned+0x38>
 80066e4:	1a21      	subs	r1, r4, r0
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 fccc 	bl	8007084 <_sbrk_r>
 80066ec:	3001      	adds	r0, #1
 80066ee:	d101      	bne.n	80066f4 <sbrk_aligned+0x38>
 80066f0:	f04f 34ff 	mov.w	r4, #4294967295
 80066f4:	4620      	mov	r0, r4
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	200004b0 	.word	0x200004b0

080066fc <_malloc_r>:
 80066fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006700:	1ccd      	adds	r5, r1, #3
 8006702:	f025 0503 	bic.w	r5, r5, #3
 8006706:	3508      	adds	r5, #8
 8006708:	2d0c      	cmp	r5, #12
 800670a:	bf38      	it	cc
 800670c:	250c      	movcc	r5, #12
 800670e:	2d00      	cmp	r5, #0
 8006710:	4607      	mov	r7, r0
 8006712:	db01      	blt.n	8006718 <_malloc_r+0x1c>
 8006714:	42a9      	cmp	r1, r5
 8006716:	d905      	bls.n	8006724 <_malloc_r+0x28>
 8006718:	230c      	movs	r3, #12
 800671a:	2600      	movs	r6, #0
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4630      	mov	r0, r6
 8006720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006724:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067f8 <_malloc_r+0xfc>
 8006728:	f000 f868 	bl	80067fc <__malloc_lock>
 800672c:	f8d8 3000 	ldr.w	r3, [r8]
 8006730:	461c      	mov	r4, r3
 8006732:	bb5c      	cbnz	r4, 800678c <_malloc_r+0x90>
 8006734:	4629      	mov	r1, r5
 8006736:	4638      	mov	r0, r7
 8006738:	f7ff ffc0 	bl	80066bc <sbrk_aligned>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	4604      	mov	r4, r0
 8006740:	d155      	bne.n	80067ee <_malloc_r+0xf2>
 8006742:	f8d8 4000 	ldr.w	r4, [r8]
 8006746:	4626      	mov	r6, r4
 8006748:	2e00      	cmp	r6, #0
 800674a:	d145      	bne.n	80067d8 <_malloc_r+0xdc>
 800674c:	2c00      	cmp	r4, #0
 800674e:	d048      	beq.n	80067e2 <_malloc_r+0xe6>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	4631      	mov	r1, r6
 8006754:	4638      	mov	r0, r7
 8006756:	eb04 0903 	add.w	r9, r4, r3
 800675a:	f000 fc93 	bl	8007084 <_sbrk_r>
 800675e:	4581      	cmp	r9, r0
 8006760:	d13f      	bne.n	80067e2 <_malloc_r+0xe6>
 8006762:	6821      	ldr	r1, [r4, #0]
 8006764:	4638      	mov	r0, r7
 8006766:	1a6d      	subs	r5, r5, r1
 8006768:	4629      	mov	r1, r5
 800676a:	f7ff ffa7 	bl	80066bc <sbrk_aligned>
 800676e:	3001      	adds	r0, #1
 8006770:	d037      	beq.n	80067e2 <_malloc_r+0xe6>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	442b      	add	r3, r5
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	f8d8 3000 	ldr.w	r3, [r8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d038      	beq.n	80067f2 <_malloc_r+0xf6>
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	42a2      	cmp	r2, r4
 8006784:	d12b      	bne.n	80067de <_malloc_r+0xe2>
 8006786:	2200      	movs	r2, #0
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	e00f      	b.n	80067ac <_malloc_r+0xb0>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	1b52      	subs	r2, r2, r5
 8006790:	d41f      	bmi.n	80067d2 <_malloc_r+0xd6>
 8006792:	2a0b      	cmp	r2, #11
 8006794:	d917      	bls.n	80067c6 <_malloc_r+0xca>
 8006796:	1961      	adds	r1, r4, r5
 8006798:	42a3      	cmp	r3, r4
 800679a:	6025      	str	r5, [r4, #0]
 800679c:	bf18      	it	ne
 800679e:	6059      	strne	r1, [r3, #4]
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	bf08      	it	eq
 80067a4:	f8c8 1000 	streq.w	r1, [r8]
 80067a8:	5162      	str	r2, [r4, r5]
 80067aa:	604b      	str	r3, [r1, #4]
 80067ac:	4638      	mov	r0, r7
 80067ae:	f104 060b 	add.w	r6, r4, #11
 80067b2:	f000 f829 	bl	8006808 <__malloc_unlock>
 80067b6:	f026 0607 	bic.w	r6, r6, #7
 80067ba:	1d23      	adds	r3, r4, #4
 80067bc:	1af2      	subs	r2, r6, r3
 80067be:	d0ae      	beq.n	800671e <_malloc_r+0x22>
 80067c0:	1b9b      	subs	r3, r3, r6
 80067c2:	50a3      	str	r3, [r4, r2]
 80067c4:	e7ab      	b.n	800671e <_malloc_r+0x22>
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	6862      	ldr	r2, [r4, #4]
 80067ca:	d1dd      	bne.n	8006788 <_malloc_r+0x8c>
 80067cc:	f8c8 2000 	str.w	r2, [r8]
 80067d0:	e7ec      	b.n	80067ac <_malloc_r+0xb0>
 80067d2:	4623      	mov	r3, r4
 80067d4:	6864      	ldr	r4, [r4, #4]
 80067d6:	e7ac      	b.n	8006732 <_malloc_r+0x36>
 80067d8:	4634      	mov	r4, r6
 80067da:	6876      	ldr	r6, [r6, #4]
 80067dc:	e7b4      	b.n	8006748 <_malloc_r+0x4c>
 80067de:	4613      	mov	r3, r2
 80067e0:	e7cc      	b.n	800677c <_malloc_r+0x80>
 80067e2:	230c      	movs	r3, #12
 80067e4:	4638      	mov	r0, r7
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	f000 f80e 	bl	8006808 <__malloc_unlock>
 80067ec:	e797      	b.n	800671e <_malloc_r+0x22>
 80067ee:	6025      	str	r5, [r4, #0]
 80067f0:	e7dc      	b.n	80067ac <_malloc_r+0xb0>
 80067f2:	605b      	str	r3, [r3, #4]
 80067f4:	deff      	udf	#255	; 0xff
 80067f6:	bf00      	nop
 80067f8:	200004ac 	.word	0x200004ac

080067fc <__malloc_lock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_lock+0x8>)
 80067fe:	f7ff bf05 	b.w	800660c <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	200004a8 	.word	0x200004a8

08006808 <__malloc_unlock>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__malloc_unlock+0x8>)
 800680a:	f7ff bf00 	b.w	800660e <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	200004a8 	.word	0x200004a8

08006814 <__sfputc_r>:
 8006814:	6893      	ldr	r3, [r2, #8]
 8006816:	b410      	push	{r4}
 8006818:	3b01      	subs	r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	6093      	str	r3, [r2, #8]
 800681e:	da07      	bge.n	8006830 <__sfputc_r+0x1c>
 8006820:	6994      	ldr	r4, [r2, #24]
 8006822:	42a3      	cmp	r3, r4
 8006824:	db01      	blt.n	800682a <__sfputc_r+0x16>
 8006826:	290a      	cmp	r1, #10
 8006828:	d102      	bne.n	8006830 <__sfputc_r+0x1c>
 800682a:	bc10      	pop	{r4}
 800682c:	f7ff bde1 	b.w	80063f2 <__swbuf_r>
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	1c58      	adds	r0, r3, #1
 8006834:	6010      	str	r0, [r2, #0]
 8006836:	7019      	strb	r1, [r3, #0]
 8006838:	4608      	mov	r0, r1
 800683a:	bc10      	pop	{r4}
 800683c:	4770      	bx	lr

0800683e <__sfputs_r>:
 800683e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006840:	4606      	mov	r6, r0
 8006842:	460f      	mov	r7, r1
 8006844:	4614      	mov	r4, r2
 8006846:	18d5      	adds	r5, r2, r3
 8006848:	42ac      	cmp	r4, r5
 800684a:	d101      	bne.n	8006850 <__sfputs_r+0x12>
 800684c:	2000      	movs	r0, #0
 800684e:	e007      	b.n	8006860 <__sfputs_r+0x22>
 8006850:	463a      	mov	r2, r7
 8006852:	4630      	mov	r0, r6
 8006854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006858:	f7ff ffdc 	bl	8006814 <__sfputc_r>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d1f3      	bne.n	8006848 <__sfputs_r+0xa>
 8006860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006864 <_vfiprintf_r>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	460d      	mov	r5, r1
 800686a:	4614      	mov	r4, r2
 800686c:	4698      	mov	r8, r3
 800686e:	4606      	mov	r6, r0
 8006870:	b09d      	sub	sp, #116	; 0x74
 8006872:	b118      	cbz	r0, 800687c <_vfiprintf_r+0x18>
 8006874:	6a03      	ldr	r3, [r0, #32]
 8006876:	b90b      	cbnz	r3, 800687c <_vfiprintf_r+0x18>
 8006878:	f7ff fccc 	bl	8006214 <__sinit>
 800687c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687e:	07d9      	lsls	r1, r3, #31
 8006880:	d405      	bmi.n	800688e <_vfiprintf_r+0x2a>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	059a      	lsls	r2, r3, #22
 8006886:	d402      	bmi.n	800688e <_vfiprintf_r+0x2a>
 8006888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688a:	f7ff febf 	bl	800660c <__retarget_lock_acquire_recursive>
 800688e:	89ab      	ldrh	r3, [r5, #12]
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	d501      	bpl.n	8006898 <_vfiprintf_r+0x34>
 8006894:	692b      	ldr	r3, [r5, #16]
 8006896:	b99b      	cbnz	r3, 80068c0 <_vfiprintf_r+0x5c>
 8006898:	4629      	mov	r1, r5
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff fde6 	bl	800646c <__swsetup_r>
 80068a0:	b170      	cbz	r0, 80068c0 <_vfiprintf_r+0x5c>
 80068a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a4:	07dc      	lsls	r4, r3, #31
 80068a6:	d504      	bpl.n	80068b2 <_vfiprintf_r+0x4e>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	b01d      	add	sp, #116	; 0x74
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	89ab      	ldrh	r3, [r5, #12]
 80068b4:	0598      	lsls	r0, r3, #22
 80068b6:	d4f7      	bmi.n	80068a8 <_vfiprintf_r+0x44>
 80068b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ba:	f7ff fea8 	bl	800660e <__retarget_lock_release_recursive>
 80068be:	e7f3      	b.n	80068a8 <_vfiprintf_r+0x44>
 80068c0:	2300      	movs	r3, #0
 80068c2:	9309      	str	r3, [sp, #36]	; 0x24
 80068c4:	2320      	movs	r3, #32
 80068c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ca:	2330      	movs	r3, #48	; 0x30
 80068cc:	f04f 0901 	mov.w	r9, #1
 80068d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80068d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006a84 <_vfiprintf_r+0x220>
 80068d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068dc:	4623      	mov	r3, r4
 80068de:	469a      	mov	sl, r3
 80068e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e4:	b10a      	cbz	r2, 80068ea <_vfiprintf_r+0x86>
 80068e6:	2a25      	cmp	r2, #37	; 0x25
 80068e8:	d1f9      	bne.n	80068de <_vfiprintf_r+0x7a>
 80068ea:	ebba 0b04 	subs.w	fp, sl, r4
 80068ee:	d00b      	beq.n	8006908 <_vfiprintf_r+0xa4>
 80068f0:	465b      	mov	r3, fp
 80068f2:	4622      	mov	r2, r4
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ffa1 	bl	800683e <__sfputs_r>
 80068fc:	3001      	adds	r0, #1
 80068fe:	f000 80a9 	beq.w	8006a54 <_vfiprintf_r+0x1f0>
 8006902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006904:	445a      	add	r2, fp
 8006906:	9209      	str	r2, [sp, #36]	; 0x24
 8006908:	f89a 3000 	ldrb.w	r3, [sl]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a1 	beq.w	8006a54 <_vfiprintf_r+0x1f0>
 8006912:	2300      	movs	r3, #0
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691c:	f10a 0a01 	add.w	sl, sl, #1
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	9307      	str	r3, [sp, #28]
 8006924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006928:	931a      	str	r3, [sp, #104]	; 0x68
 800692a:	4654      	mov	r4, sl
 800692c:	2205      	movs	r2, #5
 800692e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006932:	4854      	ldr	r0, [pc, #336]	; (8006a84 <_vfiprintf_r+0x220>)
 8006934:	f000 fbb6 	bl	80070a4 <memchr>
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	b9d8      	cbnz	r0, 8006974 <_vfiprintf_r+0x110>
 800693c:	06d1      	lsls	r1, r2, #27
 800693e:	bf44      	itt	mi
 8006940:	2320      	movmi	r3, #32
 8006942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006946:	0713      	lsls	r3, r2, #28
 8006948:	bf44      	itt	mi
 800694a:	232b      	movmi	r3, #43	; 0x2b
 800694c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006950:	f89a 3000 	ldrb.w	r3, [sl]
 8006954:	2b2a      	cmp	r3, #42	; 0x2a
 8006956:	d015      	beq.n	8006984 <_vfiprintf_r+0x120>
 8006958:	4654      	mov	r4, sl
 800695a:	2000      	movs	r0, #0
 800695c:	f04f 0c0a 	mov.w	ip, #10
 8006960:	9a07      	ldr	r2, [sp, #28]
 8006962:	4621      	mov	r1, r4
 8006964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006968:	3b30      	subs	r3, #48	; 0x30
 800696a:	2b09      	cmp	r3, #9
 800696c:	d94d      	bls.n	8006a0a <_vfiprintf_r+0x1a6>
 800696e:	b1b0      	cbz	r0, 800699e <_vfiprintf_r+0x13a>
 8006970:	9207      	str	r2, [sp, #28]
 8006972:	e014      	b.n	800699e <_vfiprintf_r+0x13a>
 8006974:	eba0 0308 	sub.w	r3, r0, r8
 8006978:	fa09 f303 	lsl.w	r3, r9, r3
 800697c:	4313      	orrs	r3, r2
 800697e:	46a2      	mov	sl, r4
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	e7d2      	b.n	800692a <_vfiprintf_r+0xc6>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	1d19      	adds	r1, r3, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9103      	str	r1, [sp, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfbb      	ittet	lt
 8006990:	425b      	neglt	r3, r3
 8006992:	f042 0202 	orrlt.w	r2, r2, #2
 8006996:	9307      	strge	r3, [sp, #28]
 8006998:	9307      	strlt	r3, [sp, #28]
 800699a:	bfb8      	it	lt
 800699c:	9204      	strlt	r2, [sp, #16]
 800699e:	7823      	ldrb	r3, [r4, #0]
 80069a0:	2b2e      	cmp	r3, #46	; 0x2e
 80069a2:	d10c      	bne.n	80069be <_vfiprintf_r+0x15a>
 80069a4:	7863      	ldrb	r3, [r4, #1]
 80069a6:	2b2a      	cmp	r3, #42	; 0x2a
 80069a8:	d134      	bne.n	8006a14 <_vfiprintf_r+0x1b0>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	3402      	adds	r4, #2
 80069ae:	1d1a      	adds	r2, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	9203      	str	r2, [sp, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfb8      	it	lt
 80069b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80069bc:	9305      	str	r3, [sp, #20]
 80069be:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a88 <_vfiprintf_r+0x224>
 80069c2:	2203      	movs	r2, #3
 80069c4:	4650      	mov	r0, sl
 80069c6:	7821      	ldrb	r1, [r4, #0]
 80069c8:	f000 fb6c 	bl	80070a4 <memchr>
 80069cc:	b138      	cbz	r0, 80069de <_vfiprintf_r+0x17a>
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	9b04      	ldr	r3, [sp, #16]
 80069d2:	eba0 000a 	sub.w	r0, r0, sl
 80069d6:	4082      	lsls	r2, r0
 80069d8:	4313      	orrs	r3, r2
 80069da:	3401      	adds	r4, #1
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e2:	2206      	movs	r2, #6
 80069e4:	4829      	ldr	r0, [pc, #164]	; (8006a8c <_vfiprintf_r+0x228>)
 80069e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ea:	f000 fb5b 	bl	80070a4 <memchr>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d03f      	beq.n	8006a72 <_vfiprintf_r+0x20e>
 80069f2:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <_vfiprintf_r+0x22c>)
 80069f4:	bb1b      	cbnz	r3, 8006a3e <_vfiprintf_r+0x1da>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3307      	adds	r3, #7
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	3308      	adds	r3, #8
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	443b      	add	r3, r7
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	e768      	b.n	80068dc <_vfiprintf_r+0x78>
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a12:	e7a6      	b.n	8006962 <_vfiprintf_r+0xfe>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f04f 0c0a 	mov.w	ip, #10
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	3401      	adds	r4, #1
 8006a1e:	9305      	str	r3, [sp, #20]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a26:	3a30      	subs	r2, #48	; 0x30
 8006a28:	2a09      	cmp	r2, #9
 8006a2a:	d903      	bls.n	8006a34 <_vfiprintf_r+0x1d0>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0c6      	beq.n	80069be <_vfiprintf_r+0x15a>
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	e7c4      	b.n	80069be <_vfiprintf_r+0x15a>
 8006a34:	4604      	mov	r4, r0
 8006a36:	2301      	movs	r3, #1
 8006a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a3c:	e7f0      	b.n	8006a20 <_vfiprintf_r+0x1bc>
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	462a      	mov	r2, r5
 8006a44:	4630      	mov	r0, r6
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <_vfiprintf_r+0x230>)
 8006a48:	a904      	add	r1, sp, #16
 8006a4a:	f3af 8000 	nop.w
 8006a4e:	4607      	mov	r7, r0
 8006a50:	1c78      	adds	r0, r7, #1
 8006a52:	d1d6      	bne.n	8006a02 <_vfiprintf_r+0x19e>
 8006a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a56:	07d9      	lsls	r1, r3, #31
 8006a58:	d405      	bmi.n	8006a66 <_vfiprintf_r+0x202>
 8006a5a:	89ab      	ldrh	r3, [r5, #12]
 8006a5c:	059a      	lsls	r2, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_vfiprintf_r+0x202>
 8006a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a62:	f7ff fdd4 	bl	800660e <__retarget_lock_release_recursive>
 8006a66:	89ab      	ldrh	r3, [r5, #12]
 8006a68:	065b      	lsls	r3, r3, #25
 8006a6a:	f53f af1d 	bmi.w	80068a8 <_vfiprintf_r+0x44>
 8006a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a70:	e71c      	b.n	80068ac <_vfiprintf_r+0x48>
 8006a72:	ab03      	add	r3, sp, #12
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	462a      	mov	r2, r5
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <_vfiprintf_r+0x230>)
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	f000 f87d 	bl	8006b7c <_printf_i>
 8006a82:	e7e4      	b.n	8006a4e <_vfiprintf_r+0x1ea>
 8006a84:	080073b6 	.word	0x080073b6
 8006a88:	080073bc 	.word	0x080073bc
 8006a8c:	080073c0 	.word	0x080073c0
 8006a90:	00000000 	.word	0x00000000
 8006a94:	0800683f 	.word	0x0800683f

08006a98 <_printf_common>:
 8006a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	4699      	mov	r9, r3
 8006aa0:	688a      	ldr	r2, [r1, #8]
 8006aa2:	690b      	ldr	r3, [r1, #16]
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bfb8      	it	lt
 8006aaa:	4613      	movlt	r3, r2
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab8:	b10a      	cbz	r2, 8006abe <_printf_common+0x26>
 8006aba:	3301      	adds	r3, #1
 8006abc:	6033      	str	r3, [r6, #0]
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	0699      	lsls	r1, r3, #26
 8006ac2:	bf42      	ittt	mi
 8006ac4:	6833      	ldrmi	r3, [r6, #0]
 8006ac6:	3302      	addmi	r3, #2
 8006ac8:	6033      	strmi	r3, [r6, #0]
 8006aca:	6825      	ldr	r5, [r4, #0]
 8006acc:	f015 0506 	ands.w	r5, r5, #6
 8006ad0:	d106      	bne.n	8006ae0 <_printf_common+0x48>
 8006ad2:	f104 0a19 	add.w	sl, r4, #25
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	6832      	ldr	r2, [r6, #0]
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dc2b      	bgt.n	8006b38 <_printf_common+0xa0>
 8006ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae4:	1e13      	subs	r3, r2, #0
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	bf18      	it	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	0692      	lsls	r2, r2, #26
 8006aee:	d430      	bmi.n	8006b52 <_printf_common+0xba>
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af8:	47c0      	blx	r8
 8006afa:	3001      	adds	r0, #1
 8006afc:	d023      	beq.n	8006b46 <_printf_common+0xae>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	6922      	ldr	r2, [r4, #16]
 8006b02:	f003 0306 	and.w	r3, r3, #6
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	bf14      	ite	ne
 8006b0a:	2500      	movne	r5, #0
 8006b0c:	6833      	ldreq	r3, [r6, #0]
 8006b0e:	f04f 0600 	mov.w	r6, #0
 8006b12:	bf08      	it	eq
 8006b14:	68e5      	ldreq	r5, [r4, #12]
 8006b16:	f104 041a 	add.w	r4, r4, #26
 8006b1a:	bf08      	it	eq
 8006b1c:	1aed      	subeq	r5, r5, r3
 8006b1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b22:	bf08      	it	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	bfc4      	itt	gt
 8006b2c:	1a9b      	subgt	r3, r3, r2
 8006b2e:	18ed      	addgt	r5, r5, r3
 8006b30:	42b5      	cmp	r5, r6
 8006b32:	d11a      	bne.n	8006b6a <_printf_common+0xd2>
 8006b34:	2000      	movs	r0, #0
 8006b36:	e008      	b.n	8006b4a <_printf_common+0xb2>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c0      	blx	r8
 8006b42:	3001      	adds	r0, #1
 8006b44:	d103      	bne.n	8006b4e <_printf_common+0xb6>
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	3501      	adds	r5, #1
 8006b50:	e7c1      	b.n	8006ad6 <_printf_common+0x3e>
 8006b52:	2030      	movs	r0, #48	; 0x30
 8006b54:	18e1      	adds	r1, r4, r3
 8006b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b60:	4422      	add	r2, r4
 8006b62:	3302      	adds	r3, #2
 8006b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b68:	e7c2      	b.n	8006af0 <_printf_common+0x58>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4638      	mov	r0, r7
 8006b72:	47c0      	blx	r8
 8006b74:	3001      	adds	r0, #1
 8006b76:	d0e6      	beq.n	8006b46 <_printf_common+0xae>
 8006b78:	3601      	adds	r6, #1
 8006b7a:	e7d9      	b.n	8006b30 <_printf_common+0x98>

08006b7c <_printf_i>:
 8006b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	7e0f      	ldrb	r7, [r1, #24]
 8006b82:	4691      	mov	r9, r2
 8006b84:	2f78      	cmp	r7, #120	; 0x78
 8006b86:	4680      	mov	r8, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	469a      	mov	sl, r3
 8006b8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b92:	d807      	bhi.n	8006ba4 <_printf_i+0x28>
 8006b94:	2f62      	cmp	r7, #98	; 0x62
 8006b96:	d80a      	bhi.n	8006bae <_printf_i+0x32>
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	f000 80d5 	beq.w	8006d48 <_printf_i+0x1cc>
 8006b9e:	2f58      	cmp	r7, #88	; 0x58
 8006ba0:	f000 80c1 	beq.w	8006d26 <_printf_i+0x1aa>
 8006ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bac:	e03a      	b.n	8006c24 <_printf_i+0xa8>
 8006bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bb2:	2b15      	cmp	r3, #21
 8006bb4:	d8f6      	bhi.n	8006ba4 <_printf_i+0x28>
 8006bb6:	a101      	add	r1, pc, #4	; (adr r1, 8006bbc <_printf_i+0x40>)
 8006bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006ba5 	.word	0x08006ba5
 8006bc8:	08006ba5 	.word	0x08006ba5
 8006bcc:	08006ba5 	.word	0x08006ba5
 8006bd0:	08006ba5 	.word	0x08006ba5
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006ba5 	.word	0x08006ba5
 8006bdc:	08006ba5 	.word	0x08006ba5
 8006be0:	08006ba5 	.word	0x08006ba5
 8006be4:	08006ba5 	.word	0x08006ba5
 8006be8:	08006d2f 	.word	0x08006d2f
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006ce9 	.word	0x08006ce9
 8006bf4:	08006ba5 	.word	0x08006ba5
 8006bf8:	08006ba5 	.word	0x08006ba5
 8006bfc:	08006d51 	.word	0x08006d51
 8006c00:	08006ba5 	.word	0x08006ba5
 8006c04:	08006c55 	.word	0x08006c55
 8006c08:	08006ba5 	.word	0x08006ba5
 8006c0c:	08006ba5 	.word	0x08006ba5
 8006c10:	08006cf1 	.word	0x08006cf1
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	602a      	str	r2, [r5, #0]
 8006c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0a0      	b.n	8006d6a <_printf_i+0x1ee>
 8006c28:	6820      	ldr	r0, [r4, #0]
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	0607      	lsls	r7, r0, #24
 8006c2e:	f103 0104 	add.w	r1, r3, #4
 8006c32:	6029      	str	r1, [r5, #0]
 8006c34:	d501      	bpl.n	8006c3a <_printf_i+0xbe>
 8006c36:	681e      	ldr	r6, [r3, #0]
 8006c38:	e003      	b.n	8006c42 <_printf_i+0xc6>
 8006c3a:	0646      	lsls	r6, r0, #25
 8006c3c:	d5fb      	bpl.n	8006c36 <_printf_i+0xba>
 8006c3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	da03      	bge.n	8006c4e <_printf_i+0xd2>
 8006c46:	232d      	movs	r3, #45	; 0x2d
 8006c48:	4276      	negs	r6, r6
 8006c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4e:	230a      	movs	r3, #10
 8006c50:	4859      	ldr	r0, [pc, #356]	; (8006db8 <_printf_i+0x23c>)
 8006c52:	e012      	b.n	8006c7a <_printf_i+0xfe>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	1d19      	adds	r1, r3, #4
 8006c5a:	6029      	str	r1, [r5, #0]
 8006c5c:	0605      	lsls	r5, r0, #24
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0xe8>
 8006c60:	681e      	ldr	r6, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0xee>
 8006c64:	0641      	lsls	r1, r0, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0xe4>
 8006c68:	881e      	ldrh	r6, [r3, #0]
 8006c6a:	2f6f      	cmp	r7, #111	; 0x6f
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2308      	moveq	r3, #8
 8006c70:	230a      	movne	r3, #10
 8006c72:	4851      	ldr	r0, [pc, #324]	; (8006db8 <_printf_i+0x23c>)
 8006c74:	2100      	movs	r1, #0
 8006c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c7a:	6865      	ldr	r5, [r4, #4]
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	bfa8      	it	ge
 8006c80:	6821      	ldrge	r1, [r4, #0]
 8006c82:	60a5      	str	r5, [r4, #8]
 8006c84:	bfa4      	itt	ge
 8006c86:	f021 0104 	bicge.w	r1, r1, #4
 8006c8a:	6021      	strge	r1, [r4, #0]
 8006c8c:	b90e      	cbnz	r6, 8006c92 <_printf_i+0x116>
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	d04b      	beq.n	8006d2a <_printf_i+0x1ae>
 8006c92:	4615      	mov	r5, r2
 8006c94:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c98:	fb03 6711 	mls	r7, r3, r1, r6
 8006c9c:	5dc7      	ldrb	r7, [r0, r7]
 8006c9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ca2:	4637      	mov	r7, r6
 8006ca4:	42bb      	cmp	r3, r7
 8006ca6:	460e      	mov	r6, r1
 8006ca8:	d9f4      	bls.n	8006c94 <_printf_i+0x118>
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d10b      	bne.n	8006cc6 <_printf_i+0x14a>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	07de      	lsls	r6, r3, #31
 8006cb2:	d508      	bpl.n	8006cc6 <_printf_i+0x14a>
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	6861      	ldr	r1, [r4, #4]
 8006cb8:	4299      	cmp	r1, r3
 8006cba:	bfde      	ittt	le
 8006cbc:	2330      	movle	r3, #48	; 0x30
 8006cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cc6:	1b52      	subs	r2, r2, r5
 8006cc8:	6122      	str	r2, [r4, #16]
 8006cca:	464b      	mov	r3, r9
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4640      	mov	r0, r8
 8006cd0:	f8cd a000 	str.w	sl, [sp]
 8006cd4:	aa03      	add	r2, sp, #12
 8006cd6:	f7ff fedf 	bl	8006a98 <_printf_common>
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d14a      	bne.n	8006d74 <_printf_i+0x1f8>
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	b004      	add	sp, #16
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	f043 0320 	orr.w	r3, r3, #32
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	2778      	movs	r7, #120	; 0x78
 8006cf2:	4832      	ldr	r0, [pc, #200]	; (8006dbc <_printf_i+0x240>)
 8006cf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	6829      	ldr	r1, [r5, #0]
 8006cfc:	061f      	lsls	r7, r3, #24
 8006cfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d02:	d402      	bmi.n	8006d0a <_printf_i+0x18e>
 8006d04:	065f      	lsls	r7, r3, #25
 8006d06:	bf48      	it	mi
 8006d08:	b2b6      	uxthmi	r6, r6
 8006d0a:	07df      	lsls	r7, r3, #31
 8006d0c:	bf48      	it	mi
 8006d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d12:	6029      	str	r1, [r5, #0]
 8006d14:	bf48      	it	mi
 8006d16:	6023      	strmi	r3, [r4, #0]
 8006d18:	b91e      	cbnz	r6, 8006d22 <_printf_i+0x1a6>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f023 0320 	bic.w	r3, r3, #32
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	2310      	movs	r3, #16
 8006d24:	e7a6      	b.n	8006c74 <_printf_i+0xf8>
 8006d26:	4824      	ldr	r0, [pc, #144]	; (8006db8 <_printf_i+0x23c>)
 8006d28:	e7e4      	b.n	8006cf4 <_printf_i+0x178>
 8006d2a:	4615      	mov	r5, r2
 8006d2c:	e7bd      	b.n	8006caa <_printf_i+0x12e>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	6826      	ldr	r6, [r4, #0]
 8006d32:	1d18      	adds	r0, r3, #4
 8006d34:	6961      	ldr	r1, [r4, #20]
 8006d36:	6028      	str	r0, [r5, #0]
 8006d38:	0635      	lsls	r5, r6, #24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	d501      	bpl.n	8006d42 <_printf_i+0x1c6>
 8006d3e:	6019      	str	r1, [r3, #0]
 8006d40:	e002      	b.n	8006d48 <_printf_i+0x1cc>
 8006d42:	0670      	lsls	r0, r6, #25
 8006d44:	d5fb      	bpl.n	8006d3e <_printf_i+0x1c2>
 8006d46:	8019      	strh	r1, [r3, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4615      	mov	r5, r2
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	e7bc      	b.n	8006cca <_printf_i+0x14e>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	2100      	movs	r1, #0
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f9a1 	bl	80070a4 <memchr>
 8006d62:	b108      	cbz	r0, 8006d68 <_printf_i+0x1ec>
 8006d64:	1b40      	subs	r0, r0, r5
 8006d66:	6060      	str	r0, [r4, #4]
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d72:	e7aa      	b.n	8006cca <_printf_i+0x14e>
 8006d74:	462a      	mov	r2, r5
 8006d76:	4649      	mov	r1, r9
 8006d78:	4640      	mov	r0, r8
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	47d0      	blx	sl
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d0ad      	beq.n	8006cde <_printf_i+0x162>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	079b      	lsls	r3, r3, #30
 8006d86:	d413      	bmi.n	8006db0 <_printf_i+0x234>
 8006d88:	68e0      	ldr	r0, [r4, #12]
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	4298      	cmp	r0, r3
 8006d8e:	bfb8      	it	lt
 8006d90:	4618      	movlt	r0, r3
 8006d92:	e7a6      	b.n	8006ce2 <_printf_i+0x166>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4632      	mov	r2, r6
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	47d0      	blx	sl
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d09d      	beq.n	8006cde <_printf_i+0x162>
 8006da2:	3501      	adds	r5, #1
 8006da4:	68e3      	ldr	r3, [r4, #12]
 8006da6:	9903      	ldr	r1, [sp, #12]
 8006da8:	1a5b      	subs	r3, r3, r1
 8006daa:	42ab      	cmp	r3, r5
 8006dac:	dcf2      	bgt.n	8006d94 <_printf_i+0x218>
 8006dae:	e7eb      	b.n	8006d88 <_printf_i+0x20c>
 8006db0:	2500      	movs	r5, #0
 8006db2:	f104 0619 	add.w	r6, r4, #25
 8006db6:	e7f5      	b.n	8006da4 <_printf_i+0x228>
 8006db8:	080073c7 	.word	0x080073c7
 8006dbc:	080073d8 	.word	0x080073d8

08006dc0 <__sflush_r>:
 8006dc0:	898a      	ldrh	r2, [r1, #12]
 8006dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	0710      	lsls	r0, r2, #28
 8006dc8:	460c      	mov	r4, r1
 8006dca:	d457      	bmi.n	8006e7c <__sflush_r+0xbc>
 8006dcc:	684b      	ldr	r3, [r1, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dc04      	bgt.n	8006ddc <__sflush_r+0x1c>
 8006dd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dc01      	bgt.n	8006ddc <__sflush_r+0x1c>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	d0fa      	beq.n	8006dd8 <__sflush_r+0x18>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006de8:	682f      	ldr	r7, [r5, #0]
 8006dea:	6a21      	ldr	r1, [r4, #32]
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	d032      	beq.n	8006e56 <__sflush_r+0x96>
 8006df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	075a      	lsls	r2, r3, #29
 8006df6:	d505      	bpl.n	8006e04 <__sflush_r+0x44>
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	1ac0      	subs	r0, r0, r3
 8006dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dfe:	b10b      	cbz	r3, 8006e04 <__sflush_r+0x44>
 8006e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e02:	1ac0      	subs	r0, r0, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	4602      	mov	r2, r0
 8006e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	6a21      	ldr	r1, [r4, #32]
 8006e0e:	47b0      	blx	r6
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	d106      	bne.n	8006e24 <__sflush_r+0x64>
 8006e16:	6829      	ldr	r1, [r5, #0]
 8006e18:	291d      	cmp	r1, #29
 8006e1a:	d82b      	bhi.n	8006e74 <__sflush_r+0xb4>
 8006e1c:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <__sflush_r+0x100>)
 8006e1e:	410a      	asrs	r2, r1
 8006e20:	07d6      	lsls	r6, r2, #31
 8006e22:	d427      	bmi.n	8006e74 <__sflush_r+0xb4>
 8006e24:	2200      	movs	r2, #0
 8006e26:	6062      	str	r2, [r4, #4]
 8006e28:	6922      	ldr	r2, [r4, #16]
 8006e2a:	04d9      	lsls	r1, r3, #19
 8006e2c:	6022      	str	r2, [r4, #0]
 8006e2e:	d504      	bpl.n	8006e3a <__sflush_r+0x7a>
 8006e30:	1c42      	adds	r2, r0, #1
 8006e32:	d101      	bne.n	8006e38 <__sflush_r+0x78>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b903      	cbnz	r3, 8006e3a <__sflush_r+0x7a>
 8006e38:	6560      	str	r0, [r4, #84]	; 0x54
 8006e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3c:	602f      	str	r7, [r5, #0]
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d0ca      	beq.n	8006dd8 <__sflush_r+0x18>
 8006e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e46:	4299      	cmp	r1, r3
 8006e48:	d002      	beq.n	8006e50 <__sflush_r+0x90>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7ff fbee 	bl	800662c <_free_r>
 8006e50:	2000      	movs	r0, #0
 8006e52:	6360      	str	r0, [r4, #52]	; 0x34
 8006e54:	e7c1      	b.n	8006dda <__sflush_r+0x1a>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b0      	blx	r6
 8006e5c:	1c41      	adds	r1, r0, #1
 8006e5e:	d1c8      	bne.n	8006df2 <__sflush_r+0x32>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c5      	beq.n	8006df2 <__sflush_r+0x32>
 8006e66:	2b1d      	cmp	r3, #29
 8006e68:	d001      	beq.n	8006e6e <__sflush_r+0xae>
 8006e6a:	2b16      	cmp	r3, #22
 8006e6c:	d101      	bne.n	8006e72 <__sflush_r+0xb2>
 8006e6e:	602f      	str	r7, [r5, #0]
 8006e70:	e7b2      	b.n	8006dd8 <__sflush_r+0x18>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e78:	81a3      	strh	r3, [r4, #12]
 8006e7a:	e7ae      	b.n	8006dda <__sflush_r+0x1a>
 8006e7c:	690f      	ldr	r7, [r1, #16]
 8006e7e:	2f00      	cmp	r7, #0
 8006e80:	d0aa      	beq.n	8006dd8 <__sflush_r+0x18>
 8006e82:	0793      	lsls	r3, r2, #30
 8006e84:	bf18      	it	ne
 8006e86:	2300      	movne	r3, #0
 8006e88:	680e      	ldr	r6, [r1, #0]
 8006e8a:	bf08      	it	eq
 8006e8c:	694b      	ldreq	r3, [r1, #20]
 8006e8e:	1bf6      	subs	r6, r6, r7
 8006e90:	600f      	str	r7, [r1, #0]
 8006e92:	608b      	str	r3, [r1, #8]
 8006e94:	2e00      	cmp	r6, #0
 8006e96:	dd9f      	ble.n	8006dd8 <__sflush_r+0x18>
 8006e98:	4633      	mov	r3, r6
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	6a21      	ldr	r1, [r4, #32]
 8006ea0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ea4:	47e0      	blx	ip
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	dc06      	bgt.n	8006eb8 <__sflush_r+0xf8>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	e790      	b.n	8006dda <__sflush_r+0x1a>
 8006eb8:	4407      	add	r7, r0
 8006eba:	1a36      	subs	r6, r6, r0
 8006ebc:	e7ea      	b.n	8006e94 <__sflush_r+0xd4>
 8006ebe:	bf00      	nop
 8006ec0:	dfbffffe 	.word	0xdfbffffe

08006ec4 <_fflush_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	b913      	cbnz	r3, 8006ed4 <_fflush_r+0x10>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	b118      	cbz	r0, 8006ede <_fflush_r+0x1a>
 8006ed6:	6a03      	ldr	r3, [r0, #32]
 8006ed8:	b90b      	cbnz	r3, 8006ede <_fflush_r+0x1a>
 8006eda:	f7ff f99b 	bl	8006214 <__sinit>
 8006ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f3      	beq.n	8006ece <_fflush_r+0xa>
 8006ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ee8:	07d0      	lsls	r0, r2, #31
 8006eea:	d404      	bmi.n	8006ef6 <_fflush_r+0x32>
 8006eec:	0599      	lsls	r1, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_fflush_r+0x32>
 8006ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef2:	f7ff fb8b 	bl	800660c <__retarget_lock_acquire_recursive>
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	4621      	mov	r1, r4
 8006efa:	f7ff ff61 	bl	8006dc0 <__sflush_r>
 8006efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f00:	4605      	mov	r5, r0
 8006f02:	07da      	lsls	r2, r3, #31
 8006f04:	d4e4      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	059b      	lsls	r3, r3, #22
 8006f0a:	d4e1      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0e:	f7ff fb7e 	bl	800660e <__retarget_lock_release_recursive>
 8006f12:	e7dd      	b.n	8006ed0 <_fflush_r+0xc>

08006f14 <__swhatbuf_r>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	460c      	mov	r4, r1
 8006f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	461e      	mov	r6, r3
 8006f22:	b096      	sub	sp, #88	; 0x58
 8006f24:	da0c      	bge.n	8006f40 <__swhatbuf_r+0x2c>
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	2100      	movs	r1, #0
 8006f2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f2e:	bf0c      	ite	eq
 8006f30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f34:	2340      	movne	r3, #64	; 0x40
 8006f36:	2000      	movs	r0, #0
 8006f38:	6031      	str	r1, [r6, #0]
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	b016      	add	sp, #88	; 0x58
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	466a      	mov	r2, sp
 8006f42:	f000 f87d 	bl	8007040 <_fstat_r>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	dbed      	blt.n	8006f26 <__swhatbuf_r+0x12>
 8006f4a:	9901      	ldr	r1, [sp, #4]
 8006f4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f54:	4259      	negs	r1, r3
 8006f56:	4159      	adcs	r1, r3
 8006f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5c:	e7eb      	b.n	8006f36 <__swhatbuf_r+0x22>

08006f5e <__smakebuf_r>:
 8006f5e:	898b      	ldrh	r3, [r1, #12]
 8006f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f62:	079d      	lsls	r5, r3, #30
 8006f64:	4606      	mov	r6, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	d507      	bpl.n	8006f7a <__smakebuf_r+0x1c>
 8006f6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	2301      	movs	r3, #1
 8006f74:	6163      	str	r3, [r4, #20]
 8006f76:	b002      	add	sp, #8
 8006f78:	bd70      	pop	{r4, r5, r6, pc}
 8006f7a:	466a      	mov	r2, sp
 8006f7c:	ab01      	add	r3, sp, #4
 8006f7e:	f7ff ffc9 	bl	8006f14 <__swhatbuf_r>
 8006f82:	9900      	ldr	r1, [sp, #0]
 8006f84:	4605      	mov	r5, r0
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7ff fbb8 	bl	80066fc <_malloc_r>
 8006f8c:	b948      	cbnz	r0, 8006fa2 <__smakebuf_r+0x44>
 8006f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f92:	059a      	lsls	r2, r3, #22
 8006f94:	d4ef      	bmi.n	8006f76 <__smakebuf_r+0x18>
 8006f96:	f023 0303 	bic.w	r3, r3, #3
 8006f9a:	f043 0302 	orr.w	r3, r3, #2
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	e7e3      	b.n	8006f6a <__smakebuf_r+0xc>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	6020      	str	r0, [r4, #0]
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006faa:	81a3      	strh	r3, [r4, #12]
 8006fac:	9b00      	ldr	r3, [sp, #0]
 8006fae:	6120      	str	r0, [r4, #16]
 8006fb0:	6163      	str	r3, [r4, #20]
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	b15b      	cbz	r3, 8006fce <__smakebuf_r+0x70>
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fbc:	f000 f852 	bl	8007064 <_isatty_r>
 8006fc0:	b128      	cbz	r0, 8006fce <__smakebuf_r+0x70>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f023 0303 	bic.w	r3, r3, #3
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	431d      	orrs	r5, r3
 8006fd2:	81a5      	strh	r5, [r4, #12]
 8006fd4:	e7cf      	b.n	8006f76 <__smakebuf_r+0x18>

08006fd6 <_putc_r>:
 8006fd6:	b570      	push	{r4, r5, r6, lr}
 8006fd8:	460d      	mov	r5, r1
 8006fda:	4614      	mov	r4, r2
 8006fdc:	4606      	mov	r6, r0
 8006fde:	b118      	cbz	r0, 8006fe8 <_putc_r+0x12>
 8006fe0:	6a03      	ldr	r3, [r0, #32]
 8006fe2:	b90b      	cbnz	r3, 8006fe8 <_putc_r+0x12>
 8006fe4:	f7ff f916 	bl	8006214 <__sinit>
 8006fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fea:	07d8      	lsls	r0, r3, #31
 8006fec:	d405      	bmi.n	8006ffa <_putc_r+0x24>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	0599      	lsls	r1, r3, #22
 8006ff2:	d402      	bmi.n	8006ffa <_putc_r+0x24>
 8006ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ff6:	f7ff fb09 	bl	800660c <__retarget_lock_acquire_recursive>
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	da05      	bge.n	8007010 <_putc_r+0x3a>
 8007004:	69a2      	ldr	r2, [r4, #24]
 8007006:	4293      	cmp	r3, r2
 8007008:	db12      	blt.n	8007030 <_putc_r+0x5a>
 800700a:	b2eb      	uxtb	r3, r5
 800700c:	2b0a      	cmp	r3, #10
 800700e:	d00f      	beq.n	8007030 <_putc_r+0x5a>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	701d      	strb	r5, [r3, #0]
 8007018:	b2ed      	uxtb	r5, r5
 800701a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800701c:	07da      	lsls	r2, r3, #31
 800701e:	d405      	bmi.n	800702c <_putc_r+0x56>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	059b      	lsls	r3, r3, #22
 8007024:	d402      	bmi.n	800702c <_putc_r+0x56>
 8007026:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007028:	f7ff faf1 	bl	800660e <__retarget_lock_release_recursive>
 800702c:	4628      	mov	r0, r5
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	4629      	mov	r1, r5
 8007032:	4622      	mov	r2, r4
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff f9dc 	bl	80063f2 <__swbuf_r>
 800703a:	4605      	mov	r5, r0
 800703c:	e7ed      	b.n	800701a <_putc_r+0x44>
	...

08007040 <_fstat_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	2300      	movs	r3, #0
 8007044:	4d06      	ldr	r5, [pc, #24]	; (8007060 <_fstat_r+0x20>)
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7fa fc43 	bl	80018d8 <_fstat>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_fstat_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_fstat_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	200004a4 	.word	0x200004a4

08007064 <_isatty_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	2300      	movs	r3, #0
 8007068:	4d05      	ldr	r5, [pc, #20]	; (8007080 <_isatty_r+0x1c>)
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7fa fc41 	bl	80018f6 <_isatty>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_isatty_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_isatty_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	200004a4 	.word	0x200004a4

08007084 <_sbrk_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	2300      	movs	r3, #0
 8007088:	4d05      	ldr	r5, [pc, #20]	; (80070a0 <_sbrk_r+0x1c>)
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7fa fc48 	bl	8001924 <_sbrk>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_sbrk_r+0x1a>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_sbrk_r+0x1a>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	200004a4 	.word	0x200004a4

080070a4 <memchr>:
 80070a4:	4603      	mov	r3, r0
 80070a6:	b510      	push	{r4, lr}
 80070a8:	b2c9      	uxtb	r1, r1
 80070aa:	4402      	add	r2, r0
 80070ac:	4293      	cmp	r3, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	d101      	bne.n	80070b6 <memchr+0x12>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e003      	b.n	80070be <memchr+0x1a>
 80070b6:	7804      	ldrb	r4, [r0, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	428c      	cmp	r4, r1
 80070bc:	d1f6      	bne.n	80070ac <memchr+0x8>
 80070be:	bd10      	pop	{r4, pc}

080070c0 <_init>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	bf00      	nop
 80070c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c6:	bc08      	pop	{r3}
 80070c8:	469e      	mov	lr, r3
 80070ca:	4770      	bx	lr

080070cc <_fini>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	bf00      	nop
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr
