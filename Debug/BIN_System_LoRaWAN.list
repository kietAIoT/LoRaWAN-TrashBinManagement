
BIN_System_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000068  08004948  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08004948  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d562  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f3  00000000  00000000  0002d636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  0002f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  000305a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018be4  00000000  00000000  0003101a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103d0  00000000  00000000  00049bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a5a4  00000000  00000000  00059fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f78  00000000  00000000  000e4574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e84ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800461c 	.word	0x0800461c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800461c 	.word	0x0800461c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
void KIET_macID();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b5b0      	push	{r4, r5, r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("MAIN==>RUNNIG\n");
 80001d6:	48b7      	ldr	r0, [pc, #732]	; (80004b4 <main+0x2e4>)
 80001d8:	f003 fb7c 	bl	80038d4 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fe6e 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f994 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 fa7e 	bl	80006e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001e8:	f000 f9ee 	bl	80005c8 <MX_I2C2_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 80001ec:	f000 fa1a 	bl	8000624 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 fa4e 	bl	8000690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  KIET_RTC_Init();
 80001f4:	f000 fb0c 	bl	8000810 <KIET_RTC_Init>
  myLoRa = newLoRa();
 80001f8:	4caf      	ldr	r4, [pc, #700]	; (80004b8 <main+0x2e8>)
 80001fa:	463b      	mov	r3, r7
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fe6f 	bl	8002ee0 <newLoRa>
 8000202:	4625      	mov	r5, r4
 8000204:	463c      	mov	r4, r7
 8000206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000212:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  //	LoRa_reset(&myLoRa);

	myLoRa.hSPIx                 = &hspi1;
 8000216:	4ba8      	ldr	r3, [pc, #672]	; (80004b8 <main+0x2e8>)
 8000218:	4aa8      	ldr	r2, [pc, #672]	; (80004bc <main+0x2ec>)
 800021a:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = NSS_GPIO_Port;
 800021c:	4ba6      	ldr	r3, [pc, #664]	; (80004b8 <main+0x2e8>)
 800021e:	4aa8      	ldr	r2, [pc, #672]	; (80004c0 <main+0x2f0>)
 8000220:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = NSS_Pin;
 8000222:	4ba5      	ldr	r3, [pc, #660]	; (80004b8 <main+0x2e8>)
 8000224:	2210      	movs	r2, #16
 8000226:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = RST_GPIO_Port;
 8000228:	4ba3      	ldr	r3, [pc, #652]	; (80004b8 <main+0x2e8>)
 800022a:	4aa6      	ldr	r2, [pc, #664]	; (80004c4 <main+0x2f4>)
 800022c:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RST_Pin;
 800022e:	4ba2      	ldr	r3, [pc, #648]	; (80004b8 <main+0x2e8>)
 8000230:	2201      	movs	r2, #1
 8000232:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port			 = DIO0_GPIO_Port;
 8000234:	4ba0      	ldr	r3, [pc, #640]	; (80004b8 <main+0x2e8>)
 8000236:	4aa2      	ldr	r2, [pc, #648]	; (80004c0 <main+0x2f0>)
 8000238:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin				 = DIO0_Pin;
 800023a:	4b9f      	ldr	r3, [pc, #636]	; (80004b8 <main+0x2e8>)
 800023c:	2202      	movs	r2, #2
 800023e:	829a      	strh	r2, [r3, #20]
	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000240:	4b9d      	ldr	r3, [pc, #628]	; (80004b8 <main+0x2e8>)
 8000242:	f240 12b1 	movw	r2, #433	; 0x1b1
 8000246:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000248:	4b9b      	ldr	r3, [pc, #620]	; (80004b8 <main+0x2e8>)
 800024a:	2207      	movs	r2, #7
 800024c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth			 = BW_125KHz;				  // default = BW_125KHz
 8000250:	4b99      	ldr	r3, [pc, #612]	; (80004b8 <main+0x2e8>)
 8000252:	2207      	movs	r2, #7
 8000254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate				 = CR_4_5;						// default = CR_4_5
 8000258:	4b97      	ldr	r3, [pc, #604]	; (80004b8 <main+0x2e8>)
 800025a:	2201      	movs	r2, #1
 800025c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power				 = POWER_11db;				// default = 20db
 8000260:	4b95      	ldr	r3, [pc, #596]	; (80004b8 <main+0x2e8>)
 8000262:	22f6      	movs	r2, #246	; 0xf6
 8000264:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000268:	4b93      	ldr	r3, [pc, #588]	; (80004b8 <main+0x2e8>)
 800026a:	2278      	movs	r2, #120	; 0x78
 800026c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble				 = 8;		  					// default = 8;
 8000270:	4b91      	ldr	r3, [pc, #580]	; (80004b8 <main+0x2e8>)
 8000272:	2208      	movs	r2, #8
 8000274:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000276:	4890      	ldr	r0, [pc, #576]	; (80004b8 <main+0x2e8>)
 8000278:	f002 fe5b 	bl	8002f32 <LoRa_reset>

	uint16_t loraStatus= LoRa_init(&myLoRa);
 800027c:	488e      	ldr	r0, [pc, #568]	; (80004b8 <main+0x2e8>)
 800027e:	f003 f962 	bl	8003546 <LoRa_init>
 8000282:	4603      	mov	r3, r0
 8000284:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (uint8_t i = 0; i<= 127; i++) {
 8000286:	2300      	movs	r3, #0
 8000288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800028c:	e012      	b.n	80002b4 <main+0xe4>
		printf("%i--%d\n",i,LoRa_read(&myLoRa, i));
 800028e:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000296:	4619      	mov	r1, r3
 8000298:	4887      	ldr	r0, [pc, #540]	; (80004b8 <main+0x2e8>)
 800029a:	f003 f80f 	bl	80032bc <LoRa_read>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4621      	mov	r1, r4
 80002a4:	4888      	ldr	r0, [pc, #544]	; (80004c8 <main+0x2f8>)
 80002a6:	f003 faa7 	bl	80037f8 <iprintf>
	for (uint8_t i = 0; i<= 127; i++) {
 80002aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80002ae:	3301      	adds	r3, #1
 80002b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80002b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	dae8      	bge.n	800028e <main+0xbe>
	}

	if (loraStatus==LORA_OK) {
 80002bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002be:	2bc8      	cmp	r3, #200	; 0xc8
 80002c0:	d10d      	bne.n	80002de <main+0x10e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	487f      	ldr	r0, [pc, #508]	; (80004c4 <main+0x2f4>)
 80002c8:	f001 f910 	bl	80014ec <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80002cc:	2064      	movs	r0, #100	; 0x64
 80002ce:	f000 fe57 	bl	8000f80 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2120      	movs	r1, #32
 80002d6:	487b      	ldr	r0, [pc, #492]	; (80004c4 <main+0x2f4>)
 80002d8:	f001 f908 	bl	80014ec <HAL_GPIO_WritePin>
 80002dc:	e01c      	b.n	8000318 <main+0x148>
	} else {
		for (uint8_t i = 0; i<= 10; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80002e4:	e014      	b.n	8000310 <main+0x140>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	4876      	ldr	r0, [pc, #472]	; (80004c4 <main+0x2f4>)
 80002ec:	f001 f8fe 	bl	80014ec <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 fe45 	bl	8000f80 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	4872      	ldr	r0, [pc, #456]	; (80004c4 <main+0x2f4>)
 80002fc:	f001 f8f6 	bl	80014ec <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000300:	2064      	movs	r0, #100	; 0x64
 8000302:	f000 fe3d 	bl	8000f80 <HAL_Delay>
		for (uint8_t i = 0; i<= 10; i++) {
 8000306:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800030a:	3301      	adds	r3, #1
 800030c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000310:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000314:	2b0a      	cmp	r3, #10
 8000316:	d9e6      	bls.n	80002e6 <main+0x116>
		}
	}
	printf("CHECK POINT 5\n");
 8000318:	486c      	ldr	r0, [pc, #432]	; (80004cc <main+0x2fc>)
 800031a:	f003 fadb 	bl	80038d4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("#ORG# I AM RUNNING!-!\n");
 800031e:	486c      	ldr	r0, [pc, #432]	; (80004d0 <main+0x300>)
 8000320:	f003 fad8 	bl	80038d4 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8000324:	4b6b      	ldr	r3, [pc, #428]	; (80004d4 <main+0x304>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a6a      	ldr	r2, [pc, #424]	; (80004d4 <main+0x304>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6013      	str	r3, [r2, #0]

	  /*Do somthing when WAKUP*/

	  KIET_readSensor();
 8000330:	f000 fbb2 	bl	8000a98 <KIET_readSensor>
	  KIET_encryptData();
 8000334:	f000 fbb6 	bl	8000aa4 <KIET_encryptData>
	  KIET_macLayer();
 8000338:	f000 fbba 	bl	8000ab0 <KIET_macLayer>
	  KIET_macID();
 800033c:	f000 fbbe 	bl	8000abc <KIET_macID>
	  /*Create Data;*/
	  send_data[0] = 0x30; // MY ADDRESS
 8000340:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <main+0x308>)
 8000342:	2230      	movs	r2, #48	; 0x30
 8000344:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<26; i++) send_data[i+1] = 48+i;
 8000346:	2300      	movs	r3, #0
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
 800034a:	e00a      	b.n	8000362 <main+0x192>
 800034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800034e:	b2da      	uxtb	r2, r3
 8000350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000352:	3301      	adds	r3, #1
 8000354:	3230      	adds	r2, #48	; 0x30
 8000356:	b2d1      	uxtb	r1, r2
 8000358:	4a5f      	ldr	r2, [pc, #380]	; (80004d8 <main+0x308>)
 800035a:	54d1      	strb	r1, [r2, r3]
 800035c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800035e:	3301      	adds	r3, #1
 8000360:	63bb      	str	r3, [r7, #56]	; 0x38
 8000362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000364:	2b19      	cmp	r3, #25
 8000366:	ddf1      	ble.n	800034c <main+0x17c>

	  /*Transmit Data*/
		  for (uint8_t i; i < NUM_OF_TIME_TRANSMIT; i++) {
 8000368:	e02a      	b.n	80003c0 <main+0x1f0>
		  	  uint8_t flag = LoRa_transmit(&myLoRa, send_data, 4, 1000);
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	2204      	movs	r2, #4
 8000370:	4959      	ldr	r1, [pc, #356]	; (80004d8 <main+0x308>)
 8000372:	4851      	ldr	r0, [pc, #324]	; (80004b8 <main+0x2e8>)
 8000374:	f003 f82a 	bl	80033cc <LoRa_transmit>
 8000378:	4603      	mov	r3, r0
 800037a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  if (flag) {
 800037e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000382:	2b00      	cmp	r3, #0
 8000384:	d010      	beq.n	80003a8 <main+0x1d8>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000386:	2201      	movs	r2, #1
 8000388:	2120      	movs	r1, #32
 800038a:	484e      	ldr	r0, [pc, #312]	; (80004c4 <main+0x2f4>)
 800038c:	f001 f8ae 	bl	80014ec <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 fdf5 	bl	8000f80 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	484a      	ldr	r0, [pc, #296]	; (80004c4 <main+0x2f4>)
 800039c:	f001 f8a6 	bl	80014ec <HAL_GPIO_WritePin>
					HAL_Delay(100);
 80003a0:	2064      	movs	r0, #100	; 0x64
 80003a2:	f000 fded 	bl	8000f80 <HAL_Delay>
 80003a6:	e002      	b.n	80003ae <main+0x1de>
			  } else {printf("Failed to transmit data\n");}
 80003a8:	484c      	ldr	r0, [pc, #304]	; (80004dc <main+0x30c>)
 80003aa:	f003 fa93 	bl	80038d4 <puts>
			  HAL_Delay(TIME_TRANSMIT);
 80003ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b2:	f000 fde5 	bl	8000f80 <HAL_Delay>
		  for (uint8_t i; i < NUM_OF_TIME_TRANSMIT; i++) {
 80003b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80003ba:	3301      	adds	r3, #1
 80003bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80003c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d9d0      	bls.n	800036a <main+0x19a>
		  }
	  HAL_Delay(2000);
 80003c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003cc:	f000 fdd8 	bl	8000f80 <HAL_Delay>
	  /*Receive Data*/
	  LoRa_receive(&myLoRa, read_data, 128);
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	4943      	ldr	r1, [pc, #268]	; (80004e0 <main+0x310>)
 80003d4:	4838      	ldr	r0, [pc, #224]	; (80004b8 <main+0x2e8>)
 80003d6:	f003 f856 	bl	8003486 <LoRa_receive>
	  printf("RECEIVE\n");
 80003da:	4842      	ldr	r0, [pc, #264]	; (80004e4 <main+0x314>)
 80003dc:	f003 fa7a 	bl	80038d4 <puts>
	  if (read_data[0] != 0) {
 80003e0:	4b3f      	ldr	r3, [pc, #252]	; (80004e0 <main+0x310>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d017      	beq.n	8000418 <main+0x248>
				printf("Receive Data\n");
 80003e8:	483f      	ldr	r0, [pc, #252]	; (80004e8 <main+0x318>)
 80003ea:	f003 fa73 	bl	80038d4 <puts>
				printf("%ul",read_data[0]);
 80003ee:	4b3c      	ldr	r3, [pc, #240]	; (80004e0 <main+0x310>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	4619      	mov	r1, r3
 80003f4:	483d      	ldr	r0, [pc, #244]	; (80004ec <main+0x31c>)
 80003f6:	f003 f9ff 	bl	80037f8 <iprintf>
				printf("%c", read_data[0]);
 80003fa:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <main+0x310>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 fa0c 	bl	800381c <putchar>
				printf("%c", read_data[1]);
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <main+0x310>)
 8000406:	785b      	ldrb	r3, [r3, #1]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fa07 	bl	800381c <putchar>
				memset(read_data, 0, sizeof(read_data));
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	2100      	movs	r1, #0
 8000412:	4833      	ldr	r0, [pc, #204]	; (80004e0 <main+0x310>)
 8000414:	f003 fb3e 	bl	8003a94 <memset>
	  } else {
				;
	  }

	  /*Draf Debug*/
	  KIET_ToggleLED();
 8000418:	f000 fb22 	bl	8000a60 <KIET_ToggleLED>
	  HAL_Delay(100);
 800041c:	2064      	movs	r0, #100	; 0x64
 800041e:	f000 fdaf 	bl	8000f80 <HAL_Delay>
	  	printf("CHECK RTC_CRL_ALRG %d\n", READ_BIT(RTC->CRL, RTC_CRL_ALRF));
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <main+0x320>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	4619      	mov	r1, r3
 800042c:	4831      	ldr	r0, [pc, #196]	; (80004f4 <main+0x324>)
 800042e:	f003 f9e3 	bl	80037f8 <iprintf>
	  	printf("CHEKC RTC_ DIVH %d, and DIVL: %d\n ", RTC->DIVH ,RTC->DIVL);
 8000432:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <main+0x320>)
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <main+0x320>)
 8000438:	6952      	ldr	r2, [r2, #20]
 800043a:	4619      	mov	r1, r3
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <main+0x328>)
 800043e:	f003 f9db 	bl	80037f8 <iprintf>
	  	printf("CHEKC RTC_ CNTH  %d, and CNTL: %d\n" , RTC->CNTH ,RTC->CNTL);
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <main+0x320>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a2a      	ldr	r2, [pc, #168]	; (80004f0 <main+0x320>)
 8000448:	69d2      	ldr	r2, [r2, #28]
 800044a:	4619      	mov	r1, r3
 800044c:	482b      	ldr	r0, [pc, #172]	; (80004fc <main+0x32c>)
 800044e:	f003 f9d3 	bl	80037f8 <iprintf>
	  	printf("CHEKC RTC_ ANRL: %d, and ANRH: %d\n" , RTC->ALRH ,RTC->ALRL);
 8000452:	4b27      	ldr	r3, [pc, #156]	; (80004f0 <main+0x320>)
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	4a26      	ldr	r2, [pc, #152]	; (80004f0 <main+0x320>)
 8000458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800045a:	4619      	mov	r1, r3
 800045c:	4828      	ldr	r0, [pc, #160]	; (8000500 <main+0x330>)
 800045e:	f003 f9cb 	bl	80037f8 <iprintf>
	  	if (READ_BIT(RTC->CRL, RTC_CRL_ALRF)!=0) {
 8000462:	4b23      	ldr	r3, [pc, #140]	; (80004f0 <main+0x320>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f003 0302 	and.w	r3, r3, #2
 800046a:	2b00      	cmp	r3, #0
 800046c:	d019      	beq.n	80004a2 <main+0x2d2>
	  		printf("Alter alrm");
 800046e:	4825      	ldr	r0, [pc, #148]	; (8000504 <main+0x334>)
 8000470:	f003 f9c2 	bl	80037f8 <iprintf>
	  		CLEAR_BIT(RTC->CRL, RTC_CRL_ALRF);
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <main+0x320>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	4a1d      	ldr	r2, [pc, #116]	; (80004f0 <main+0x320>)
 800047a:	f023 0302 	bic.w	r3, r3, #2
 800047e:	6053      	str	r3, [r2, #4]
	  		KIET_revise();
 8000480:	f000 fab0 	bl	80009e4 <KIET_revise>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <main+0x2f4>)
 800048c:	f001 f82e 	bl	80014ec <HAL_GPIO_WritePin>
	  		HAL_Delay(100);
 8000490:	2064      	movs	r0, #100	; 0x64
 8000492:	f000 fd75 	bl	8000f80 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <main+0x2f4>)
 800049e:	f001 f825 	bl	80014ec <HAL_GPIO_WritePin>
	  	}
	  /*Reset counter to zero*/
	  KIET_revise();
 80004a2:	f000 fa9f 	bl	80009e4 <KIET_revise>
	  printf("#GRN#GO TO STAND BY!-!\n");
 80004a6:	4818      	ldr	r0, [pc, #96]	; (8000508 <main+0x338>)
 80004a8:	f003 fa14 	bl	80038d4 <puts>
	  KIET_EnterStandBy();
 80004ac:	f000 fae4 	bl	8000a78 <KIET_EnterStandBy>
	  printf("#ORG# I AM RUNNING!-!\n");
 80004b0:	e735      	b.n	800031e <main+0x14e>
 80004b2:	bf00      	nop
 80004b4:	08004634 	.word	0x08004634
 80004b8:	20000178 	.word	0x20000178
 80004bc:	200000d8 	.word	0x200000d8
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	08004644 	.word	0x08004644
 80004cc:	0800464c 	.word	0x0800464c
 80004d0:	0800465c 	.word	0x0800465c
 80004d4:	40007000 	.word	0x40007000
 80004d8:	20000224 	.word	0x20000224
 80004dc:	08004674 	.word	0x08004674
 80004e0:	200001a4 	.word	0x200001a4
 80004e4:	0800468c 	.word	0x0800468c
 80004e8:	08004694 	.word	0x08004694
 80004ec:	080046a4 	.word	0x080046a4
 80004f0:	40002800 	.word	0x40002800
 80004f4:	080046a8 	.word	0x080046a8
 80004f8:	080046c0 	.word	0x080046c0
 80004fc:	080046e4 	.word	0x080046e4
 8000500:	08004708 	.word	0x08004708
 8000504:	0800472c 	.word	0x0800472c
 8000508:	08004738 	.word	0x08004738

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 faba 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800053c:	2309      	movs	r3, #9
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800054e:	2301      	movs	r3, #1
 8000550:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f982 	bl	8001870 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000572:	f000 fab7 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000586:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fbee 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 faa1 	bl	8000ae4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005a2:	2301      	movs	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fd6e 	bl	8002090 <HAL_RCCEx_PeriphCLKConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ba:	f000 fa93 	bl	8000ae4 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C2_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C2_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C2_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C2_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C2_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C2_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C2_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C2_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C2_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C2_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C2_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C2_Init+0x50>)
 8000606:	f000 ffbb 	bl	8001580 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 fa68 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000084 	.word	0x20000084
 800061c:	40005800 	.word	0x40005800
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_SPI1_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_SPI1_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_SPI1_Init+0x64>)
 8000630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI1_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI1_Init+0x64>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI1_Init+0x64>)
 8000658:	2210      	movs	r2, #16
 800065a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI1_Init+0x64>)
 8000670:	220a      	movs	r2, #10
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SPI1_Init+0x64>)
 8000676:	f001 fdc1 	bl	80021fc <HAL_SPI_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 fa30 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000d8 	.word	0x200000d8
 800068c:	40013000 	.word	0x40013000

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART1_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c8:	f002 fb2c 	bl	8002d24 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 fa07 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000130 	.word	0x20000130
 80006e0:	40013800 	.word	0x40013800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	4b41      	ldr	r3, [pc, #260]	; (8000800 <MX_GPIO_Init+0x11c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a40      	ldr	r2, [pc, #256]	; (8000800 <MX_GPIO_Init+0x11c>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_GPIO_Init+0x11c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_GPIO_Init+0x11c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a3a      	ldr	r2, [pc, #232]	; (8000800 <MX_GPIO_Init+0x11c>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b38      	ldr	r3, [pc, #224]	; (8000800 <MX_GPIO_Init+0x11c>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0320 	and.w	r3, r3, #32
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b35      	ldr	r3, [pc, #212]	; (8000800 <MX_GPIO_Init+0x11c>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a34      	ldr	r2, [pc, #208]	; (8000800 <MX_GPIO_Init+0x11c>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_GPIO_Init+0x11c>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_GPIO_Init+0x11c>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <MX_GPIO_Init+0x11c>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_GPIO_Init+0x11c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4829      	ldr	r0, [pc, #164]	; (8000804 <MX_GPIO_Init+0x120>)
 800075e:	f000 fec5 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	4828      	ldr	r0, [pc, #160]	; (8000808 <MX_GPIO_Init+0x124>)
 8000768:	f000 fec0 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|GPIO_PIN_7|GPIO_PIN_8
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000772:	4825      	ldr	r0, [pc, #148]	; (8000808 <MX_GPIO_Init+0x124>)
 8000774:	f000 feba 	bl	80014ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0x128>)
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x120>)
 800078c:	f000 fd2a 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000790:	2310      	movs	r3, #16
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <MX_GPIO_Init+0x120>)
 80007a8:	f000 fd1c 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <MX_GPIO_Init+0x124>)
 80007c4:	f000 fd0e 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GPIO_PIN_7|GPIO_PIN_8
 80007c8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80007cc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x124>)
 80007e2:	f000 fcff 	bl	80011e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	2007      	movs	r0, #7
 80007ec:	f000 fcc3 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007f0:	2007      	movs	r0, #7
 80007f2:	f000 fcdc 	bl	80011ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800
 8000808:	40010c00 	.word	0x40010c00
 800080c:	10110000 	.word	0x10110000

08000810 <KIET_RTC_Init>:

/* USER CODE BEGIN 4 */

void KIET_RTC_Init(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	/** @note */

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800082c:	61d3      	str	r3, [r2, #28]

	SET_BIT(PWR->CR, PWR_CR_DBP);
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <KIET_RTC_Init+0xac>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a22      	ldr	r2, [pc, #136]	; (80008bc <KIET_RTC_Init+0xac>)
 8000834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000838:	6013      	str	r3, [r2, #0]

	printf("CHEKC POINT -1: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY));
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	4619      	mov	r1, r3
 8000844:	481e      	ldr	r0, [pc, #120]	; (80008c0 <KIET_RTC_Init+0xb0>)
 8000846:	f002 ffd7 	bl	80037f8 <iprintf>
	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6213      	str	r3, [r2, #32]
	uint8_t count = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]

	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 800085a:	e009      	b.n	8000870 <KIET_RTC_Init+0x60>
		count++;
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3301      	adds	r3, #1
 8000860:	71fb      	strb	r3, [r7, #7]
		if (count>100) {
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b64      	cmp	r3, #100	; 0x64
 8000866:	d903      	bls.n	8000870 <KIET_RTC_Init+0x60>
			printf("Have a problem for connecting the External Crystal Clock!");
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <KIET_RTC_Init+0xb4>)
 800086a:	f002 ffc5 	bl	80037f8 <iprintf>
			break;
 800086e:	e005      	b.n	800087c <KIET_RTC_Init+0x6c>
	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0ef      	beq.n	800085c <KIET_RTC_Init+0x4c>
		} else;
	}

	SET_BIT(RCC->BDCR, 9);
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800087e:	6a1b      	ldr	r3, [r3, #32]
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000882:	f043 0309 	orr.w	r3, r3, #9
 8000886:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(RCC->BDCR, 8);
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800088a:	6a1b      	ldr	r3, [r3, #32]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800088e:	f023 0308 	bic.w	r3, r3, #8
 8000892:	6213      	str	r3, [r2, #32]
	SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <KIET_RTC_Init+0xa8>)
 8000896:	6a1b      	ldr	r3, [r3, #32]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <KIET_RTC_Init+0xa8>)
 800089a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089e:	6213      	str	r3, [r2, #32]
	printf("CHEKC POINT -1: %d\n", RCC->BDCR);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <KIET_RTC_Init+0xa8>)
 80008a2:	6a1b      	ldr	r3, [r3, #32]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <KIET_RTC_Init+0xb0>)
 80008a8:	f002 ffa6 	bl	80037f8 <iprintf>
	 * 00: No clock
	 * 01: LSE oscillator clock used as RTC clock
	 * 10: LSI oscillator clock used as RTC clock
	 * 11: HSE oscillator clock divided by 128 used as RTC clock*/

	KIET_configure_rtc_register();
 80008ac:	f000 f80c 	bl	80008c8 <KIET_configure_rtc_register>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40007000 	.word	0x40007000
 80008c0:	08004750 	.word	0x08004750
 80008c4:	08004764 	.word	0x08004764

080008c8 <KIET_configure_rtc_register>:



void KIET_configure_rtc_register() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* 1. Poll RTOFF, wait until its value goes to ‘1
	 * 2. Set the CNF bit to enter configuration mode
	 * 3. Write to one or more RTC registers
	 * 4. Clear the CNF bit to exit configuration mode
	 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
	printf("CHEKC POINT 0: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)); //OKEE ==> VẤn đ�? ở CLOK chưa được kết nối vào
 80008cc:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <KIET_configure_rtc_register+0xf4>)
 80008ce:	6a1b      	ldr	r3, [r3, #32]
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	4619      	mov	r1, r3
 80008d6:	483a      	ldr	r0, [pc, #232]	; (80009c0 <KIET_configure_rtc_register+0xf8>)
 80008d8:	f002 ff8e 	bl	80037f8 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 80008dc:	e002      	b.n	80008e4 <KIET_configure_rtc_register+0x1c>
 80008de:	4839      	ldr	r0, [pc, #228]	; (80009c4 <KIET_configure_rtc_register+0xfc>)
 80008e0:	f002 fff8 	bl	80038d4 <puts>
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f6      	beq.n	80008de <KIET_configure_rtc_register+0x16>
	SET_BIT(RTC->CRL, RTC_CRL_CNF);
 80008f0:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	4a34      	ldr	r2, [pc, #208]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 1: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0320 	and.w	r3, r3, #32
 8000904:	4619      	mov	r1, r3
 8000906:	4831      	ldr	r0, [pc, #196]	; (80009cc <KIET_configure_rtc_register+0x104>)
 8000908:	f002 ff76 	bl	80037f8 <iprintf>
	/*Begin for writing to RTC Register - Write one or more RTC register*/
	RTC->PRLH = 0U;
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 0x7FFFU;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000914:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000918:	60da      	str	r2, [r3, #12]
	printf("CHEKC POINT 2: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	4619      	mov	r1, r3
 8000924:	482a      	ldr	r0, [pc, #168]	; (80009d0 <KIET_configure_rtc_register+0x108>)
 8000926:	f002 ff67 	bl	80037f8 <iprintf>
	RTC->DIVH = 0x0000U;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
	RTC->DIVL = 0x8000U;
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000936:	615a      	str	r2, [r3, #20]
	printf("CHEKC POINT 3: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	4619      	mov	r1, r3
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <KIET_configure_rtc_register+0x10c>)
 8000944:	f002 ff58 	bl	80037f8 <iprintf>
	RTC->CNTH = 0x0000U;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
	RTC->CNTL = 0x0000U;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]

	RTC->ALRH = 0x0000U;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
	RTC->ALRL = 0x000FU;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800095c:	220f      	movs	r2, #15
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	6013      	str	r3, [r2, #0]
	SET_BIT(RTC->CRH, RTC_CRH_OWIE);
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6013      	str	r3, [r2, #0]
	//	SET_BIT(RTC->CRH, RTC_CRH_SECIE);
	/*End of writing to RTC register*/
	CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 800097e:	f023 0310 	bic.w	r3, r3, #16
 8000982:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 4: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0320 	and.w	r3, r3, #32
 800098c:	4619      	mov	r1, r3
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <KIET_configure_rtc_register+0x110>)
 8000990:	f002 ff32 	bl	80037f8 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 8000994:	e007      	b.n	80009a6 <KIET_configure_rtc_register+0xde>
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	4619      	mov	r1, r3
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <KIET_configure_rtc_register+0x114>)
 80009a2:	f002 ff29 	bl	80037f8 <iprintf>
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <KIET_configure_rtc_register+0x100>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f1      	beq.n	8000996 <KIET_configure_rtc_register+0xce>
	printf("Done configuration RTC\n");
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <KIET_configure_rtc_register+0x118>)
 80009b4:	f002 ff8e 	bl	80038d4 <puts>

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	080047a0 	.word	0x080047a0
 80009c4:	080047b4 	.word	0x080047b4
 80009c8:	40002800 	.word	0x40002800
 80009cc:	080047c8 	.word	0x080047c8
 80009d0:	080047dc 	.word	0x080047dc
 80009d4:	080047f0 	.word	0x080047f0
 80009d8:	08004804 	.word	0x08004804
 80009dc:	08004818 	.word	0x08004818
 80009e0:	0800483c 	.word	0x0800483c

080009e4 <KIET_revise>:


void KIET_revise() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 80009e8:	e002      	b.n	80009f0 <KIET_revise+0xc>
 80009ea:	481a      	ldr	r0, [pc, #104]	; (8000a54 <KIET_revise+0x70>)
 80009ec:	f002 ff72 	bl	80038d4 <puts>
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <KIET_revise+0x74>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f6      	beq.n	80009ea <KIET_revise+0x6>
		SET_BIT(RTC->CRL, RTC_CRL_CNF);
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <KIET_revise+0x74>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <KIET_revise+0x74>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6053      	str	r3, [r2, #4]
		/*Begin for writing to RTC Register - Write one or more RTC register*/
		RTC->DIVH = 0x0000U;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <KIET_revise+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
		RTC->DIVL = 0x8000U;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <KIET_revise+0x74>)
 8000a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a14:	615a      	str	r2, [r3, #20]
		RTC->CNTH = 0x0000U;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <KIET_revise+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
		RTC->CNTL = 0x0000U;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <KIET_revise+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
		/*End of writing to RTC register*/
		CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <KIET_revise+0x74>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <KIET_revise+0x74>)
 8000a28:	f023 0310 	bic.w	r3, r3, #16
 8000a2c:	6053      	str	r3, [r2, #4]
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 8000a2e:	e007      	b.n	8000a40 <KIET_revise+0x5c>
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <KIET_revise+0x74>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4808      	ldr	r0, [pc, #32]	; (8000a5c <KIET_revise+0x78>)
 8000a3c:	f002 fedc 	bl	80037f8 <iprintf>
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <KIET_revise+0x74>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0320 	and.w	r3, r3, #32
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f1      	beq.n	8000a30 <KIET_revise+0x4c>
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	080047b4 	.word	0x080047b4
 8000a58:	40002800 	.word	0x40002800
 8000a5c:	08004818 	.word	0x08004818

08000a60 <KIET_ToggleLED>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
}

void KIET_ToggleLED() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <KIET_ToggleLED+0x14>)
 8000a6a:	f000 fd57 	bl	800151c <HAL_GPIO_TogglePin>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <KIET_EnterStandBy>:

void KIET_EnterStandBy() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	printf("Entering StandBy");
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <KIET_EnterStandBy+0x1c>)
 8000a7e:	f002 febb 	bl	80037f8 <iprintf>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000a82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a86:	f000 febf 	bl	8001808 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 8000a8a:	f000 fed9 	bl	8001840 <HAL_PWR_EnterSTANDBYMode>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08004854 	.word	0x08004854

08000a98 <KIET_readSensor>:

void KIET_readSensor() {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	;
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <KIET_encryptData>:

void KIET_encryptData() {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	;
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <KIET_macLayer>:

void KIET_macLayer() {
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	;
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <KIET_macID>:

void KIET_macID() {
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	;
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
//		HAL_Delay(100);
//		LoRa_receive(&myLoRa, read_data, 128);
//	} else {
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//	}
	printf("#RED# Callback");
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x18>)
 8000ad4:	f002 fe90 	bl	80037f8 <iprintf>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	08004868 	.word	0x08004868

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_MspInit+0x5c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <HAL_MspInit+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_MspInit+0x60>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_MspInit+0x60>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000

08000b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <HAL_I2C_MspInit+0x74>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d124      	bne.n	8000bbe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_I2C_MspInit+0x78>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <HAL_I2C_MspInit+0x78>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_I2C_MspInit+0x78>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <HAL_I2C_MspInit+0x7c>)
 8000ba2:	f000 fb1f 	bl	80011e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_I2C_MspInit+0x78>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_I2C_MspInit+0x78>)
 8000bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_I2C_MspInit+0x78>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40005800 	.word	0x40005800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d12f      	bne.n	8000c54 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c24:	23a0      	movs	r3, #160	; 0xa0
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000c38:	f000 fad4 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000c50:	f000 fac8 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40013000 	.word	0x40013000
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d131      	bne.n	8000cec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000cce:	f000 fa89 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000ce8:	f000 fa7c 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f8ff 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f000 fbfc 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00a      	b.n	8000d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d6e:	f3af 8000 	nop.w
 8000d72:	4601      	mov	r1, r0
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf0      	blt.n	8000d6e <_read+0x12>
  }

  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <_isatty>:

int _isatty(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f002 fe82 	bl	8003b30 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20005000 	.word	0x20005000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	200002a4 	.word	0x200002a4
 8000e60:	200003f8 	.word	0x200003f8

08000e64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff fff8 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e76:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e8c:	4c09      	ldr	r4, [pc, #36]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f002 fe4f 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9e:	f7ff f997 	bl	80001d0 <main>
  bx lr
 8000ea2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eac:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 8000eb0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb4:	200003f8 	.word	0x200003f8

08000eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_2_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x28>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x28>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f947 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fe0a 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f95f 	bl	80011ca <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f927 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_IncTick+0x20>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <HAL_IncTick+0x20>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200002a8 	.word	0x200002a8

08000f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <HAL_GetTick+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	200002a8 	.word	0x200002a8

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff0 	bl	8000f6c <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffe0 	bl	8000f6c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4906      	ldr	r1, [pc, #24]	; (8001060 <__NVIC_EnableIRQ+0x34>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SysTick_Config>:
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff90 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff2d 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff42 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff90 	bl	80010b8 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5f 	bl	8001064 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff35 	bl	800102c <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b08b      	sub	sp, #44	; 0x2c
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e169      	b.n	80014cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011f8:	2201      	movs	r2, #1
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8158 	bne.w	80014c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a9a      	ldr	r2, [pc, #616]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d05e      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001220:	4a98      	ldr	r2, [pc, #608]	; (8001484 <HAL_GPIO_Init+0x2a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d875      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001226:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d058      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 800122c:	4a96      	ldr	r2, [pc, #600]	; (8001488 <HAL_GPIO_Init+0x2a4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d86f      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001232:	4a96      	ldr	r2, [pc, #600]	; (800148c <HAL_GPIO_Init+0x2a8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d052      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001238:	4a94      	ldr	r2, [pc, #592]	; (800148c <HAL_GPIO_Init+0x2a8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d869      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800123e:	4a94      	ldr	r2, [pc, #592]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d04c      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001244:	4a92      	ldr	r2, [pc, #584]	; (8001490 <HAL_GPIO_Init+0x2ac>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d863      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800124a:	4a92      	ldr	r2, [pc, #584]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d046      	beq.n	80012de <HAL_GPIO_Init+0xfa>
 8001250:	4a90      	ldr	r2, [pc, #576]	; (8001494 <HAL_GPIO_Init+0x2b0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d85d      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 8001256:	2b12      	cmp	r3, #18
 8001258:	d82a      	bhi.n	80012b0 <HAL_GPIO_Init+0xcc>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d859      	bhi.n	8001312 <HAL_GPIO_Init+0x12e>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <HAL_GPIO_Init+0x80>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	080012df 	.word	0x080012df
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012cb 	.word	0x080012cb
 8001270:	0800130d 	.word	0x0800130d
 8001274:	08001313 	.word	0x08001313
 8001278:	08001313 	.word	0x08001313
 800127c:	08001313 	.word	0x08001313
 8001280:	08001313 	.word	0x08001313
 8001284:	08001313 	.word	0x08001313
 8001288:	08001313 	.word	0x08001313
 800128c:	08001313 	.word	0x08001313
 8001290:	08001313 	.word	0x08001313
 8001294:	08001313 	.word	0x08001313
 8001298:	08001313 	.word	0x08001313
 800129c:	08001313 	.word	0x08001313
 80012a0:	08001313 	.word	0x08001313
 80012a4:	08001313 	.word	0x08001313
 80012a8:	080012c1 	.word	0x080012c1
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	4a79      	ldr	r2, [pc, #484]	; (8001498 <HAL_GPIO_Init+0x2b4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b6:	e02c      	b.n	8001312 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e029      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	3304      	adds	r3, #4
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e024      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	3308      	adds	r3, #8
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e01f      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	330c      	adds	r3, #12
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e01a      	b.n	8001314 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012e6:	2304      	movs	r3, #4
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e013      	b.n	8001314 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	611a      	str	r2, [r3, #16]
          break;
 80012fe:	e009      	b.n	8001314 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001300:	2308      	movs	r3, #8
 8001302:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	615a      	str	r2, [r3, #20]
          break;
 800130a:	e003      	b.n	8001314 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x130>
          break;
 8001312:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d801      	bhi.n	800131e <HAL_GPIO_Init+0x13a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	e001      	b.n	8001322 <HAL_GPIO_Init+0x13e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2bff      	cmp	r3, #255	; 0xff
 8001328:	d802      	bhi.n	8001330 <HAL_GPIO_Init+0x14c>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x152>
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3b08      	subs	r3, #8
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	210f      	movs	r1, #15
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	6a39      	ldr	r1, [r7, #32]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	431a      	orrs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80b1 	beq.w	80014c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x2b8>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_GPIO_Init+0x2b8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <HAL_GPIO_Init+0x2c0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x1ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <HAL_GPIO_Init+0x2c4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1e8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <HAL_GPIO_Init+0x2c8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1e4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <HAL_GPIO_Init+0x2cc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1e0>
 80013c0:	2303      	movs	r3, #3
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e004      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e002      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_GPIO_Init+0x1ee>
 80013d0:	2300      	movs	r3, #0
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	f002 0203 	and.w	r2, r2, #3
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	4093      	lsls	r3, r2
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013e2:	492f      	ldr	r1, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x2bc>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	492c      	ldr	r1, [pc, #176]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4928      	ldr	r1, [pc, #160]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4922      	ldr	r1, [pc, #136]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	491e      	ldr	r1, [pc, #120]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4918      	ldr	r1, [pc, #96]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001464:	4013      	ands	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d021      	beq.n	80014b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	490e      	ldr	r1, [pc, #56]	; (80014b4 <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e021      	b.n	80014c6 <HAL_GPIO_Init+0x2e2>
 8001482:	bf00      	nop
 8001484:	10320000 	.word	0x10320000
 8001488:	10310000 	.word	0x10310000
 800148c:	10220000 	.word	0x10220000
 8001490:	10210000 	.word	0x10210000
 8001494:	10120000 	.word	0x10120000
 8001498:	10110000 	.word	0x10110000
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40011400 	.word	0x40011400
 80014b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <HAL_GPIO_Init+0x304>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	3301      	adds	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f47f ae8e 	bne.w	80011f8 <HAL_GPIO_Init+0x14>
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	372c      	adds	r7, #44	; 0x2c
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	041a      	lsls	r2, r3, #16
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43d9      	mvns	r1, r3
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	400b      	ands	r3, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff faaa 	bl	8000ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e12b      	b.n	80017ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fad4 	bl	8000b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015e4:	f000 fd0e 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a81      	ldr	r2, [pc, #516]	; (80017f4 <HAL_I2C_Init+0x274>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d807      	bhi.n	8001604 <HAL_I2C_Init+0x84>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4a80      	ldr	r2, [pc, #512]	; (80017f8 <HAL_I2C_Init+0x278>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	bf94      	ite	ls
 80015fc:	2301      	movls	r3, #1
 80015fe:	2300      	movhi	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	e006      	b.n	8001612 <HAL_I2C_Init+0x92>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a7d      	ldr	r2, [pc, #500]	; (80017fc <HAL_I2C_Init+0x27c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	bf94      	ite	ls
 800160c:	2301      	movls	r3, #1
 800160e:	2300      	movhi	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0e7      	b.n	80017ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4a78      	ldr	r2, [pc, #480]	; (8001800 <HAL_I2C_Init+0x280>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <HAL_I2C_Init+0x274>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d802      	bhi.n	8001654 <HAL_I2C_Init+0xd4>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3301      	adds	r3, #1
 8001652:	e009      	b.n	8001668 <HAL_I2C_Init+0xe8>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	4a69      	ldr	r2, [pc, #420]	; (8001804 <HAL_I2C_Init+0x284>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	3301      	adds	r3, #1
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800167a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	495c      	ldr	r1, [pc, #368]	; (80017f4 <HAL_I2C_Init+0x274>)
 8001684:	428b      	cmp	r3, r1
 8001686:	d819      	bhi.n	80016bc <HAL_I2C_Init+0x13c>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e59      	subs	r1, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fbb1 f3f3 	udiv	r3, r1, r3
 8001696:	1c59      	adds	r1, r3, #1
 8001698:	f640 73fc 	movw	r3, #4092	; 0xffc
 800169c:	400b      	ands	r3, r1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <HAL_I2C_Init+0x138>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e59      	subs	r1, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b6:	e051      	b.n	800175c <HAL_I2C_Init+0x1dc>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e04f      	b.n	800175c <HAL_I2C_Init+0x1dc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d111      	bne.n	80016e8 <HAL_I2C_Init+0x168>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	440b      	add	r3, r1
 80016d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e012      	b.n	800170e <HAL_I2C_Init+0x18e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e58      	subs	r0, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	0099      	lsls	r1, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x196>
 8001712:	2301      	movs	r3, #1
 8001714:	e022      	b.n	800175c <HAL_I2C_Init+0x1dc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <HAL_I2C_Init+0x1bc>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e58      	subs	r0, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	440b      	add	r3, r1
 800172c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	e00f      	b.n	800175c <HAL_I2C_Init+0x1dc>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	0099      	lsls	r1, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	6809      	ldr	r1, [r1, #0]
 8001760:	4313      	orrs	r3, r2
 8001762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69da      	ldr	r2, [r3, #28]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800178a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6911      	ldr	r1, [r2, #16]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68d2      	ldr	r2, [r2, #12]
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	000186a0 	.word	0x000186a0
 80017f8:	001e847f 	.word	0x001e847f
 80017fc:	003d08ff 	.word	0x003d08ff
 8001800:	431bde83 	.word	0x431bde83
 8001804:	10624dd3 	.word	0x10624dd3

08001808 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800181c:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_PWR_EnableWakeUpPin+0x34>)
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	461a      	mov	r2, r3
 800182e:	2301      	movs	r3, #1
 8001830:	6013      	str	r3, [r2, #0]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	10838020 	.word	0x10838020

08001840 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800185c:	bf30      	wfi
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40007000 	.word	0x40007000
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e272      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8087 	beq.w	800199e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001890:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	d00c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189c:	4b8f      	ldr	r3, [pc, #572]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d112      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
 80018a8:	4b8c      	ldr	r3, [pc, #560]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d10b      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b6:	4b89      	ldr	r3, [pc, #548]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06c      	beq.n	800199c <HAL_RCC_OscConfig+0x12c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d168      	bne.n	800199c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e24c      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x76>
 80018d8:	4b80      	ldr	r3, [pc, #512]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7f      	ldr	r2, [pc, #508]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e02e      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7a      	ldr	r2, [pc, #488]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b78      	ldr	r3, [pc, #480]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a77      	ldr	r2, [pc, #476]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0xbc>
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a71      	ldr	r2, [pc, #452]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6e      	ldr	r2, [pc, #440]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 800192c:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6a      	ldr	r2, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a67      	ldr	r2, [pc, #412]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fb0e 	bl	8000f6c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fb0a 	bl	8000f6c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e200      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xe4>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fafa 	bl	8000f6c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff faf6 	bl	8000f6c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1ec      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x10c>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c0      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4939      	ldr	r1, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff faaf 	bl	8000f6c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff faab 	bl	8000f6c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4927      	ldr	r1, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fa8e 	bl	8000f6c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fa8a 	bl	8000f6c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e180      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03a      	beq.n	8001af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa6e 	bl	8000f6c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fa6a 	bl	8000f6c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e160      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 face 	bl	8002054 <RCC_Delay>
 8001ab8:	e01c      	b.n	8001af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fa54 	bl	8000f6c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	e00f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fa50 	bl	8000f6c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d908      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e146      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	42420000 	.word	0x42420000
 8001ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e9      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a6 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fa11 	bl	8000f6c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fa0d 	bl	8000f6c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e103      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x312>
 8001b74:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x334>
 8001b8a:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x356>
 8001bac:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a57      	ldr	r2, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff f9c1 	bl	8000f6c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff f9bd 	bl	8000f6c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x37e>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f9ab 	bl	8000f6c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff f9a7 	bl	8000f6c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e09b      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d061      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d146      	bne.n	8001cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff f97b 	bl	8000f6c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f977 	bl	8000f6c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e06d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4921      	ldr	r1, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a19      	ldr	r1, [r3, #32]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	491b      	ldr	r1, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f94b 	bl	8000f6c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff f947 	bl	8000f6c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x46a>
 8001cf8:	e035      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff f934 	bl	8000f6c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff f930 	bl	8000f6c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e026      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x498>
 8001d26:	e01e      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e019      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x500>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff f882 	bl	8000f6c <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff f87e 	bl	8000f6c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ffe0 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08004878 	.word	0x08004878
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x30>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x36>
 8001f76:	e027      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	e027      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0c5b      	lsrs	r3, r3, #17
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	fb03 f202 	mul.w	r2, r3, r2
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e004      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	613b      	str	r3, [r7, #16]
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	693b      	ldr	r3, [r7, #16]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	08004890 	.word	0x08004890
 8001fe8:	080048a0 	.word	0x080048a0
 8001fec:	003d0900 	.word	0x003d0900

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff2 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	08004888 	.word	0x08004888

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08004888 	.word	0x08004888

08002054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <RCC_Delay+0x34>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <RCC_Delay+0x38>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0a5b      	lsrs	r3, r3, #9
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002070:	bf00      	nop
  }
  while (Delay --);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <RCC_Delay+0x1c>
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000000 	.word	0x20000000
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d07d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10d      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d118      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e4:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a42      	ldr	r2, [pc, #264]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f0:	f7fe ff3c 	bl	8000f6c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	e008      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f8:	f7fe ff38 	bl	8000f6c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e06d      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02e      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d027      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002134:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800213e:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800214a:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d014      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe ff07 	bl	8000f6c <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe ff03 	bl	8000f6c <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e036      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ee      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4917      	ldr	r1, [pc, #92]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	4313      	orrs	r3, r2
 8002194:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	490b      	ldr	r1, [pc, #44]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
 80021f8:	42420440 	.word	0x42420440

080021fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e076      	b.n	80022fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800221e:	d009      	beq.n	8002234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
 8002226:	e005      	b.n	8002234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fcc0 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	ea42 0103 	orr.w	r1, r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	0c1a      	lsrs	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 0204 	and.w	r2, r2, #4
 80022da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_SPI_Transmit+0x22>
 8002322:	2302      	movs	r3, #2
 8002324:	e12d      	b.n	8002582 <HAL_SPI_Transmit+0x27e>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800232e:	f7fe fe1d 	bl	8000f6c <HAL_GetTick>
 8002332:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d002      	beq.n	800234a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002344:	2302      	movs	r3, #2
 8002346:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002348:	e116      	b.n	8002578 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_SPI_Transmit+0x52>
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	77fb      	strb	r3, [r7, #31]
    goto error;
 800235a:	e10d      	b.n	8002578 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a2:	d10f      	bne.n	80023c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d007      	beq.n	80023e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ea:	d14f      	bne.n	800248c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_Transmit+0xf6>
 80023f4:	8afb      	ldrh	r3, [r7, #22]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d142      	bne.n	8002480 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	1c9a      	adds	r2, r3, #2
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800241e:	e02f      	b.n	8002480 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d112      	bne.n	8002454 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	86da      	strh	r2, [r3, #54]	; 0x36
 8002452:	e015      	b.n	8002480 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002454:	f7fe fd8a 	bl	8000f6c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d803      	bhi.n	800246c <HAL_SPI_Transmit+0x168>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d102      	bne.n	8002472 <HAL_SPI_Transmit+0x16e>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800247e:	e07b      	b.n	8002578 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ca      	bne.n	8002420 <HAL_SPI_Transmit+0x11c>
 800248a:	e050      	b.n	800252e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_SPI_Transmit+0x196>
 8002494:	8afb      	ldrh	r3, [r7, #22]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d144      	bne.n	8002524 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024c0:	e030      	b.n	8002524 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d113      	bne.n	80024f8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80024f6:	e015      	b.n	8002524 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f8:	f7fe fd38 	bl	8000f6c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d803      	bhi.n	8002510 <HAL_SPI_Transmit+0x20c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d102      	bne.n	8002516 <HAL_SPI_Transmit+0x212>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002522:	e029      	b.n	8002578 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1c9      	bne.n	80024c2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fbd8 	bl	8002ce8 <SPI_EndRxTxTransaction>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	77fb      	strb	r3, [r7, #31]
 800256e:	e003      	b.n	8002578 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002580:	7ffb      	ldrb	r3, [r7, #31]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b088      	sub	sp, #32
 800258e:	af02      	add	r7, sp, #8
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ae:	e0fb      	b.n	80027a8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b8:	d112      	bne.n	80025e0 <HAL_SPI_Receive+0x56>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2204      	movs	r2, #4
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f8ef 	bl	80027ba <HAL_SPI_TransmitReceive>
 80025dc:	4603      	mov	r3, r0
 80025de:	e0e8      	b.n	80027b2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_SPI_Receive+0x64>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0e1      	b.n	80027b2 <HAL_SPI_Receive+0x228>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f6:	f7fe fcb9 	bl	8000f6c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_Receive+0x7e>
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800260c:	e0cc      	b.n	80027a8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2204      	movs	r2, #4
 8002612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002654:	d10f      	bne.n	8002676 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d007      	beq.n	8002694 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d16a      	bne.n	8002772 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800269c:	e032      	b.n	8002704 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d115      	bne.n	80026d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f103 020c 	add.w	r2, r3, #12
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026d6:	e015      	b.n	8002704 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026d8:	f7fe fc48 	bl	8000f6c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d803      	bhi.n	80026f0 <HAL_SPI_Receive+0x166>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d102      	bne.n	80026f6 <HAL_SPI_Receive+0x16c>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002702:	e051      	b.n	80027a8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1c7      	bne.n	800269e <HAL_SPI_Receive+0x114>
 800270e:	e035      	b.n	800277c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d113      	bne.n	8002746 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	b292      	uxth	r2, r2
 800272a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002744:	e015      	b.n	8002772 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002746:	f7fe fc11 	bl	8000f6c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d803      	bhi.n	800275e <HAL_SPI_Receive+0x1d4>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d102      	bne.n	8002764 <HAL_SPI_Receive+0x1da>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002770:	e01a      	b.n	80027a8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1c9      	bne.n	8002710 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fa5f 	bl	8002c44 <SPI_EndRxTransaction>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
 800279e:	e003      	b.n	80027a8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b08c      	sub	sp, #48	; 0x30
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027c8:	2301      	movs	r3, #1
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x26>
 80027dc:	2302      	movs	r3, #2
 80027de:	e198      	b.n	8002b12 <HAL_SPI_TransmitReceive+0x358>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e8:	f7fe fbc0 	bl	8000f6c <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002806:	2b01      	cmp	r3, #1
 8002808:	d00f      	beq.n	800282a <HAL_SPI_TransmitReceive+0x70>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002810:	d107      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x68>
 800281a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800281e:	2b04      	cmp	r3, #4
 8002820:	d003      	beq.n	800282a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002828:	e16d      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_SPI_TransmitReceive+0x82>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_SPI_TransmitReceive+0x82>
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002842:	e160      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b04      	cmp	r3, #4
 800284e:	d003      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2205      	movs	r2, #5
 8002854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	887a      	ldrh	r2, [r7, #2]
 800286e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d007      	beq.n	80028ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b4:	d17c      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x10a>
 80028be:	8b7b      	ldrh	r3, [r7, #26]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d16a      	bne.n	800299a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e8:	e057      	b.n	800299a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d11b      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x176>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x176>
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d113      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d119      	bne.n	8002972 <HAL_SPI_TransmitReceive+0x1b8>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d014      	beq.n	8002972 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	b292      	uxth	r2, r2
 8002954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	1c9a      	adds	r2, r3, #2
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800296e:	2301      	movs	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002972:	f7fe fafb 	bl	8000f6c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800297e:	429a      	cmp	r2, r3
 8002980:	d80b      	bhi.n	800299a <HAL_SPI_TransmitReceive+0x1e0>
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d007      	beq.n	800299a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002998:	e0b5      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1a2      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x130>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d19d      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x130>
 80029ae:	e080      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_TransmitReceive+0x204>
 80029b8:	8b7b      	ldrh	r3, [r7, #26]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d16f      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e4:	e05b      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d11c      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x274>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d017      	beq.n	8002a2e <HAL_SPI_TransmitReceive+0x274>
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d114      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d119      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x2b6>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d014      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a70:	f7fe fa7c 	bl	8000f6c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d803      	bhi.n	8002a88 <HAL_SPI_TransmitReceive+0x2ce>
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d102      	bne.n	8002a8e <HAL_SPI_TransmitReceive+0x2d4>
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d107      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a9c:	e033      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d19e      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x22c>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d199      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f916 	bl	8002ce8 <SPI_EndRxTxTransaction>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ace:	e01a      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002afc:	e003      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3730      	adds	r7, #48	; 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b28:	b2db      	uxtb	r3, r3
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b44:	f7fe fa12 	bl	8000f6c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b54:	f7fe fa0a 	bl	8000f6c <HAL_GetTick>
 8002b58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b5a:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	015b      	lsls	r3, r3, #5
 8002b60:	0d1b      	lsrs	r3, r3, #20
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6a:	e054      	b.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d050      	beq.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b74:	f7fe f9fa 	bl	8000f6c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d902      	bls.n	8002b8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d13d      	bne.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d111      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d004      	beq.n	8002bb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d107      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d10f      	bne.n	8002bf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e017      	b.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d19b      	bne.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000

08002c44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c58:	d111      	bne.n	8002c7e <SPI_EndRxTransaction+0x3a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c62:	d004      	beq.n	8002c6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d107      	bne.n	8002c7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c86:	d117      	bne.n	8002cb8 <SPI_EndRxTransaction+0x74>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d112      	bne.n	8002cb8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff ff49 	bl	8002b34 <SPI_WaitFlagStateUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01a      	beq.n	8002cde <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e013      	b.n	8002ce0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f7ff ff36 	bl	8002b34 <SPI_WaitFlagStateUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0220 	orr.w	r2, r3, #32
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e000      	b.n	8002ce0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff ff18 	bl	8002b34 <SPI_WaitFlagStateUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e000      	b.n	8002d1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e042      	b.n	8002dbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd ff8c 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f82b 	bl	8002dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dfe:	f023 030c 	bic.w	r3, r3, #12
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <UART_SetConfig+0x114>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e2c:	f7ff f8fe 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	e002      	b.n	8002e3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7ff f8e6 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002e38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <UART_SetConfig+0x118>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	0119      	lsls	r1, r3, #4
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <UART_SetConfig+0x118>)
 8002e72:	fba3 0302 	umull	r0, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2064      	movs	r0, #100	; 0x64
 8002e7a:	fb00 f303 	mul.w	r3, r0, r3
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	3332      	adds	r3, #50	; 0x32
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <UART_SetConfig+0x118>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e90:	4419      	add	r1, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <UART_SetConfig+0x118>)
 8002eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	3332      	adds	r3, #50	; 0x32
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <UART_SetConfig+0x118>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	440a      	add	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	51eb851f 	.word	0x51eb851f

08002ee0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8002ee0:	b4b0      	push	{r4, r5, r7}
 8002ee2:	b08f      	sub	sp, #60	; 0x3c
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8002ee8:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8002eee:	2307      	movs	r3, #7
 8002ef0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8002f00:	23ff      	movs	r3, #255	; 0xff
 8002f02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8002f06:	2364      	movs	r3, #100	; 0x64
 8002f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	461d      	mov	r5, r3
 8002f14:	f107 040c 	add.w	r4, r7, #12
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002f24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	373c      	adds	r7, #60	; 0x3c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bcb0      	pop	{r4, r5, r7}
 8002f30:	4770      	bx	lr

08002f32 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6898      	ldr	r0, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	899b      	ldrh	r3, [r3, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fe fad1 	bl	80014ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f7fe f818 	bl	8000f80 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6898      	ldr	r0, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	899b      	ldrh	r3, [r3, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fe fac6 	bl	80014ec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002f60:	2064      	movs	r0, #100	; 0x64
 8002f62:	f7fe f80d 	bl	8000f80 <HAL_Delay>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8002f78:	2101      	movs	r1, #1
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f99e 	bl	80032bc <LoRa_read>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73bb      	strb	r3, [r7, #14]
	data = read;
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <LoRa_gotoMode+0x30>
		data = (read & 0xF0) | 0x00;
 8002f8e:	7bbb      	ldrb	r3, [r7, #14]
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	61da      	str	r2, [r3, #28]
 8002f9c:	e03e      	b.n	800301c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <LoRa_gotoMode+0x50>
		data = (read & 0xF0) | 0x01;
 8002fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fa8:	f023 030f 	bic.w	r3, r3, #15
 8002fac:	b25b      	sxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	61da      	str	r2, [r3, #28]
 8002fbc:	e02e      	b.n	800301c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d10c      	bne.n	8002fde <LoRa_gotoMode+0x70>
		data = (read & 0xF0) | 0x03;
 8002fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fc8:	f023 030f 	bic.w	r3, r3, #15
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	f043 0303 	orr.w	r3, r3, #3
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	61da      	str	r2, [r3, #28]
 8002fdc:	e01e      	b.n	800301c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10c      	bne.n	8002ffe <LoRa_gotoMode+0x90>
		data = (read & 0xF0) | 0x05;
 8002fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fe8:	f023 030f 	bic.w	r3, r3, #15
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f043 0305 	orr.w	r3, r3, #5
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2205      	movs	r2, #5
 8002ffa:	61da      	str	r2, [r3, #28]
 8002ffc:	e00e      	b.n	800301c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d10b      	bne.n	800301c <LoRa_gotoMode+0xae>
		data = (read & 0xF0) | 0x06;
 8003004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003008:	f023 030f 	bic.w	r3, r3, #15
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f043 0306 	orr.w	r3, r3, #6
 8003012:	b25b      	sxtb	r3, r3
 8003014:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2206      	movs	r2, #6
 800301a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	461a      	mov	r2, r3
 8003020:	2101      	movs	r1, #1
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f964 	bl	80032f0 <LoRa_write>
	//HAL_Delay(10);
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	889b      	ldrh	r3, [r3, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	4619      	mov	r1, r3
 800304c:	f7fe fa4e 	bl	80014ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6998      	ldr	r0, [r3, #24]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	f7ff f952 	bl	8002304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003060:	bf00      	nop
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fd57 	bl	8002b1a <HAL_SPI_GetState>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d1f7      	bne.n	8003062 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6998      	ldr	r0, [r3, #24]
 8003076:	8b3a      	ldrh	r2, [r7, #24]
 8003078:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	f7ff fa84 	bl	800258a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003082:	bf00      	nop
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fd46 	bl	8002b1a <HAL_SPI_GetState>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d1f7      	bne.n	8003084 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	889b      	ldrh	r3, [r3, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fe fa24 	bl	80014ec <HAL_GPIO_WritePin>
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	889b      	ldrh	r3, [r3, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fe fa10 	bl	80014ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6998      	ldr	r0, [r3, #24]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	f7ff f914 	bl	8002304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80030dc:	bf00      	nop
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fd19 	bl	8002b1a <HAL_SPI_GetState>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d1f7      	bne.n	80030de <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6998      	ldr	r0, [r3, #24]
 80030f2:	8b3a      	ldrh	r2, [r7, #24]
 80030f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	f7ff f903 	bl	8002304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80030fe:	bf00      	nop
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fd08 	bl	8002b1a <HAL_SPI_GetState>
 800310a:	4603      	mov	r3, r0
 800310c:	2b01      	cmp	r3, #1
 800310e:	d1f7      	bne.n	8003100 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	889b      	ldrh	r3, [r3, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	4619      	mov	r1, r3
 800311c:	f7fe f9e6 	bl	80014ec <HAL_GPIO_WritePin>
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	04db      	lsls	r3, r3, #19
 8003136:	115b      	asrs	r3, r3, #5
 8003138:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8003140:	7afb      	ldrb	r3, [r7, #11]
 8003142:	461a      	mov	r2, r3
 8003144:	2106      	movs	r1, #6
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8d2 	bl	80032f0 <LoRa_write>
	HAL_Delay(5);
 800314c:	2005      	movs	r0, #5
 800314e:	f7fd ff17 	bl	8000f80 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	461a      	mov	r2, r3
 800315c:	2107      	movs	r1, #7
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8c6 	bl	80032f0 <LoRa_write>
	HAL_Delay(5);
 8003164:	2005      	movs	r0, #5
 8003166:	f7fd ff0b 	bl	8000f80 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800316e:	7afb      	ldrb	r3, [r7, #11]
 8003170:	461a      	mov	r2, r3
 8003172:	2108      	movs	r1, #8
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8bb 	bl	80032f0 <LoRa_write>
	HAL_Delay(5);
 800317a:	2005      	movs	r0, #5
 800317c:	f7fd ff00 	bl	8000f80 <HAL_Delay>
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	dd01      	ble.n	800319c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8003198:	230c      	movs	r3, #12
 800319a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	dc01      	bgt.n	80031a6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80031a2:	2307      	movs	r3, #7
 80031a4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80031a6:	211e      	movs	r1, #30
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f887 	bl	80032bc <LoRa_read>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80031b2:	200a      	movs	r0, #10
 80031b4:	f7fd fee4 	bl	8000f80 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80031cc:	7bbb      	ldrb	r3, [r7, #14]
 80031ce:	461a      	mov	r2, r3
 80031d0:	211e      	movs	r1, #30
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f88c 	bl	80032f0 <LoRa_write>
	HAL_Delay(10);
 80031d8:	200a      	movs	r0, #10
 80031da:	f7fd fed1 	bl	8000f80 <HAL_Delay>
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	461a      	mov	r2, r3
 80031f6:	2109      	movs	r1, #9
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f879 	bl	80032f0 <LoRa_write>
	HAL_Delay(10);
 80031fe:	200a      	movs	r0, #10
 8003200:	f7fd febe 	bl	8000f80 <HAL_Delay>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	2b2c      	cmp	r3, #44	; 0x2c
 8003220:	d801      	bhi.n	8003226 <LoRa_setOCP+0x1a>
		current = 45;
 8003222:	232d      	movs	r3, #45	; 0x2d
 8003224:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	2bf0      	cmp	r3, #240	; 0xf0
 800322a:	d901      	bls.n	8003230 <LoRa_setOCP+0x24>
		current = 240;
 800322c:	23f0      	movs	r3, #240	; 0xf0
 800322e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	2b78      	cmp	r3, #120	; 0x78
 8003234:	d809      	bhi.n	800324a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	3b2d      	subs	r3, #45	; 0x2d
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <LoRa_setOCP+0x78>)
 800323c:	fb82 1203 	smull	r1, r2, r2, r3
 8003240:	1052      	asrs	r2, r2, #1
 8003242:	17db      	asrs	r3, r3, #31
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e00b      	b.n	8003262 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	2bf0      	cmp	r3, #240	; 0xf0
 800324e:	d808      	bhi.n	8003262 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	331e      	adds	r3, #30
 8003254:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <LoRa_setOCP+0x78>)
 8003256:	fb82 1203 	smull	r1, r2, r2, r3
 800325a:	1092      	asrs	r2, r2, #2
 800325c:	17db      	asrs	r3, r3, #31
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	3320      	adds	r3, #32
 8003266:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	461a      	mov	r2, r3
 800326c:	210b      	movs	r1, #11
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f83e 	bl	80032f0 <LoRa_write>
	HAL_Delay(10);
 8003274:	200a      	movs	r0, #10
 8003276:	f7fd fe83 	bl	8000f80 <HAL_Delay>
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	66666667 	.word	0x66666667

08003288 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8003290:	211e      	movs	r1, #30
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f812 	bl	80032bc <LoRa_read>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	f043 0307 	orr.w	r3, r3, #7
 80032a2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, 0x70);
 80032a4:	2270      	movs	r2, #112	; 0x70
 80032a6:	211e      	movs	r1, #30
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f821 	bl	80032f0 <LoRa_write>
	HAL_Delay(10);
 80032ae:	200a      	movs	r0, #10
 80032b0:	f7fd fe66 	bl	8000f80 <HAL_Delay>
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80032d2:	f107 030f 	add.w	r3, r7, #15
 80032d6:	f107 010e 	add.w	r1, r7, #14
 80032da:	2201      	movs	r2, #1
 80032dc:	9200      	str	r2, [sp, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fea5 	bl	8003030 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
 80032fc:	4613      	mov	r3, r2
 80032fe:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003306:	b2db      	uxtb	r3, r3
 8003308:	73bb      	strb	r3, [r7, #14]
	data = value;
 800330a:	78bb      	ldrb	r3, [r7, #2]
 800330c:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800330e:	f107 030f 	add.w	r3, r7, #15
 8003312:	f107 010e 	add.w	r1, r7, #14
 8003316:	2201      	movs	r2, #1
 8003318:	9200      	str	r2, [sp, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fec5 	bl	80030ac <LoRa_writeReg>
	//HAL_Delay(5);
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	460b      	mov	r3, r1
 8003338:	72fb      	strb	r3, [r7, #11]
 800333a:	4613      	mov	r3, r2
 800333c:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800333e:	7afb      	ldrb	r3, [r7, #11]
 8003340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003344:	b2db      	uxtb	r3, r3
 8003346:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	889b      	ldrh	r3, [r3, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	4619      	mov	r1, r3
 8003354:	f7fe f8ca 	bl	80014ec <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6998      	ldr	r0, [r3, #24]
 800335c:	f107 0117 	add.w	r1, r7, #23
 8003360:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003364:	2201      	movs	r2, #1
 8003366:	f7fe ffcd 	bl	8002304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800336a:	bf00      	nop
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fbd2 	bl	8002b1a <HAL_SPI_GetState>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d1f7      	bne.n	800336c <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6998      	ldr	r0, [r3, #24]
 8003380:	7abb      	ldrb	r3, [r7, #10]
 8003382:	b29a      	uxth	r2, r3
 8003384:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	f7fe ffbb 	bl	8002304 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800338e:	bf00      	nop
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fbc0 	bl	8002b1a <HAL_SPI_GetState>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d1f7      	bne.n	8003390 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	889b      	ldrh	r3, [r3, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fe f89e 	bl	80014ec <HAL_GPIO_WritePin>
}
 80033b0:	bf00      	nop
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

	return 1;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	460b      	mov	r3, r1
 80033dc:	71fb      	strb	r3, [r7, #7]
 80033de:	4613      	mov	r3, r2
 80033e0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80033e8:	2101      	movs	r1, #1
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff fdbf 	bl	8002f6e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80033f0:	210e      	movs	r1, #14
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff ff62 	bl	80032bc <LoRa_read>
 80033f8:	4603      	mov	r3, r0
 80033fa:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 80033fc:	2200      	movs	r2, #0
 80033fe:	210e      	movs	r1, #14
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff ff75 	bl	80032f0 <LoRa_write>
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	461a      	mov	r2, r3
 800340a:	210d      	movs	r1, #13
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ff6f 	bl	80032f0 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	461a      	mov	r2, r3
 8003416:	2122      	movs	r1, #34	; 0x22
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff ff69 	bl	80032f0 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	2100      	movs	r1, #0
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff ff80 	bl	800332a <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800342a:	2103      	movs	r1, #3
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7ff fd9e 	bl	8002f6e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8003432:	2112      	movs	r1, #18
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff41 	bl	80032bc <LoRa_read>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <LoRa_transmit+0x92>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	2112      	movs	r1, #18
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff ff4f 	bl	80032f0 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7ff fd8a 	bl	8002f6e <LoRa_gotoMode>
			return 1;
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <LoRa_transmit+0xb2>
		}
		else{
			if(--timeout==0){
 800345e:	88bb      	ldrh	r3, [r7, #4]
 8003460:	3b01      	subs	r3, #1
 8003462:	80bb      	strh	r3, [r7, #4]
 8003464:	88bb      	ldrh	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <LoRa_transmit+0xaa>
				LoRa_gotoMode(_LoRa, mode);
 800346a:	6979      	ldr	r1, [r7, #20]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fd7e 	bl	8002f6e <LoRa_gotoMode>
				return 0;
 8003472:	2300      	movs	r3, #0
 8003474:	e003      	b.n	800347e <LoRa_transmit+0xb2>
			}
		}
		HAL_Delay(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f7fd fd82 	bl	8000f80 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800347c:	e7d9      	b.n	8003432 <LoRa_transmit+0x66>
	}
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8003486:	b590      	push	{r4, r7, lr}
 8003488:	b089      	sub	sp, #36	; 0x24
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <LoRa_receive+0x28>
		data[i]=0;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	4413      	add	r3, r2
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	dbf3      	blt.n	800349e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80034b6:	2101      	movs	r1, #1
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fd58 	bl	8002f6e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80034be:	2112      	movs	r1, #18
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff fefb 	bl	80032bc <LoRa_read>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02f      	beq.n	8003534 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80034d4:	22ff      	movs	r2, #255	; 0xff
 80034d6:	2112      	movs	r1, #18
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ff09 	bl	80032f0 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80034de:	2113      	movs	r1, #19
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff feeb 	bl	80032bc <LoRa_read>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80034ea:	2110      	movs	r1, #16
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff fee5 	bl	80032bc <LoRa_read>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	461a      	mov	r2, r3
 80034fa:	210d      	movs	r1, #13
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff fef7 	bl	80032f0 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8003502:	7cba      	ldrb	r2, [r7, #18]
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	4293      	cmp	r3, r2
 8003508:	bf28      	it	cs
 800350a:	4613      	movcs	r3, r2
 800350c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e00b      	b.n	800352c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	18d4      	adds	r4, r2, r3
 800351a:	2100      	movs	r1, #0
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fecd 	bl	80032bc <LoRa_read>
 8003522:	4603      	mov	r3, r0
 8003524:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	3301      	adds	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	7ffb      	ldrb	r3, [r7, #31]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	dbef      	blt.n	8003514 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8003534:	2105      	movs	r1, #5
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fd19 	bl	8002f6e <LoRa_gotoMode>
    return min;
 800353c:	7ffb      	ldrb	r3, [r7, #31]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd90      	pop	{r4, r7, pc}

08003546 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff32 	bl	80033b8 <LoRa_isvalid>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8098 	beq.w	800368c <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800355c:	2100      	movs	r1, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fd05 	bl	8002f6e <LoRa_gotoMode>
			HAL_Delay(10);
 8003564:	200a      	movs	r0, #10
 8003566:	f7fd fd0b 	bl	8000f80 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800356a:	2101      	movs	r1, #1
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fea5 	bl	80032bc <LoRa_read>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8003576:	200a      	movs	r0, #10
 8003578:	f7fd fd02 	bl	8000f80 <HAL_Delay>
			data = read | 0x80;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003582:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8003584:	7bbb      	ldrb	r3, [r7, #14]
 8003586:	461a      	mov	r2, r3
 8003588:	2101      	movs	r1, #1
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff feb0 	bl	80032f0 <LoRa_write>
			HAL_Delay(100);
 8003590:	2064      	movs	r0, #100	; 0x64
 8003592:	f7fd fcf5 	bl	8000f80 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fdc3 	bl	8003128 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fe1b 	bl	80031e6 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fe27 	bl	800320c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80035be:	2223      	movs	r2, #35	; 0x23
 80035c0:	210c      	movs	r1, #12
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fe94 	bl	80032f0 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fe5d 	bl	8003288 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff fdd6 	bl	8003188 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	211f      	movs	r1, #31
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fe85 	bl	80032f0 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	4413      	add	r3, r2
 8003600:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	461a      	mov	r2, r3
 8003606:	211d      	movs	r1, #29
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fe71 	bl	80032f0 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	b29b      	uxth	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	2120      	movs	r1, #32
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff fe67 	bl	80032f0 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	2121      	movs	r1, #33	; 0x21
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fe5f 	bl	80032f0 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fe41 	bl	80032bc <LoRa_read>
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003644:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	461a      	mov	r2, r3
 800364a:	2140      	movs	r1, #64	; 0x40
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fe4f 	bl	80032f0 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8003652:	2101      	movs	r1, #1
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fc8a 	bl	8002f6e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8003660:	200a      	movs	r0, #10
 8003662:	f7fd fc8d 	bl	8000f80 <HAL_Delay>

			//init register
			LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 8003666:	2200      	movs	r2, #0
 8003668:	210e      	movs	r1, #14
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fe40 	bl	80032f0 <LoRa_write>
			read = LoRa_read(_LoRa, RegVersion);
 8003670:	2142      	movs	r1, #66	; 0x42
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe22 	bl	80032bc <LoRa_read>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b12      	cmp	r3, #18
 8003680:	d101      	bne.n	8003686 <LoRa_init+0x140>
				return LORA_OK;
 8003682:	23c8      	movs	r3, #200	; 0xc8
 8003684:	e004      	b.n	8003690 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 8003686:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800368a:	e001      	b.n	8003690 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 800368c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <std>:
 8003698:	2300      	movs	r3, #0
 800369a:	b510      	push	{r4, lr}
 800369c:	4604      	mov	r4, r0
 800369e:	e9c0 3300 	strd	r3, r3, [r0]
 80036a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036a6:	6083      	str	r3, [r0, #8]
 80036a8:	8181      	strh	r1, [r0, #12]
 80036aa:	6643      	str	r3, [r0, #100]	; 0x64
 80036ac:	81c2      	strh	r2, [r0, #14]
 80036ae:	6183      	str	r3, [r0, #24]
 80036b0:	4619      	mov	r1, r3
 80036b2:	2208      	movs	r2, #8
 80036b4:	305c      	adds	r0, #92	; 0x5c
 80036b6:	f000 f9ed 	bl	8003a94 <memset>
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <std+0x38>)
 80036bc:	6224      	str	r4, [r4, #32]
 80036be:	6263      	str	r3, [r4, #36]	; 0x24
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <std+0x3c>)
 80036c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <std+0x40>)
 80036c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <std+0x44>)
 80036ca:	6323      	str	r3, [r4, #48]	; 0x30
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	080038e5 	.word	0x080038e5
 80036d4:	08003907 	.word	0x08003907
 80036d8:	0800393f 	.word	0x0800393f
 80036dc:	08003963 	.word	0x08003963

080036e0 <stdio_exit_handler>:
 80036e0:	4a02      	ldr	r2, [pc, #8]	; (80036ec <stdio_exit_handler+0xc>)
 80036e2:	4903      	ldr	r1, [pc, #12]	; (80036f0 <stdio_exit_handler+0x10>)
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <stdio_exit_handler+0x14>)
 80036e6:	f000 b869 	b.w	80037bc <_fwalk_sglue>
 80036ea:	bf00      	nop
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	08004421 	.word	0x08004421
 80036f4:	20000018 	.word	0x20000018

080036f8 <cleanup_stdio>:
 80036f8:	6841      	ldr	r1, [r0, #4]
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <cleanup_stdio+0x34>)
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4299      	cmp	r1, r3
 8003700:	4604      	mov	r4, r0
 8003702:	d001      	beq.n	8003708 <cleanup_stdio+0x10>
 8003704:	f000 fe8c 	bl	8004420 <_fflush_r>
 8003708:	68a1      	ldr	r1, [r4, #8]
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <cleanup_stdio+0x38>)
 800370c:	4299      	cmp	r1, r3
 800370e:	d002      	beq.n	8003716 <cleanup_stdio+0x1e>
 8003710:	4620      	mov	r0, r4
 8003712:	f000 fe85 	bl	8004420 <_fflush_r>
 8003716:	68e1      	ldr	r1, [r4, #12]
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <cleanup_stdio+0x3c>)
 800371a:	4299      	cmp	r1, r3
 800371c:	d004      	beq.n	8003728 <cleanup_stdio+0x30>
 800371e:	4620      	mov	r0, r4
 8003720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003724:	f000 be7c 	b.w	8004420 <_fflush_r>
 8003728:	bd10      	pop	{r4, pc}
 800372a:	bf00      	nop
 800372c:	200002ac 	.word	0x200002ac
 8003730:	20000314 	.word	0x20000314
 8003734:	2000037c 	.word	0x2000037c

08003738 <global_stdio_init.part.0>:
 8003738:	b510      	push	{r4, lr}
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <global_stdio_init.part.0+0x30>)
 800373c:	4c0b      	ldr	r4, [pc, #44]	; (800376c <global_stdio_init.part.0+0x34>)
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <global_stdio_init.part.0+0x38>)
 8003740:	4620      	mov	r0, r4
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	2104      	movs	r1, #4
 8003746:	2200      	movs	r2, #0
 8003748:	f7ff ffa6 	bl	8003698 <std>
 800374c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003750:	2201      	movs	r2, #1
 8003752:	2109      	movs	r1, #9
 8003754:	f7ff ffa0 	bl	8003698 <std>
 8003758:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800375c:	2202      	movs	r2, #2
 800375e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003762:	2112      	movs	r1, #18
 8003764:	f7ff bf98 	b.w	8003698 <std>
 8003768:	200003e4 	.word	0x200003e4
 800376c:	200002ac 	.word	0x200002ac
 8003770:	080036e1 	.word	0x080036e1

08003774 <__sfp_lock_acquire>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sfp_lock_acquire+0x8>)
 8003776:	f000 ba05 	b.w	8003b84 <__retarget_lock_acquire_recursive>
 800377a:	bf00      	nop
 800377c:	200003ed 	.word	0x200003ed

08003780 <__sfp_lock_release>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sfp_lock_release+0x8>)
 8003782:	f000 ba00 	b.w	8003b86 <__retarget_lock_release_recursive>
 8003786:	bf00      	nop
 8003788:	200003ed 	.word	0x200003ed

0800378c <__sinit>:
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	f7ff fff0 	bl	8003774 <__sfp_lock_acquire>
 8003794:	6a23      	ldr	r3, [r4, #32]
 8003796:	b11b      	cbz	r3, 80037a0 <__sinit+0x14>
 8003798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800379c:	f7ff bff0 	b.w	8003780 <__sfp_lock_release>
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__sinit+0x28>)
 80037a2:	6223      	str	r3, [r4, #32]
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__sinit+0x2c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f5      	bne.n	8003798 <__sinit+0xc>
 80037ac:	f7ff ffc4 	bl	8003738 <global_stdio_init.part.0>
 80037b0:	e7f2      	b.n	8003798 <__sinit+0xc>
 80037b2:	bf00      	nop
 80037b4:	080036f9 	.word	0x080036f9
 80037b8:	200003e4 	.word	0x200003e4

080037bc <_fwalk_sglue>:
 80037bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c0:	4607      	mov	r7, r0
 80037c2:	4688      	mov	r8, r1
 80037c4:	4614      	mov	r4, r2
 80037c6:	2600      	movs	r6, #0
 80037c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037cc:	f1b9 0901 	subs.w	r9, r9, #1
 80037d0:	d505      	bpl.n	80037de <_fwalk_sglue+0x22>
 80037d2:	6824      	ldr	r4, [r4, #0]
 80037d4:	2c00      	cmp	r4, #0
 80037d6:	d1f7      	bne.n	80037c8 <_fwalk_sglue+0xc>
 80037d8:	4630      	mov	r0, r6
 80037da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037de:	89ab      	ldrh	r3, [r5, #12]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d907      	bls.n	80037f4 <_fwalk_sglue+0x38>
 80037e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037e8:	3301      	adds	r3, #1
 80037ea:	d003      	beq.n	80037f4 <_fwalk_sglue+0x38>
 80037ec:	4629      	mov	r1, r5
 80037ee:	4638      	mov	r0, r7
 80037f0:	47c0      	blx	r8
 80037f2:	4306      	orrs	r6, r0
 80037f4:	3568      	adds	r5, #104	; 0x68
 80037f6:	e7e9      	b.n	80037cc <_fwalk_sglue+0x10>

080037f8 <iprintf>:
 80037f8:	b40f      	push	{r0, r1, r2, r3}
 80037fa:	b507      	push	{r0, r1, r2, lr}
 80037fc:	4906      	ldr	r1, [pc, #24]	; (8003818 <iprintf+0x20>)
 80037fe:	ab04      	add	r3, sp, #16
 8003800:	6808      	ldr	r0, [r1, #0]
 8003802:	f853 2b04 	ldr.w	r2, [r3], #4
 8003806:	6881      	ldr	r1, [r0, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	f000 fad9 	bl	8003dc0 <_vfiprintf_r>
 800380e:	b003      	add	sp, #12
 8003810:	f85d eb04 	ldr.w	lr, [sp], #4
 8003814:	b004      	add	sp, #16
 8003816:	4770      	bx	lr
 8003818:	20000064 	.word	0x20000064

0800381c <putchar>:
 800381c:	4b02      	ldr	r3, [pc, #8]	; (8003828 <putchar+0xc>)
 800381e:	4601      	mov	r1, r0
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	6882      	ldr	r2, [r0, #8]
 8003824:	f000 be85 	b.w	8004532 <_putc_r>
 8003828:	20000064 	.word	0x20000064

0800382c <_puts_r>:
 800382c:	6a03      	ldr	r3, [r0, #32]
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	4605      	mov	r5, r0
 8003832:	460e      	mov	r6, r1
 8003834:	6884      	ldr	r4, [r0, #8]
 8003836:	b90b      	cbnz	r3, 800383c <_puts_r+0x10>
 8003838:	f7ff ffa8 	bl	800378c <__sinit>
 800383c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800383e:	07db      	lsls	r3, r3, #31
 8003840:	d405      	bmi.n	800384e <_puts_r+0x22>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	0598      	lsls	r0, r3, #22
 8003846:	d402      	bmi.n	800384e <_puts_r+0x22>
 8003848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800384a:	f000 f99b 	bl	8003b84 <__retarget_lock_acquire_recursive>
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	0719      	lsls	r1, r3, #28
 8003852:	d513      	bpl.n	800387c <_puts_r+0x50>
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	b18b      	cbz	r3, 800387c <_puts_r+0x50>
 8003858:	3e01      	subs	r6, #1
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003860:	3b01      	subs	r3, #1
 8003862:	60a3      	str	r3, [r4, #8]
 8003864:	b9e9      	cbnz	r1, 80038a2 <_puts_r+0x76>
 8003866:	2b00      	cmp	r3, #0
 8003868:	da2e      	bge.n	80038c8 <_puts_r+0x9c>
 800386a:	4622      	mov	r2, r4
 800386c:	210a      	movs	r1, #10
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f87b 	bl	800396a <__swbuf_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d007      	beq.n	8003888 <_puts_r+0x5c>
 8003878:	250a      	movs	r5, #10
 800387a:	e007      	b.n	800388c <_puts_r+0x60>
 800387c:	4621      	mov	r1, r4
 800387e:	4628      	mov	r0, r5
 8003880:	f000 f8b0 	bl	80039e4 <__swsetup_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	d0e7      	beq.n	8003858 <_puts_r+0x2c>
 8003888:	f04f 35ff 	mov.w	r5, #4294967295
 800388c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800388e:	07da      	lsls	r2, r3, #31
 8003890:	d405      	bmi.n	800389e <_puts_r+0x72>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	059b      	lsls	r3, r3, #22
 8003896:	d402      	bmi.n	800389e <_puts_r+0x72>
 8003898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389a:	f000 f974 	bl	8003b86 <__retarget_lock_release_recursive>
 800389e:	4628      	mov	r0, r5
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da04      	bge.n	80038b0 <_puts_r+0x84>
 80038a6:	69a2      	ldr	r2, [r4, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	dc06      	bgt.n	80038ba <_puts_r+0x8e>
 80038ac:	290a      	cmp	r1, #10
 80038ae:	d004      	beq.n	80038ba <_puts_r+0x8e>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	6022      	str	r2, [r4, #0]
 80038b6:	7019      	strb	r1, [r3, #0]
 80038b8:	e7cf      	b.n	800385a <_puts_r+0x2e>
 80038ba:	4622      	mov	r2, r4
 80038bc:	4628      	mov	r0, r5
 80038be:	f000 f854 	bl	800396a <__swbuf_r>
 80038c2:	3001      	adds	r0, #1
 80038c4:	d1c9      	bne.n	800385a <_puts_r+0x2e>
 80038c6:	e7df      	b.n	8003888 <_puts_r+0x5c>
 80038c8:	250a      	movs	r5, #10
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	6022      	str	r2, [r4, #0]
 80038d0:	701d      	strb	r5, [r3, #0]
 80038d2:	e7db      	b.n	800388c <_puts_r+0x60>

080038d4 <puts>:
 80038d4:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <puts+0xc>)
 80038d6:	4601      	mov	r1, r0
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	f7ff bfa7 	b.w	800382c <_puts_r>
 80038de:	bf00      	nop
 80038e0:	20000064 	.word	0x20000064

080038e4 <__sread>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	460c      	mov	r4, r1
 80038e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ec:	f000 f8fc 	bl	8003ae8 <_read_r>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bfab      	itete	ge
 80038f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038f6:	89a3      	ldrhlt	r3, [r4, #12]
 80038f8:	181b      	addge	r3, r3, r0
 80038fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038fe:	bfac      	ite	ge
 8003900:	6563      	strge	r3, [r4, #84]	; 0x54
 8003902:	81a3      	strhlt	r3, [r4, #12]
 8003904:	bd10      	pop	{r4, pc}

08003906 <__swrite>:
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	461f      	mov	r7, r3
 800390c:	898b      	ldrh	r3, [r1, #12]
 800390e:	4605      	mov	r5, r0
 8003910:	05db      	lsls	r3, r3, #23
 8003912:	460c      	mov	r4, r1
 8003914:	4616      	mov	r6, r2
 8003916:	d505      	bpl.n	8003924 <__swrite+0x1e>
 8003918:	2302      	movs	r3, #2
 800391a:	2200      	movs	r2, #0
 800391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003920:	f000 f8d0 	bl	8003ac4 <_lseek_r>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	4632      	mov	r2, r6
 8003928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	4628      	mov	r0, r5
 8003930:	463b      	mov	r3, r7
 8003932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800393a:	f000 b8e7 	b.w	8003b0c <_write_r>

0800393e <__sseek>:
 800393e:	b510      	push	{r4, lr}
 8003940:	460c      	mov	r4, r1
 8003942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003946:	f000 f8bd 	bl	8003ac4 <_lseek_r>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	bf15      	itete	ne
 8003950:	6560      	strne	r0, [r4, #84]	; 0x54
 8003952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800395a:	81a3      	strheq	r3, [r4, #12]
 800395c:	bf18      	it	ne
 800395e:	81a3      	strhne	r3, [r4, #12]
 8003960:	bd10      	pop	{r4, pc}

08003962 <__sclose>:
 8003962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003966:	f000 b89d 	b.w	8003aa4 <_close_r>

0800396a <__swbuf_r>:
 800396a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396c:	460e      	mov	r6, r1
 800396e:	4614      	mov	r4, r2
 8003970:	4605      	mov	r5, r0
 8003972:	b118      	cbz	r0, 800397c <__swbuf_r+0x12>
 8003974:	6a03      	ldr	r3, [r0, #32]
 8003976:	b90b      	cbnz	r3, 800397c <__swbuf_r+0x12>
 8003978:	f7ff ff08 	bl	800378c <__sinit>
 800397c:	69a3      	ldr	r3, [r4, #24]
 800397e:	60a3      	str	r3, [r4, #8]
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	071a      	lsls	r2, r3, #28
 8003984:	d525      	bpl.n	80039d2 <__swbuf_r+0x68>
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	b31b      	cbz	r3, 80039d2 <__swbuf_r+0x68>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	6922      	ldr	r2, [r4, #16]
 800398e:	b2f6      	uxtb	r6, r6
 8003990:	1a98      	subs	r0, r3, r2
 8003992:	6963      	ldr	r3, [r4, #20]
 8003994:	4637      	mov	r7, r6
 8003996:	4283      	cmp	r3, r0
 8003998:	dc04      	bgt.n	80039a4 <__swbuf_r+0x3a>
 800399a:	4621      	mov	r1, r4
 800399c:	4628      	mov	r0, r5
 800399e:	f000 fd3f 	bl	8004420 <_fflush_r>
 80039a2:	b9e0      	cbnz	r0, 80039de <__swbuf_r+0x74>
 80039a4:	68a3      	ldr	r3, [r4, #8]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60a3      	str	r3, [r4, #8]
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	6022      	str	r2, [r4, #0]
 80039b0:	701e      	strb	r6, [r3, #0]
 80039b2:	6962      	ldr	r2, [r4, #20]
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d004      	beq.n	80039c4 <__swbuf_r+0x5a>
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	07db      	lsls	r3, r3, #31
 80039be:	d506      	bpl.n	80039ce <__swbuf_r+0x64>
 80039c0:	2e0a      	cmp	r6, #10
 80039c2:	d104      	bne.n	80039ce <__swbuf_r+0x64>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 fd2a 	bl	8004420 <_fflush_r>
 80039cc:	b938      	cbnz	r0, 80039de <__swbuf_r+0x74>
 80039ce:	4638      	mov	r0, r7
 80039d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f000 f805 	bl	80039e4 <__swsetup_r>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d0d5      	beq.n	800398a <__swbuf_r+0x20>
 80039de:	f04f 37ff 	mov.w	r7, #4294967295
 80039e2:	e7f4      	b.n	80039ce <__swbuf_r+0x64>

080039e4 <__swsetup_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <__swsetup_r+0xac>)
 80039e8:	4605      	mov	r5, r0
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	460c      	mov	r4, r1
 80039ee:	b118      	cbz	r0, 80039f8 <__swsetup_r+0x14>
 80039f0:	6a03      	ldr	r3, [r0, #32]
 80039f2:	b90b      	cbnz	r3, 80039f8 <__swsetup_r+0x14>
 80039f4:	f7ff feca 	bl	800378c <__sinit>
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039fe:	0718      	lsls	r0, r3, #28
 8003a00:	d422      	bmi.n	8003a48 <__swsetup_r+0x64>
 8003a02:	06d9      	lsls	r1, r3, #27
 8003a04:	d407      	bmi.n	8003a16 <__swsetup_r+0x32>
 8003a06:	2309      	movs	r3, #9
 8003a08:	602b      	str	r3, [r5, #0]
 8003a0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	e034      	b.n	8003a80 <__swsetup_r+0x9c>
 8003a16:	0758      	lsls	r0, r3, #29
 8003a18:	d512      	bpl.n	8003a40 <__swsetup_r+0x5c>
 8003a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a1c:	b141      	cbz	r1, 8003a30 <__swsetup_r+0x4c>
 8003a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a22:	4299      	cmp	r1, r3
 8003a24:	d002      	beq.n	8003a2c <__swsetup_r+0x48>
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 f8ae 	bl	8003b88 <_free_r>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a36:	81a3      	strh	r3, [r4, #12]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f043 0308 	orr.w	r3, r3, #8
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	b94b      	cbnz	r3, 8003a60 <__swsetup_r+0x7c>
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d003      	beq.n	8003a60 <__swsetup_r+0x7c>
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 fd2d 	bl	80044ba <__smakebuf_r>
 8003a60:	89a0      	ldrh	r0, [r4, #12]
 8003a62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a66:	f010 0301 	ands.w	r3, r0, #1
 8003a6a:	d00a      	beq.n	8003a82 <__swsetup_r+0x9e>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	6963      	ldr	r3, [r4, #20]
 8003a72:	425b      	negs	r3, r3
 8003a74:	61a3      	str	r3, [r4, #24]
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	b943      	cbnz	r3, 8003a8c <__swsetup_r+0xa8>
 8003a7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a7e:	d1c4      	bne.n	8003a0a <__swsetup_r+0x26>
 8003a80:	bd38      	pop	{r3, r4, r5, pc}
 8003a82:	0781      	lsls	r1, r0, #30
 8003a84:	bf58      	it	pl
 8003a86:	6963      	ldrpl	r3, [r4, #20]
 8003a88:	60a3      	str	r3, [r4, #8]
 8003a8a:	e7f4      	b.n	8003a76 <__swsetup_r+0x92>
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	e7f7      	b.n	8003a80 <__swsetup_r+0x9c>
 8003a90:	20000064 	.word	0x20000064

08003a94 <memset>:
 8003a94:	4603      	mov	r3, r0
 8003a96:	4402      	add	r2, r0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <_close_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	4d05      	ldr	r5, [pc, #20]	; (8003ac0 <_close_r+0x1c>)
 8003aaa:	4604      	mov	r4, r0
 8003aac:	4608      	mov	r0, r1
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	f7fd f971 	bl	8000d96 <_close>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_close_r+0x1a>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_close_r+0x1a>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	200003e8 	.word	0x200003e8

08003ac4 <_lseek_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	2200      	movs	r2, #0
 8003ace:	4d05      	ldr	r5, [pc, #20]	; (8003ae4 <_lseek_r+0x20>)
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f7fd f983 	bl	8000dde <_lseek>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_lseek_r+0x1e>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_lseek_r+0x1e>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	200003e8 	.word	0x200003e8

08003ae8 <_read_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	2200      	movs	r2, #0
 8003af2:	4d05      	ldr	r5, [pc, #20]	; (8003b08 <_read_r+0x20>)
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f7fd f930 	bl	8000d5c <_read>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d102      	bne.n	8003b06 <_read_r+0x1e>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	b103      	cbz	r3, 8003b06 <_read_r+0x1e>
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	200003e8 	.word	0x200003e8

08003b0c <_write_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	4d05      	ldr	r5, [pc, #20]	; (8003b2c <_write_r+0x20>)
 8003b18:	602a      	str	r2, [r5, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fc fb3c 	bl	8000198 <_write>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_write_r+0x1e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_write_r+0x1e>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	200003e8 	.word	0x200003e8

08003b30 <__errno>:
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <__errno+0x8>)
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000064 	.word	0x20000064

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	2600      	movs	r6, #0
 8003b40:	4d0c      	ldr	r5, [pc, #48]	; (8003b74 <__libc_init_array+0x38>)
 8003b42:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	f000 fd66 	bl	800461c <_init>
 8003b50:	2600      	movs	r6, #0
 8003b52:	4d0a      	ldr	r5, [pc, #40]	; (8003b7c <__libc_init_array+0x40>)
 8003b54:	4c0a      	ldr	r4, [pc, #40]	; (8003b80 <__libc_init_array+0x44>)
 8003b56:	1b64      	subs	r4, r4, r5
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	080048d8 	.word	0x080048d8
 8003b78:	080048d8 	.word	0x080048d8
 8003b7c:	080048d8 	.word	0x080048d8
 8003b80:	080048dc 	.word	0x080048dc

08003b84 <__retarget_lock_acquire_recursive>:
 8003b84:	4770      	bx	lr

08003b86 <__retarget_lock_release_recursive>:
 8003b86:	4770      	bx	lr

08003b88 <_free_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	d040      	beq.n	8003c12 <_free_r+0x8a>
 8003b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b94:	1f0c      	subs	r4, r1, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfb8      	it	lt
 8003b9a:	18e4      	addlt	r4, r4, r3
 8003b9c:	f000 f8dc 	bl	8003d58 <__malloc_lock>
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <_free_r+0x8c>)
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	b933      	cbnz	r3, 8003bb4 <_free_r+0x2c>
 8003ba6:	6063      	str	r3, [r4, #4]
 8003ba8:	6014      	str	r4, [r2, #0]
 8003baa:	4628      	mov	r0, r5
 8003bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb0:	f000 b8d8 	b.w	8003d64 <__malloc_unlock>
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d908      	bls.n	8003bca <_free_r+0x42>
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	1821      	adds	r1, r4, r0
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf01      	itttt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	1809      	addeq	r1, r1, r0
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	e7ed      	b.n	8003ba6 <_free_r+0x1e>
 8003bca:	461a      	mov	r2, r3
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b10b      	cbz	r3, 8003bd4 <_free_r+0x4c>
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d9fa      	bls.n	8003bca <_free_r+0x42>
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	1850      	adds	r0, r2, r1
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d10b      	bne.n	8003bf4 <_free_r+0x6c>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	4401      	add	r1, r0
 8003be0:	1850      	adds	r0, r2, r1
 8003be2:	4283      	cmp	r3, r0
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	d1e0      	bne.n	8003baa <_free_r+0x22>
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4408      	add	r0, r1
 8003bee:	6010      	str	r0, [r2, #0]
 8003bf0:	6053      	str	r3, [r2, #4]
 8003bf2:	e7da      	b.n	8003baa <_free_r+0x22>
 8003bf4:	d902      	bls.n	8003bfc <_free_r+0x74>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	602b      	str	r3, [r5, #0]
 8003bfa:	e7d6      	b.n	8003baa <_free_r+0x22>
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	1821      	adds	r1, r4, r0
 8003c00:	428b      	cmp	r3, r1
 8003c02:	bf01      	itttt	eq
 8003c04:	6819      	ldreq	r1, [r3, #0]
 8003c06:	685b      	ldreq	r3, [r3, #4]
 8003c08:	1809      	addeq	r1, r1, r0
 8003c0a:	6021      	streq	r1, [r4, #0]
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	6054      	str	r4, [r2, #4]
 8003c10:	e7cb      	b.n	8003baa <_free_r+0x22>
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	200003f0 	.word	0x200003f0

08003c18 <sbrk_aligned>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4e0e      	ldr	r6, [pc, #56]	; (8003c54 <sbrk_aligned+0x3c>)
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	6831      	ldr	r1, [r6, #0]
 8003c20:	4605      	mov	r5, r0
 8003c22:	b911      	cbnz	r1, 8003c2a <sbrk_aligned+0x12>
 8003c24:	f000 fcdc 	bl	80045e0 <_sbrk_r>
 8003c28:	6030      	str	r0, [r6, #0]
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f000 fcd7 	bl	80045e0 <_sbrk_r>
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d00a      	beq.n	8003c4c <sbrk_aligned+0x34>
 8003c36:	1cc4      	adds	r4, r0, #3
 8003c38:	f024 0403 	bic.w	r4, r4, #3
 8003c3c:	42a0      	cmp	r0, r4
 8003c3e:	d007      	beq.n	8003c50 <sbrk_aligned+0x38>
 8003c40:	1a21      	subs	r1, r4, r0
 8003c42:	4628      	mov	r0, r5
 8003c44:	f000 fccc 	bl	80045e0 <_sbrk_r>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d101      	bne.n	8003c50 <sbrk_aligned+0x38>
 8003c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c50:	4620      	mov	r0, r4
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	200003f4 	.word	0x200003f4

08003c58 <_malloc_r>:
 8003c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c5c:	1ccd      	adds	r5, r1, #3
 8003c5e:	f025 0503 	bic.w	r5, r5, #3
 8003c62:	3508      	adds	r5, #8
 8003c64:	2d0c      	cmp	r5, #12
 8003c66:	bf38      	it	cc
 8003c68:	250c      	movcc	r5, #12
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	db01      	blt.n	8003c74 <_malloc_r+0x1c>
 8003c70:	42a9      	cmp	r1, r5
 8003c72:	d905      	bls.n	8003c80 <_malloc_r+0x28>
 8003c74:	230c      	movs	r3, #12
 8003c76:	2600      	movs	r6, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d54 <_malloc_r+0xfc>
 8003c84:	f000 f868 	bl	8003d58 <__malloc_lock>
 8003c88:	f8d8 3000 	ldr.w	r3, [r8]
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	bb5c      	cbnz	r4, 8003ce8 <_malloc_r+0x90>
 8003c90:	4629      	mov	r1, r5
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff ffc0 	bl	8003c18 <sbrk_aligned>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	d155      	bne.n	8003d4a <_malloc_r+0xf2>
 8003c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8003ca2:	4626      	mov	r6, r4
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	d145      	bne.n	8003d34 <_malloc_r+0xdc>
 8003ca8:	2c00      	cmp	r4, #0
 8003caa:	d048      	beq.n	8003d3e <_malloc_r+0xe6>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	eb04 0903 	add.w	r9, r4, r3
 8003cb6:	f000 fc93 	bl	80045e0 <_sbrk_r>
 8003cba:	4581      	cmp	r9, r0
 8003cbc:	d13f      	bne.n	8003d3e <_malloc_r+0xe6>
 8003cbe:	6821      	ldr	r1, [r4, #0]
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	1a6d      	subs	r5, r5, r1
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7ff ffa7 	bl	8003c18 <sbrk_aligned>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d037      	beq.n	8003d3e <_malloc_r+0xe6>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	442b      	add	r3, r5
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d038      	beq.n	8003d4e <_malloc_r+0xf6>
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	42a2      	cmp	r2, r4
 8003ce0:	d12b      	bne.n	8003d3a <_malloc_r+0xe2>
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e00f      	b.n	8003d08 <_malloc_r+0xb0>
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	1b52      	subs	r2, r2, r5
 8003cec:	d41f      	bmi.n	8003d2e <_malloc_r+0xd6>
 8003cee:	2a0b      	cmp	r2, #11
 8003cf0:	d917      	bls.n	8003d22 <_malloc_r+0xca>
 8003cf2:	1961      	adds	r1, r4, r5
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	6025      	str	r5, [r4, #0]
 8003cf8:	bf18      	it	ne
 8003cfa:	6059      	strne	r1, [r3, #4]
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	bf08      	it	eq
 8003d00:	f8c8 1000 	streq.w	r1, [r8]
 8003d04:	5162      	str	r2, [r4, r5]
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	4638      	mov	r0, r7
 8003d0a:	f104 060b 	add.w	r6, r4, #11
 8003d0e:	f000 f829 	bl	8003d64 <__malloc_unlock>
 8003d12:	f026 0607 	bic.w	r6, r6, #7
 8003d16:	1d23      	adds	r3, r4, #4
 8003d18:	1af2      	subs	r2, r6, r3
 8003d1a:	d0ae      	beq.n	8003c7a <_malloc_r+0x22>
 8003d1c:	1b9b      	subs	r3, r3, r6
 8003d1e:	50a3      	str	r3, [r4, r2]
 8003d20:	e7ab      	b.n	8003c7a <_malloc_r+0x22>
 8003d22:	42a3      	cmp	r3, r4
 8003d24:	6862      	ldr	r2, [r4, #4]
 8003d26:	d1dd      	bne.n	8003ce4 <_malloc_r+0x8c>
 8003d28:	f8c8 2000 	str.w	r2, [r8]
 8003d2c:	e7ec      	b.n	8003d08 <_malloc_r+0xb0>
 8003d2e:	4623      	mov	r3, r4
 8003d30:	6864      	ldr	r4, [r4, #4]
 8003d32:	e7ac      	b.n	8003c8e <_malloc_r+0x36>
 8003d34:	4634      	mov	r4, r6
 8003d36:	6876      	ldr	r6, [r6, #4]
 8003d38:	e7b4      	b.n	8003ca4 <_malloc_r+0x4c>
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	e7cc      	b.n	8003cd8 <_malloc_r+0x80>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	4638      	mov	r0, r7
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	f000 f80e 	bl	8003d64 <__malloc_unlock>
 8003d48:	e797      	b.n	8003c7a <_malloc_r+0x22>
 8003d4a:	6025      	str	r5, [r4, #0]
 8003d4c:	e7dc      	b.n	8003d08 <_malloc_r+0xb0>
 8003d4e:	605b      	str	r3, [r3, #4]
 8003d50:	deff      	udf	#255	; 0xff
 8003d52:	bf00      	nop
 8003d54:	200003f0 	.word	0x200003f0

08003d58 <__malloc_lock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__malloc_lock+0x8>)
 8003d5a:	f7ff bf13 	b.w	8003b84 <__retarget_lock_acquire_recursive>
 8003d5e:	bf00      	nop
 8003d60:	200003ec 	.word	0x200003ec

08003d64 <__malloc_unlock>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__malloc_unlock+0x8>)
 8003d66:	f7ff bf0e 	b.w	8003b86 <__retarget_lock_release_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	200003ec 	.word	0x200003ec

08003d70 <__sfputc_r>:
 8003d70:	6893      	ldr	r3, [r2, #8]
 8003d72:	b410      	push	{r4}
 8003d74:	3b01      	subs	r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	6093      	str	r3, [r2, #8]
 8003d7a:	da07      	bge.n	8003d8c <__sfputc_r+0x1c>
 8003d7c:	6994      	ldr	r4, [r2, #24]
 8003d7e:	42a3      	cmp	r3, r4
 8003d80:	db01      	blt.n	8003d86 <__sfputc_r+0x16>
 8003d82:	290a      	cmp	r1, #10
 8003d84:	d102      	bne.n	8003d8c <__sfputc_r+0x1c>
 8003d86:	bc10      	pop	{r4}
 8003d88:	f7ff bdef 	b.w	800396a <__swbuf_r>
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	1c58      	adds	r0, r3, #1
 8003d90:	6010      	str	r0, [r2, #0]
 8003d92:	7019      	strb	r1, [r3, #0]
 8003d94:	4608      	mov	r0, r1
 8003d96:	bc10      	pop	{r4}
 8003d98:	4770      	bx	lr

08003d9a <__sfputs_r>:
 8003d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	460f      	mov	r7, r1
 8003da0:	4614      	mov	r4, r2
 8003da2:	18d5      	adds	r5, r2, r3
 8003da4:	42ac      	cmp	r4, r5
 8003da6:	d101      	bne.n	8003dac <__sfputs_r+0x12>
 8003da8:	2000      	movs	r0, #0
 8003daa:	e007      	b.n	8003dbc <__sfputs_r+0x22>
 8003dac:	463a      	mov	r2, r7
 8003dae:	4630      	mov	r0, r6
 8003db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db4:	f7ff ffdc 	bl	8003d70 <__sfputc_r>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d1f3      	bne.n	8003da4 <__sfputs_r+0xa>
 8003dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dc0 <_vfiprintf_r>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	4698      	mov	r8, r3
 8003dca:	4606      	mov	r6, r0
 8003dcc:	b09d      	sub	sp, #116	; 0x74
 8003dce:	b118      	cbz	r0, 8003dd8 <_vfiprintf_r+0x18>
 8003dd0:	6a03      	ldr	r3, [r0, #32]
 8003dd2:	b90b      	cbnz	r3, 8003dd8 <_vfiprintf_r+0x18>
 8003dd4:	f7ff fcda 	bl	800378c <__sinit>
 8003dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dda:	07d9      	lsls	r1, r3, #31
 8003ddc:	d405      	bmi.n	8003dea <_vfiprintf_r+0x2a>
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	059a      	lsls	r2, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_vfiprintf_r+0x2a>
 8003de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003de6:	f7ff fecd 	bl	8003b84 <__retarget_lock_acquire_recursive>
 8003dea:	89ab      	ldrh	r3, [r5, #12]
 8003dec:	071b      	lsls	r3, r3, #28
 8003dee:	d501      	bpl.n	8003df4 <_vfiprintf_r+0x34>
 8003df0:	692b      	ldr	r3, [r5, #16]
 8003df2:	b99b      	cbnz	r3, 8003e1c <_vfiprintf_r+0x5c>
 8003df4:	4629      	mov	r1, r5
 8003df6:	4630      	mov	r0, r6
 8003df8:	f7ff fdf4 	bl	80039e4 <__swsetup_r>
 8003dfc:	b170      	cbz	r0, 8003e1c <_vfiprintf_r+0x5c>
 8003dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e00:	07dc      	lsls	r4, r3, #31
 8003e02:	d504      	bpl.n	8003e0e <_vfiprintf_r+0x4e>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	b01d      	add	sp, #116	; 0x74
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	0598      	lsls	r0, r3, #22
 8003e12:	d4f7      	bmi.n	8003e04 <_vfiprintf_r+0x44>
 8003e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e16:	f7ff feb6 	bl	8003b86 <__retarget_lock_release_recursive>
 8003e1a:	e7f3      	b.n	8003e04 <_vfiprintf_r+0x44>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	2320      	movs	r3, #32
 8003e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e26:	2330      	movs	r3, #48	; 0x30
 8003e28:	f04f 0901 	mov.w	r9, #1
 8003e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003fe0 <_vfiprintf_r+0x220>
 8003e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e38:	4623      	mov	r3, r4
 8003e3a:	469a      	mov	sl, r3
 8003e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e40:	b10a      	cbz	r2, 8003e46 <_vfiprintf_r+0x86>
 8003e42:	2a25      	cmp	r2, #37	; 0x25
 8003e44:	d1f9      	bne.n	8003e3a <_vfiprintf_r+0x7a>
 8003e46:	ebba 0b04 	subs.w	fp, sl, r4
 8003e4a:	d00b      	beq.n	8003e64 <_vfiprintf_r+0xa4>
 8003e4c:	465b      	mov	r3, fp
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	4630      	mov	r0, r6
 8003e54:	f7ff ffa1 	bl	8003d9a <__sfputs_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f000 80a9 	beq.w	8003fb0 <_vfiprintf_r+0x1f0>
 8003e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e60:	445a      	add	r2, fp
 8003e62:	9209      	str	r2, [sp, #36]	; 0x24
 8003e64:	f89a 3000 	ldrb.w	r3, [sl]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a1 	beq.w	8003fb0 <_vfiprintf_r+0x1f0>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e78:	f10a 0a01 	add.w	sl, sl, #1
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	9307      	str	r3, [sp, #28]
 8003e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e84:	931a      	str	r3, [sp, #104]	; 0x68
 8003e86:	4654      	mov	r4, sl
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e8e:	4854      	ldr	r0, [pc, #336]	; (8003fe0 <_vfiprintf_r+0x220>)
 8003e90:	f000 fbb6 	bl	8004600 <memchr>
 8003e94:	9a04      	ldr	r2, [sp, #16]
 8003e96:	b9d8      	cbnz	r0, 8003ed0 <_vfiprintf_r+0x110>
 8003e98:	06d1      	lsls	r1, r2, #27
 8003e9a:	bf44      	itt	mi
 8003e9c:	2320      	movmi	r3, #32
 8003e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea2:	0713      	lsls	r3, r2, #28
 8003ea4:	bf44      	itt	mi
 8003ea6:	232b      	movmi	r3, #43	; 0x2b
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb2:	d015      	beq.n	8003ee0 <_vfiprintf_r+0x120>
 8003eb4:	4654      	mov	r4, sl
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f04f 0c0a 	mov.w	ip, #10
 8003ebc:	9a07      	ldr	r2, [sp, #28]
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ec4:	3b30      	subs	r3, #48	; 0x30
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d94d      	bls.n	8003f66 <_vfiprintf_r+0x1a6>
 8003eca:	b1b0      	cbz	r0, 8003efa <_vfiprintf_r+0x13a>
 8003ecc:	9207      	str	r2, [sp, #28]
 8003ece:	e014      	b.n	8003efa <_vfiprintf_r+0x13a>
 8003ed0:	eba0 0308 	sub.w	r3, r0, r8
 8003ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	46a2      	mov	sl, r4
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	e7d2      	b.n	8003e86 <_vfiprintf_r+0xc6>
 8003ee0:	9b03      	ldr	r3, [sp, #12]
 8003ee2:	1d19      	adds	r1, r3, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	9103      	str	r1, [sp, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bfbb      	ittet	lt
 8003eec:	425b      	neglt	r3, r3
 8003eee:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef2:	9307      	strge	r3, [sp, #28]
 8003ef4:	9307      	strlt	r3, [sp, #28]
 8003ef6:	bfb8      	it	lt
 8003ef8:	9204      	strlt	r2, [sp, #16]
 8003efa:	7823      	ldrb	r3, [r4, #0]
 8003efc:	2b2e      	cmp	r3, #46	; 0x2e
 8003efe:	d10c      	bne.n	8003f1a <_vfiprintf_r+0x15a>
 8003f00:	7863      	ldrb	r3, [r4, #1]
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d134      	bne.n	8003f70 <_vfiprintf_r+0x1b0>
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	3402      	adds	r4, #2
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfb8      	it	lt
 8003f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f18:	9305      	str	r3, [sp, #20]
 8003f1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fe4 <_vfiprintf_r+0x224>
 8003f1e:	2203      	movs	r2, #3
 8003f20:	4650      	mov	r0, sl
 8003f22:	7821      	ldrb	r1, [r4, #0]
 8003f24:	f000 fb6c 	bl	8004600 <memchr>
 8003f28:	b138      	cbz	r0, 8003f3a <_vfiprintf_r+0x17a>
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	9b04      	ldr	r3, [sp, #16]
 8003f2e:	eba0 000a 	sub.w	r0, r0, sl
 8003f32:	4082      	lsls	r2, r0
 8003f34:	4313      	orrs	r3, r2
 8003f36:	3401      	adds	r4, #1
 8003f38:	9304      	str	r3, [sp, #16]
 8003f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3e:	2206      	movs	r2, #6
 8003f40:	4829      	ldr	r0, [pc, #164]	; (8003fe8 <_vfiprintf_r+0x228>)
 8003f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f46:	f000 fb5b 	bl	8004600 <memchr>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d03f      	beq.n	8003fce <_vfiprintf_r+0x20e>
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <_vfiprintf_r+0x22c>)
 8003f50:	bb1b      	cbnz	r3, 8003f9a <_vfiprintf_r+0x1da>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	3307      	adds	r3, #7
 8003f56:	f023 0307 	bic.w	r3, r3, #7
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f60:	443b      	add	r3, r7
 8003f62:	9309      	str	r3, [sp, #36]	; 0x24
 8003f64:	e768      	b.n	8003e38 <_vfiprintf_r+0x78>
 8003f66:	460c      	mov	r4, r1
 8003f68:	2001      	movs	r0, #1
 8003f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f6e:	e7a6      	b.n	8003ebe <_vfiprintf_r+0xfe>
 8003f70:	2300      	movs	r3, #0
 8003f72:	f04f 0c0a 	mov.w	ip, #10
 8003f76:	4619      	mov	r1, r3
 8003f78:	3401      	adds	r4, #1
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f82:	3a30      	subs	r2, #48	; 0x30
 8003f84:	2a09      	cmp	r2, #9
 8003f86:	d903      	bls.n	8003f90 <_vfiprintf_r+0x1d0>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0c6      	beq.n	8003f1a <_vfiprintf_r+0x15a>
 8003f8c:	9105      	str	r1, [sp, #20]
 8003f8e:	e7c4      	b.n	8003f1a <_vfiprintf_r+0x15a>
 8003f90:	4604      	mov	r4, r0
 8003f92:	2301      	movs	r3, #1
 8003f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f98:	e7f0      	b.n	8003f7c <_vfiprintf_r+0x1bc>
 8003f9a:	ab03      	add	r3, sp, #12
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	462a      	mov	r2, r5
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <_vfiprintf_r+0x230>)
 8003fa4:	a904      	add	r1, sp, #16
 8003fa6:	f3af 8000 	nop.w
 8003faa:	4607      	mov	r7, r0
 8003fac:	1c78      	adds	r0, r7, #1
 8003fae:	d1d6      	bne.n	8003f5e <_vfiprintf_r+0x19e>
 8003fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb2:	07d9      	lsls	r1, r3, #31
 8003fb4:	d405      	bmi.n	8003fc2 <_vfiprintf_r+0x202>
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	059a      	lsls	r2, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_vfiprintf_r+0x202>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fbe:	f7ff fde2 	bl	8003b86 <__retarget_lock_release_recursive>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	065b      	lsls	r3, r3, #25
 8003fc6:	f53f af1d 	bmi.w	8003e04 <_vfiprintf_r+0x44>
 8003fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fcc:	e71c      	b.n	8003e08 <_vfiprintf_r+0x48>
 8003fce:	ab03      	add	r3, sp, #12
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <_vfiprintf_r+0x230>)
 8003fd8:	a904      	add	r1, sp, #16
 8003fda:	f000 f87d 	bl	80040d8 <_printf_i>
 8003fde:	e7e4      	b.n	8003faa <_vfiprintf_r+0x1ea>
 8003fe0:	080048a2 	.word	0x080048a2
 8003fe4:	080048a8 	.word	0x080048a8
 8003fe8:	080048ac 	.word	0x080048ac
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	08003d9b 	.word	0x08003d9b

08003ff4 <_printf_common>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	688a      	ldr	r2, [r1, #8]
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	4607      	mov	r7, r0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfb8      	it	lt
 8004006:	4613      	movlt	r3, r2
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004014:	b10a      	cbz	r2, 800401a <_printf_common+0x26>
 8004016:	3301      	adds	r3, #1
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	6833      	ldrmi	r3, [r6, #0]
 8004022:	3302      	addmi	r3, #2
 8004024:	6033      	strmi	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d106      	bne.n	800403c <_printf_common+0x48>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	6832      	ldr	r2, [r6, #0]
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ab      	cmp	r3, r5
 800403a:	dc2b      	bgt.n	8004094 <_printf_common+0xa0>
 800403c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004040:	1e13      	subs	r3, r2, #0
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d430      	bmi.n	80040ae <_printf_common+0xba>
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d023      	beq.n	80040a2 <_printf_common+0xae>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf14      	ite	ne
 8004066:	2500      	movne	r5, #0
 8004068:	6833      	ldreq	r3, [r6, #0]
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	bf08      	it	eq
 8004070:	68e5      	ldreq	r5, [r4, #12]
 8004072:	f104 041a 	add.w	r4, r4, #26
 8004076:	bf08      	it	eq
 8004078:	1aed      	subeq	r5, r5, r3
 800407a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800407e:	bf08      	it	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	4293      	cmp	r3, r2
 8004086:	bfc4      	itt	gt
 8004088:	1a9b      	subgt	r3, r3, r2
 800408a:	18ed      	addgt	r5, r5, r3
 800408c:	42b5      	cmp	r5, r6
 800408e:	d11a      	bne.n	80040c6 <_printf_common+0xd2>
 8004090:	2000      	movs	r0, #0
 8004092:	e008      	b.n	80040a6 <_printf_common+0xb2>
 8004094:	2301      	movs	r3, #1
 8004096:	4652      	mov	r2, sl
 8004098:	4649      	mov	r1, r9
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d103      	bne.n	80040aa <_printf_common+0xb6>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	3501      	adds	r5, #1
 80040ac:	e7c1      	b.n	8004032 <_printf_common+0x3e>
 80040ae:	2030      	movs	r0, #48	; 0x30
 80040b0:	18e1      	adds	r1, r4, r3
 80040b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040bc:	4422      	add	r2, r4
 80040be:	3302      	adds	r3, #2
 80040c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040c4:	e7c2      	b.n	800404c <_printf_common+0x58>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4622      	mov	r2, r4
 80040ca:	4649      	mov	r1, r9
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c0      	blx	r8
 80040d0:	3001      	adds	r0, #1
 80040d2:	d0e6      	beq.n	80040a2 <_printf_common+0xae>
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7d9      	b.n	800408c <_printf_common+0x98>

080040d8 <_printf_i>:
 80040d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	7e0f      	ldrb	r7, [r1, #24]
 80040de:	4691      	mov	r9, r2
 80040e0:	2f78      	cmp	r7, #120	; 0x78
 80040e2:	4680      	mov	r8, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	469a      	mov	sl, r3
 80040e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ee:	d807      	bhi.n	8004100 <_printf_i+0x28>
 80040f0:	2f62      	cmp	r7, #98	; 0x62
 80040f2:	d80a      	bhi.n	800410a <_printf_i+0x32>
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	f000 80d5 	beq.w	80042a4 <_printf_i+0x1cc>
 80040fa:	2f58      	cmp	r7, #88	; 0x58
 80040fc:	f000 80c1 	beq.w	8004282 <_printf_i+0x1aa>
 8004100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004108:	e03a      	b.n	8004180 <_printf_i+0xa8>
 800410a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800410e:	2b15      	cmp	r3, #21
 8004110:	d8f6      	bhi.n	8004100 <_printf_i+0x28>
 8004112:	a101      	add	r1, pc, #4	; (adr r1, 8004118 <_printf_i+0x40>)
 8004114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004118:	08004171 	.word	0x08004171
 800411c:	08004185 	.word	0x08004185
 8004120:	08004101 	.word	0x08004101
 8004124:	08004101 	.word	0x08004101
 8004128:	08004101 	.word	0x08004101
 800412c:	08004101 	.word	0x08004101
 8004130:	08004185 	.word	0x08004185
 8004134:	08004101 	.word	0x08004101
 8004138:	08004101 	.word	0x08004101
 800413c:	08004101 	.word	0x08004101
 8004140:	08004101 	.word	0x08004101
 8004144:	0800428b 	.word	0x0800428b
 8004148:	080041b1 	.word	0x080041b1
 800414c:	08004245 	.word	0x08004245
 8004150:	08004101 	.word	0x08004101
 8004154:	08004101 	.word	0x08004101
 8004158:	080042ad 	.word	0x080042ad
 800415c:	08004101 	.word	0x08004101
 8004160:	080041b1 	.word	0x080041b1
 8004164:	08004101 	.word	0x08004101
 8004168:	08004101 	.word	0x08004101
 800416c:	0800424d 	.word	0x0800424d
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	602a      	str	r2, [r5, #0]
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004180:	2301      	movs	r3, #1
 8004182:	e0a0      	b.n	80042c6 <_printf_i+0x1ee>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	0607      	lsls	r7, r0, #24
 800418a:	f103 0104 	add.w	r1, r3, #4
 800418e:	6029      	str	r1, [r5, #0]
 8004190:	d501      	bpl.n	8004196 <_printf_i+0xbe>
 8004192:	681e      	ldr	r6, [r3, #0]
 8004194:	e003      	b.n	800419e <_printf_i+0xc6>
 8004196:	0646      	lsls	r6, r0, #25
 8004198:	d5fb      	bpl.n	8004192 <_printf_i+0xba>
 800419a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800419e:	2e00      	cmp	r6, #0
 80041a0:	da03      	bge.n	80041aa <_printf_i+0xd2>
 80041a2:	232d      	movs	r3, #45	; 0x2d
 80041a4:	4276      	negs	r6, r6
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	230a      	movs	r3, #10
 80041ac:	4859      	ldr	r0, [pc, #356]	; (8004314 <_printf_i+0x23c>)
 80041ae:	e012      	b.n	80041d6 <_printf_i+0xfe>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	6029      	str	r1, [r5, #0]
 80041b8:	0605      	lsls	r5, r0, #24
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0xe8>
 80041bc:	681e      	ldr	r6, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0xee>
 80041c0:	0641      	lsls	r1, r0, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0xe4>
 80041c4:	881e      	ldrh	r6, [r3, #0]
 80041c6:	2f6f      	cmp	r7, #111	; 0x6f
 80041c8:	bf0c      	ite	eq
 80041ca:	2308      	moveq	r3, #8
 80041cc:	230a      	movne	r3, #10
 80041ce:	4851      	ldr	r0, [pc, #324]	; (8004314 <_printf_i+0x23c>)
 80041d0:	2100      	movs	r1, #0
 80041d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d6:	6865      	ldr	r5, [r4, #4]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	bfa8      	it	ge
 80041dc:	6821      	ldrge	r1, [r4, #0]
 80041de:	60a5      	str	r5, [r4, #8]
 80041e0:	bfa4      	itt	ge
 80041e2:	f021 0104 	bicge.w	r1, r1, #4
 80041e6:	6021      	strge	r1, [r4, #0]
 80041e8:	b90e      	cbnz	r6, 80041ee <_printf_i+0x116>
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	d04b      	beq.n	8004286 <_printf_i+0x1ae>
 80041ee:	4615      	mov	r5, r2
 80041f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80041f4:	fb03 6711 	mls	r7, r3, r1, r6
 80041f8:	5dc7      	ldrb	r7, [r0, r7]
 80041fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041fe:	4637      	mov	r7, r6
 8004200:	42bb      	cmp	r3, r7
 8004202:	460e      	mov	r6, r1
 8004204:	d9f4      	bls.n	80041f0 <_printf_i+0x118>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d10b      	bne.n	8004222 <_printf_i+0x14a>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	07de      	lsls	r6, r3, #31
 800420e:	d508      	bpl.n	8004222 <_printf_i+0x14a>
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	6861      	ldr	r1, [r4, #4]
 8004214:	4299      	cmp	r1, r3
 8004216:	bfde      	ittt	le
 8004218:	2330      	movle	r3, #48	; 0x30
 800421a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800421e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004222:	1b52      	subs	r2, r2, r5
 8004224:	6122      	str	r2, [r4, #16]
 8004226:	464b      	mov	r3, r9
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f8cd a000 	str.w	sl, [sp]
 8004230:	aa03      	add	r2, sp, #12
 8004232:	f7ff fedf 	bl	8003ff4 <_printf_common>
 8004236:	3001      	adds	r0, #1
 8004238:	d14a      	bne.n	80042d0 <_printf_i+0x1f8>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	b004      	add	sp, #16
 8004240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	2778      	movs	r7, #120	; 0x78
 800424e:	4832      	ldr	r0, [pc, #200]	; (8004318 <_printf_i+0x240>)
 8004250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	6829      	ldr	r1, [r5, #0]
 8004258:	061f      	lsls	r7, r3, #24
 800425a:	f851 6b04 	ldr.w	r6, [r1], #4
 800425e:	d402      	bmi.n	8004266 <_printf_i+0x18e>
 8004260:	065f      	lsls	r7, r3, #25
 8004262:	bf48      	it	mi
 8004264:	b2b6      	uxthmi	r6, r6
 8004266:	07df      	lsls	r7, r3, #31
 8004268:	bf48      	it	mi
 800426a:	f043 0320 	orrmi.w	r3, r3, #32
 800426e:	6029      	str	r1, [r5, #0]
 8004270:	bf48      	it	mi
 8004272:	6023      	strmi	r3, [r4, #0]
 8004274:	b91e      	cbnz	r6, 800427e <_printf_i+0x1a6>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f023 0320 	bic.w	r3, r3, #32
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	2310      	movs	r3, #16
 8004280:	e7a6      	b.n	80041d0 <_printf_i+0xf8>
 8004282:	4824      	ldr	r0, [pc, #144]	; (8004314 <_printf_i+0x23c>)
 8004284:	e7e4      	b.n	8004250 <_printf_i+0x178>
 8004286:	4615      	mov	r5, r2
 8004288:	e7bd      	b.n	8004206 <_printf_i+0x12e>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	6826      	ldr	r6, [r4, #0]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	6028      	str	r0, [r5, #0]
 8004294:	0635      	lsls	r5, r6, #24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0x1c6>
 800429a:	6019      	str	r1, [r3, #0]
 800429c:	e002      	b.n	80042a4 <_printf_i+0x1cc>
 800429e:	0670      	lsls	r0, r6, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0x1c2>
 80042a2:	8019      	strh	r1, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4615      	mov	r5, r2
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	e7bc      	b.n	8004226 <_printf_i+0x14e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f9a1 	bl	8004600 <memchr>
 80042be:	b108      	cbz	r0, 80042c4 <_printf_i+0x1ec>
 80042c0:	1b40      	subs	r0, r0, r5
 80042c2:	6060      	str	r0, [r4, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ce:	e7aa      	b.n	8004226 <_printf_i+0x14e>
 80042d0:	462a      	mov	r2, r5
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	47d0      	blx	sl
 80042da:	3001      	adds	r0, #1
 80042dc:	d0ad      	beq.n	800423a <_printf_i+0x162>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d413      	bmi.n	800430c <_printf_i+0x234>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e7a6      	b.n	800423e <_printf_i+0x166>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4632      	mov	r2, r6
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d09d      	beq.n	800423a <_printf_i+0x162>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	9903      	ldr	r1, [sp, #12]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	42ab      	cmp	r3, r5
 8004308:	dcf2      	bgt.n	80042f0 <_printf_i+0x218>
 800430a:	e7eb      	b.n	80042e4 <_printf_i+0x20c>
 800430c:	2500      	movs	r5, #0
 800430e:	f104 0619 	add.w	r6, r4, #25
 8004312:	e7f5      	b.n	8004300 <_printf_i+0x228>
 8004314:	080048b3 	.word	0x080048b3
 8004318:	080048c4 	.word	0x080048c4

0800431c <__sflush_r>:
 800431c:	898a      	ldrh	r2, [r1, #12]
 800431e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004320:	4605      	mov	r5, r0
 8004322:	0710      	lsls	r0, r2, #28
 8004324:	460c      	mov	r4, r1
 8004326:	d457      	bmi.n	80043d8 <__sflush_r+0xbc>
 8004328:	684b      	ldr	r3, [r1, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	dc04      	bgt.n	8004338 <__sflush_r+0x1c>
 800432e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	dc01      	bgt.n	8004338 <__sflush_r+0x1c>
 8004334:	2000      	movs	r0, #0
 8004336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800433a:	2e00      	cmp	r6, #0
 800433c:	d0fa      	beq.n	8004334 <__sflush_r+0x18>
 800433e:	2300      	movs	r3, #0
 8004340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004344:	682f      	ldr	r7, [r5, #0]
 8004346:	6a21      	ldr	r1, [r4, #32]
 8004348:	602b      	str	r3, [r5, #0]
 800434a:	d032      	beq.n	80043b2 <__sflush_r+0x96>
 800434c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	075a      	lsls	r2, r3, #29
 8004352:	d505      	bpl.n	8004360 <__sflush_r+0x44>
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	1ac0      	subs	r0, r0, r3
 8004358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800435a:	b10b      	cbz	r3, 8004360 <__sflush_r+0x44>
 800435c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800435e:	1ac0      	subs	r0, r0, r3
 8004360:	2300      	movs	r3, #0
 8004362:	4602      	mov	r2, r0
 8004364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004366:	4628      	mov	r0, r5
 8004368:	6a21      	ldr	r1, [r4, #32]
 800436a:	47b0      	blx	r6
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	d106      	bne.n	8004380 <__sflush_r+0x64>
 8004372:	6829      	ldr	r1, [r5, #0]
 8004374:	291d      	cmp	r1, #29
 8004376:	d82b      	bhi.n	80043d0 <__sflush_r+0xb4>
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <__sflush_r+0x100>)
 800437a:	410a      	asrs	r2, r1
 800437c:	07d6      	lsls	r6, r2, #31
 800437e:	d427      	bmi.n	80043d0 <__sflush_r+0xb4>
 8004380:	2200      	movs	r2, #0
 8004382:	6062      	str	r2, [r4, #4]
 8004384:	6922      	ldr	r2, [r4, #16]
 8004386:	04d9      	lsls	r1, r3, #19
 8004388:	6022      	str	r2, [r4, #0]
 800438a:	d504      	bpl.n	8004396 <__sflush_r+0x7a>
 800438c:	1c42      	adds	r2, r0, #1
 800438e:	d101      	bne.n	8004394 <__sflush_r+0x78>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b903      	cbnz	r3, 8004396 <__sflush_r+0x7a>
 8004394:	6560      	str	r0, [r4, #84]	; 0x54
 8004396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004398:	602f      	str	r7, [r5, #0]
 800439a:	2900      	cmp	r1, #0
 800439c:	d0ca      	beq.n	8004334 <__sflush_r+0x18>
 800439e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a2:	4299      	cmp	r1, r3
 80043a4:	d002      	beq.n	80043ac <__sflush_r+0x90>
 80043a6:	4628      	mov	r0, r5
 80043a8:	f7ff fbee 	bl	8003b88 <_free_r>
 80043ac:	2000      	movs	r0, #0
 80043ae:	6360      	str	r0, [r4, #52]	; 0x34
 80043b0:	e7c1      	b.n	8004336 <__sflush_r+0x1a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b0      	blx	r6
 80043b8:	1c41      	adds	r1, r0, #1
 80043ba:	d1c8      	bne.n	800434e <__sflush_r+0x32>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0c5      	beq.n	800434e <__sflush_r+0x32>
 80043c2:	2b1d      	cmp	r3, #29
 80043c4:	d001      	beq.n	80043ca <__sflush_r+0xae>
 80043c6:	2b16      	cmp	r3, #22
 80043c8:	d101      	bne.n	80043ce <__sflush_r+0xb2>
 80043ca:	602f      	str	r7, [r5, #0]
 80043cc:	e7b2      	b.n	8004334 <__sflush_r+0x18>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	e7ae      	b.n	8004336 <__sflush_r+0x1a>
 80043d8:	690f      	ldr	r7, [r1, #16]
 80043da:	2f00      	cmp	r7, #0
 80043dc:	d0aa      	beq.n	8004334 <__sflush_r+0x18>
 80043de:	0793      	lsls	r3, r2, #30
 80043e0:	bf18      	it	ne
 80043e2:	2300      	movne	r3, #0
 80043e4:	680e      	ldr	r6, [r1, #0]
 80043e6:	bf08      	it	eq
 80043e8:	694b      	ldreq	r3, [r1, #20]
 80043ea:	1bf6      	subs	r6, r6, r7
 80043ec:	600f      	str	r7, [r1, #0]
 80043ee:	608b      	str	r3, [r1, #8]
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	dd9f      	ble.n	8004334 <__sflush_r+0x18>
 80043f4:	4633      	mov	r3, r6
 80043f6:	463a      	mov	r2, r7
 80043f8:	4628      	mov	r0, r5
 80043fa:	6a21      	ldr	r1, [r4, #32]
 80043fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004400:	47e0      	blx	ip
 8004402:	2800      	cmp	r0, #0
 8004404:	dc06      	bgt.n	8004414 <__sflush_r+0xf8>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	e790      	b.n	8004336 <__sflush_r+0x1a>
 8004414:	4407      	add	r7, r0
 8004416:	1a36      	subs	r6, r6, r0
 8004418:	e7ea      	b.n	80043f0 <__sflush_r+0xd4>
 800441a:	bf00      	nop
 800441c:	dfbffffe 	.word	0xdfbffffe

08004420 <_fflush_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	4605      	mov	r5, r0
 8004426:	460c      	mov	r4, r1
 8004428:	b913      	cbnz	r3, 8004430 <_fflush_r+0x10>
 800442a:	2500      	movs	r5, #0
 800442c:	4628      	mov	r0, r5
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	b118      	cbz	r0, 800443a <_fflush_r+0x1a>
 8004432:	6a03      	ldr	r3, [r0, #32]
 8004434:	b90b      	cbnz	r3, 800443a <_fflush_r+0x1a>
 8004436:	f7ff f9a9 	bl	800378c <__sinit>
 800443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f3      	beq.n	800442a <_fflush_r+0xa>
 8004442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004444:	07d0      	lsls	r0, r2, #31
 8004446:	d404      	bmi.n	8004452 <_fflush_r+0x32>
 8004448:	0599      	lsls	r1, r3, #22
 800444a:	d402      	bmi.n	8004452 <_fflush_r+0x32>
 800444c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444e:	f7ff fb99 	bl	8003b84 <__retarget_lock_acquire_recursive>
 8004452:	4628      	mov	r0, r5
 8004454:	4621      	mov	r1, r4
 8004456:	f7ff ff61 	bl	800431c <__sflush_r>
 800445a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800445c:	4605      	mov	r5, r0
 800445e:	07da      	lsls	r2, r3, #31
 8004460:	d4e4      	bmi.n	800442c <_fflush_r+0xc>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	059b      	lsls	r3, r3, #22
 8004466:	d4e1      	bmi.n	800442c <_fflush_r+0xc>
 8004468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800446a:	f7ff fb8c 	bl	8003b86 <__retarget_lock_release_recursive>
 800446e:	e7dd      	b.n	800442c <_fflush_r+0xc>

08004470 <__swhatbuf_r>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	460c      	mov	r4, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	4615      	mov	r5, r2
 800447a:	2900      	cmp	r1, #0
 800447c:	461e      	mov	r6, r3
 800447e:	b096      	sub	sp, #88	; 0x58
 8004480:	da0c      	bge.n	800449c <__swhatbuf_r+0x2c>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	2100      	movs	r1, #0
 8004486:	f013 0f80 	tst.w	r3, #128	; 0x80
 800448a:	bf0c      	ite	eq
 800448c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004490:	2340      	movne	r3, #64	; 0x40
 8004492:	2000      	movs	r0, #0
 8004494:	6031      	str	r1, [r6, #0]
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	b016      	add	sp, #88	; 0x58
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	466a      	mov	r2, sp
 800449e:	f000 f87d 	bl	800459c <_fstat_r>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	dbed      	blt.n	8004482 <__swhatbuf_r+0x12>
 80044a6:	9901      	ldr	r1, [sp, #4]
 80044a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80044ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80044b0:	4259      	negs	r1, r3
 80044b2:	4159      	adcs	r1, r3
 80044b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b8:	e7eb      	b.n	8004492 <__swhatbuf_r+0x22>

080044ba <__smakebuf_r>:
 80044ba:	898b      	ldrh	r3, [r1, #12]
 80044bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044be:	079d      	lsls	r5, r3, #30
 80044c0:	4606      	mov	r6, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	d507      	bpl.n	80044d6 <__smakebuf_r+0x1c>
 80044c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	2301      	movs	r3, #1
 80044d0:	6163      	str	r3, [r4, #20]
 80044d2:	b002      	add	sp, #8
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	466a      	mov	r2, sp
 80044d8:	ab01      	add	r3, sp, #4
 80044da:	f7ff ffc9 	bl	8004470 <__swhatbuf_r>
 80044de:	9900      	ldr	r1, [sp, #0]
 80044e0:	4605      	mov	r5, r0
 80044e2:	4630      	mov	r0, r6
 80044e4:	f7ff fbb8 	bl	8003c58 <_malloc_r>
 80044e8:	b948      	cbnz	r0, 80044fe <__smakebuf_r+0x44>
 80044ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ee:	059a      	lsls	r2, r3, #22
 80044f0:	d4ef      	bmi.n	80044d2 <__smakebuf_r+0x18>
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	81a3      	strh	r3, [r4, #12]
 80044fc:	e7e3      	b.n	80044c6 <__smakebuf_r+0xc>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	6020      	str	r0, [r4, #0]
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	6120      	str	r0, [r4, #16]
 800450c:	6163      	str	r3, [r4, #20]
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	b15b      	cbz	r3, 800452a <__smakebuf_r+0x70>
 8004512:	4630      	mov	r0, r6
 8004514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004518:	f000 f852 	bl	80045c0 <_isatty_r>
 800451c:	b128      	cbz	r0, 800452a <__smakebuf_r+0x70>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	f023 0303 	bic.w	r3, r3, #3
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	431d      	orrs	r5, r3
 800452e:	81a5      	strh	r5, [r4, #12]
 8004530:	e7cf      	b.n	80044d2 <__smakebuf_r+0x18>

08004532 <_putc_r>:
 8004532:	b570      	push	{r4, r5, r6, lr}
 8004534:	460d      	mov	r5, r1
 8004536:	4614      	mov	r4, r2
 8004538:	4606      	mov	r6, r0
 800453a:	b118      	cbz	r0, 8004544 <_putc_r+0x12>
 800453c:	6a03      	ldr	r3, [r0, #32]
 800453e:	b90b      	cbnz	r3, 8004544 <_putc_r+0x12>
 8004540:	f7ff f924 	bl	800378c <__sinit>
 8004544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004546:	07d8      	lsls	r0, r3, #31
 8004548:	d405      	bmi.n	8004556 <_putc_r+0x24>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	0599      	lsls	r1, r3, #22
 800454e:	d402      	bmi.n	8004556 <_putc_r+0x24>
 8004550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004552:	f7ff fb17 	bl	8003b84 <__retarget_lock_acquire_recursive>
 8004556:	68a3      	ldr	r3, [r4, #8]
 8004558:	3b01      	subs	r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	60a3      	str	r3, [r4, #8]
 800455e:	da05      	bge.n	800456c <_putc_r+0x3a>
 8004560:	69a2      	ldr	r2, [r4, #24]
 8004562:	4293      	cmp	r3, r2
 8004564:	db12      	blt.n	800458c <_putc_r+0x5a>
 8004566:	b2eb      	uxtb	r3, r5
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d00f      	beq.n	800458c <_putc_r+0x5a>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	6022      	str	r2, [r4, #0]
 8004572:	701d      	strb	r5, [r3, #0]
 8004574:	b2ed      	uxtb	r5, r5
 8004576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004578:	07da      	lsls	r2, r3, #31
 800457a:	d405      	bmi.n	8004588 <_putc_r+0x56>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	059b      	lsls	r3, r3, #22
 8004580:	d402      	bmi.n	8004588 <_putc_r+0x56>
 8004582:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004584:	f7ff faff 	bl	8003b86 <__retarget_lock_release_recursive>
 8004588:	4628      	mov	r0, r5
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	4629      	mov	r1, r5
 800458e:	4622      	mov	r2, r4
 8004590:	4630      	mov	r0, r6
 8004592:	f7ff f9ea 	bl	800396a <__swbuf_r>
 8004596:	4605      	mov	r5, r0
 8004598:	e7ed      	b.n	8004576 <_putc_r+0x44>
	...

0800459c <_fstat_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	2300      	movs	r3, #0
 80045a0:	4d06      	ldr	r5, [pc, #24]	; (80045bc <_fstat_r+0x20>)
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	f7fc fbff 	bl	8000dac <_fstat>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d102      	bne.n	80045b8 <_fstat_r+0x1c>
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	b103      	cbz	r3, 80045b8 <_fstat_r+0x1c>
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
 80045ba:	bf00      	nop
 80045bc:	200003e8 	.word	0x200003e8

080045c0 <_isatty_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	2300      	movs	r3, #0
 80045c4:	4d05      	ldr	r5, [pc, #20]	; (80045dc <_isatty_r+0x1c>)
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	f7fc fbfd 	bl	8000dca <_isatty>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_isatty_r+0x1a>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_isatty_r+0x1a>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	200003e8 	.word	0x200003e8

080045e0 <_sbrk_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	2300      	movs	r3, #0
 80045e4:	4d05      	ldr	r5, [pc, #20]	; (80045fc <_sbrk_r+0x1c>)
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fc04 	bl	8000df8 <_sbrk>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_sbrk_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_sbrk_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	200003e8 	.word	0x200003e8

08004600 <memchr>:
 8004600:	4603      	mov	r3, r0
 8004602:	b510      	push	{r4, lr}
 8004604:	b2c9      	uxtb	r1, r1
 8004606:	4402      	add	r2, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	4618      	mov	r0, r3
 800460c:	d101      	bne.n	8004612 <memchr+0x12>
 800460e:	2000      	movs	r0, #0
 8004610:	e003      	b.n	800461a <memchr+0x1a>
 8004612:	7804      	ldrb	r4, [r0, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	428c      	cmp	r4, r1
 8004618:	d1f6      	bne.n	8004608 <memchr+0x8>
 800461a:	bd10      	pop	{r4, pc}

0800461c <_init>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr

08004628 <_fini>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr
