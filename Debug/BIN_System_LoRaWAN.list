
BIN_System_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004630  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080049dc  080049dc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049dc  080049dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08004a4c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08004a4c  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac7e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d4  00000000  00000000  0002ad52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  0002ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094c  00000000  00000000  0002da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188c6  00000000  00000000  0002e3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9c0  00000000  00000000  00046c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088453  00000000  00000000  0005562a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003984  00000000  00000000  000dda80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e1404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004724 	.word	0x08004724

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004724 	.word	0x08004724

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
void KIET_EnterStandBy();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b5b0      	push	{r4, r5, r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("MAIN==>RUNNIG\n");
 80001d6:	48aa      	ldr	r0, [pc, #680]	; (8000480 <main+0x2b0>)
 80001d8:	f003 fc00 	bl	80039dc <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fe04 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f978 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 fa54 	bl	8000690 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001e8:	f000 f9d2 	bl	8000590 <MX_I2C2_Init>
  MX_RTC_Init();
 80001ec:	f000 f9fe 	bl	80005ec <MX_RTC_Init>
  MX_SPI1_Init();
 80001f0:	f000 fa18 	bl	8000624 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  KIET_RTC_Init();
 80001f4:	f000 fae2 	bl	80007bc <KIET_RTC_Init>
  myLoRa = newLoRa();
 80001f8:	4ca2      	ldr	r4, [pc, #648]	; (8000484 <main+0x2b4>)
 80001fa:	463b      	mov	r3, r7
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fef3 	bl	8002fe8 <newLoRa>
 8000202:	4625      	mov	r5, r4
 8000204:	463c      	mov	r4, r7
 8000206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000212:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  //	LoRa_reset(&myLoRa);

	myLoRa.hSPIx                 = &hspi1;
 8000216:	4b9b      	ldr	r3, [pc, #620]	; (8000484 <main+0x2b4>)
 8000218:	4a9b      	ldr	r2, [pc, #620]	; (8000488 <main+0x2b8>)
 800021a:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = NSS_GPIO_Port;
 800021c:	4b99      	ldr	r3, [pc, #612]	; (8000484 <main+0x2b4>)
 800021e:	4a9b      	ldr	r2, [pc, #620]	; (800048c <main+0x2bc>)
 8000220:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = NSS_Pin;
 8000222:	4b98      	ldr	r3, [pc, #608]	; (8000484 <main+0x2b4>)
 8000224:	2210      	movs	r2, #16
 8000226:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = RST_GPIO_Port;
 8000228:	4b96      	ldr	r3, [pc, #600]	; (8000484 <main+0x2b4>)
 800022a:	4a99      	ldr	r2, [pc, #612]	; (8000490 <main+0x2c0>)
 800022c:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RST_Pin;
 800022e:	4b95      	ldr	r3, [pc, #596]	; (8000484 <main+0x2b4>)
 8000230:	2201      	movs	r2, #1
 8000232:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port			 = DIO0_GPIO_Port;
 8000234:	4b93      	ldr	r3, [pc, #588]	; (8000484 <main+0x2b4>)
 8000236:	4a95      	ldr	r2, [pc, #596]	; (800048c <main+0x2bc>)
 8000238:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin				 = DIO0_Pin;
 800023a:	4b92      	ldr	r3, [pc, #584]	; (8000484 <main+0x2b4>)
 800023c:	2202      	movs	r2, #2
 800023e:	829a      	strh	r2, [r3, #20]
	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000240:	4b90      	ldr	r3, [pc, #576]	; (8000484 <main+0x2b4>)
 8000242:	f240 12b1 	movw	r2, #433	; 0x1b1
 8000246:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000248:	4b8e      	ldr	r3, [pc, #568]	; (8000484 <main+0x2b4>)
 800024a:	2207      	movs	r2, #7
 800024c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth			 = BW_125KHz;				  // default = BW_125KHz
 8000250:	4b8c      	ldr	r3, [pc, #560]	; (8000484 <main+0x2b4>)
 8000252:	2207      	movs	r2, #7
 8000254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate				 = CR_4_5;						// default = CR_4_5
 8000258:	4b8a      	ldr	r3, [pc, #552]	; (8000484 <main+0x2b4>)
 800025a:	2201      	movs	r2, #1
 800025c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power				 = POWER_11db;				// default = 20db
 8000260:	4b88      	ldr	r3, [pc, #544]	; (8000484 <main+0x2b4>)
 8000262:	22f6      	movs	r2, #246	; 0xf6
 8000264:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000268:	4b86      	ldr	r3, [pc, #536]	; (8000484 <main+0x2b4>)
 800026a:	2278      	movs	r2, #120	; 0x78
 800026c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble				 = 8;		  					// default = 8;
 8000270:	4b84      	ldr	r3, [pc, #528]	; (8000484 <main+0x2b4>)
 8000272:	2208      	movs	r2, #8
 8000274:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000276:	4883      	ldr	r0, [pc, #524]	; (8000484 <main+0x2b4>)
 8000278:	f002 fedf 	bl	800303a <LoRa_reset>

	uint16_t loraStatus= LoRa_init(&myLoRa);
 800027c:	4881      	ldr	r0, [pc, #516]	; (8000484 <main+0x2b4>)
 800027e:	f003 f9e6 	bl	800364e <LoRa_init>
 8000282:	4603      	mov	r3, r0
 8000284:	86fb      	strh	r3, [r7, #54]	; 0x36
	for (uint8_t i = 0; i<= 127; i++) {
 8000286:	2300      	movs	r3, #0
 8000288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800028c:	e012      	b.n	80002b4 <main+0xe4>
		printf("%i--%d\n",i,LoRa_read(&myLoRa, i));
 800028e:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000296:	4619      	mov	r1, r3
 8000298:	487a      	ldr	r0, [pc, #488]	; (8000484 <main+0x2b4>)
 800029a:	f003 f893 	bl	80033c4 <LoRa_read>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4621      	mov	r1, r4
 80002a4:	487b      	ldr	r0, [pc, #492]	; (8000494 <main+0x2c4>)
 80002a6:	f003 fb2b 	bl	8003900 <iprintf>
	for (uint8_t i = 0; i<= 127; i++) {
 80002aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80002ae:	3301      	adds	r3, #1
 80002b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80002b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	dae8      	bge.n	800028e <main+0xbe>
	}

	if (loraStatus==LORA_OK) {
 80002bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80002be:	2bc8      	cmp	r3, #200	; 0xc8
 80002c0:	d10d      	bne.n	80002de <main+0x10e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	4872      	ldr	r0, [pc, #456]	; (8000490 <main+0x2c0>)
 80002c8:	f001 f8a6 	bl	8001418 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80002cc:	2064      	movs	r0, #100	; 0x64
 80002ce:	f000 fded 	bl	8000eac <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2120      	movs	r1, #32
 80002d6:	486e      	ldr	r0, [pc, #440]	; (8000490 <main+0x2c0>)
 80002d8:	f001 f89e 	bl	8001418 <HAL_GPIO_WritePin>
 80002dc:	e01c      	b.n	8000318 <main+0x148>
	} else {
		for (uint8_t i = 0; i<= 10; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80002e4:	e014      	b.n	8000310 <main+0x140>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	4869      	ldr	r0, [pc, #420]	; (8000490 <main+0x2c0>)
 80002ec:	f001 f894 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 fddb 	bl	8000eac <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	4865      	ldr	r0, [pc, #404]	; (8000490 <main+0x2c0>)
 80002fc:	f001 f88c 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000300:	2064      	movs	r0, #100	; 0x64
 8000302:	f000 fdd3 	bl	8000eac <HAL_Delay>
		for (uint8_t i = 0; i<= 10; i++) {
 8000306:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800030a:	3301      	adds	r3, #1
 800030c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000310:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000314:	2b0a      	cmp	r3, #10
 8000316:	d9e6      	bls.n	80002e6 <main+0x116>
		}
	}
	printf("CHECK POINT 5\n");
 8000318:	485f      	ldr	r0, [pc, #380]	; (8000498 <main+0x2c8>)
 800031a:	f003 fb5f 	bl	80039dc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("#ORG# I AM RUNNING!-!\n");
 800031e:	485f      	ldr	r0, [pc, #380]	; (800049c <main+0x2cc>)
 8000320:	f003 fb5c 	bl	80039dc <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8000324:	4b5e      	ldr	r3, [pc, #376]	; (80004a0 <main+0x2d0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a5d      	ldr	r2, [pc, #372]	; (80004a0 <main+0x2d0>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6013      	str	r3, [r2, #0]

	  send_data[0] = 0x30; // MY ADDRESS
 8000330:	4b5c      	ldr	r3, [pc, #368]	; (80004a4 <main+0x2d4>)
 8000332:	2230      	movs	r2, #48	; 0x30
 8000334:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<26; i++) send_data[i+1] = 48+i;
 8000336:	2300      	movs	r3, #0
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
 800033a:	e00a      	b.n	8000352 <main+0x182>
 800033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800033e:	b2da      	uxtb	r2, r3
 8000340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000342:	3301      	adds	r3, #1
 8000344:	3230      	adds	r2, #48	; 0x30
 8000346:	b2d1      	uxtb	r1, r2
 8000348:	4a56      	ldr	r2, [pc, #344]	; (80004a4 <main+0x2d4>)
 800034a:	54d1      	strb	r1, [r2, r3]
 800034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800034e:	3301      	adds	r3, #1
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
 8000352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000354:	2b19      	cmp	r3, #25
 8000356:	ddf1      	ble.n	800033c <main+0x16c>
	  uint8_t flag = LoRa_transmit(&myLoRa, send_data, 4, 1000);
 8000358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035c:	2204      	movs	r2, #4
 800035e:	4951      	ldr	r1, [pc, #324]	; (80004a4 <main+0x2d4>)
 8000360:	4848      	ldr	r0, [pc, #288]	; (8000484 <main+0x2b4>)
 8000362:	f003 f8b7 	bl	80034d4 <LoRa_transmit>
 8000366:	4603      	mov	r3, r0
 8000368:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  if (flag) {
 800036c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00f      	beq.n	8000394 <main+0x1c4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2120      	movs	r1, #32
 8000378:	4845      	ldr	r0, [pc, #276]	; (8000490 <main+0x2c0>)
 800037a:	f001 f84d 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800037e:	2064      	movs	r0, #100	; 0x64
 8000380:	f000 fd94 	bl	8000eac <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	4841      	ldr	r0, [pc, #260]	; (8000490 <main+0x2c0>)
 800038a:	f001 f845 	bl	8001418 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800038e:	2064      	movs	r0, #100	; 0x64
 8000390:	f000 fd8c 	bl	8000eac <HAL_Delay>
	  }

	  HAL_Delay(2000);
 8000394:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000398:	f000 fd88 	bl	8000eac <HAL_Delay>
	  LoRa_receive(&myLoRa, read_data, 128);
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	4942      	ldr	r1, [pc, #264]	; (80004a8 <main+0x2d8>)
 80003a0:	4838      	ldr	r0, [pc, #224]	; (8000484 <main+0x2b4>)
 80003a2:	f003 f8f4 	bl	800358e <LoRa_receive>
	  printf("RECEIVE\n");
 80003a6:	4841      	ldr	r0, [pc, #260]	; (80004ac <main+0x2dc>)
 80003a8:	f003 fb18 	bl	80039dc <puts>
	  if (read_data[0] != 0) {
 80003ac:	4b3e      	ldr	r3, [pc, #248]	; (80004a8 <main+0x2d8>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d017      	beq.n	80003e4 <main+0x214>
				printf("Receive Data\n");
 80003b4:	483e      	ldr	r0, [pc, #248]	; (80004b0 <main+0x2e0>)
 80003b6:	f003 fb11 	bl	80039dc <puts>
				printf("%ul",read_data[0]);
 80003ba:	4b3b      	ldr	r3, [pc, #236]	; (80004a8 <main+0x2d8>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	4619      	mov	r1, r3
 80003c0:	483c      	ldr	r0, [pc, #240]	; (80004b4 <main+0x2e4>)
 80003c2:	f003 fa9d 	bl	8003900 <iprintf>
				printf("%c", read_data[0]);
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <main+0x2d8>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 faaa 	bl	8003924 <putchar>
				printf("%c", read_data[1]);
 80003d0:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <main+0x2d8>)
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 faa5 	bl	8003924 <putchar>
				memset(read_data, 0, sizeof(read_data));
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	2100      	movs	r1, #0
 80003de:	4832      	ldr	r0, [pc, #200]	; (80004a8 <main+0x2d8>)
 80003e0:	f003 fbdc 	bl	8003b9c <memset>
	  } else {
				;
	  }
	  KIET_ToggleLED();
 80003e4:	f000 fb12 	bl	8000a0c <KIET_ToggleLED>
	  HAL_Delay(100);
 80003e8:	2064      	movs	r0, #100	; 0x64
 80003ea:	f000 fd5f 	bl	8000eac <HAL_Delay>
	  	printf("CHECK RTC_CRL_ALRG %d\n", READ_BIT(RTC->CRL, RTC_CRL_ALRF));
 80003ee:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <main+0x2e8>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	f003 0302 	and.w	r3, r3, #2
 80003f6:	4619      	mov	r1, r3
 80003f8:	4830      	ldr	r0, [pc, #192]	; (80004bc <main+0x2ec>)
 80003fa:	f003 fa81 	bl	8003900 <iprintf>
	  	printf("CHEKC RTC_ DIVH %d, and DIVL: %d\n ", RTC->DIVH ,RTC->DIVL);
 80003fe:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <main+0x2e8>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	4a2d      	ldr	r2, [pc, #180]	; (80004b8 <main+0x2e8>)
 8000404:	6952      	ldr	r2, [r2, #20]
 8000406:	4619      	mov	r1, r3
 8000408:	482d      	ldr	r0, [pc, #180]	; (80004c0 <main+0x2f0>)
 800040a:	f003 fa79 	bl	8003900 <iprintf>
	  	printf("CHEKC RTC_ CNTH  %d, and CNTL: %d\n" , RTC->CNTH ,RTC->CNTL);
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <main+0x2e8>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a29      	ldr	r2, [pc, #164]	; (80004b8 <main+0x2e8>)
 8000414:	69d2      	ldr	r2, [r2, #28]
 8000416:	4619      	mov	r1, r3
 8000418:	482a      	ldr	r0, [pc, #168]	; (80004c4 <main+0x2f4>)
 800041a:	f003 fa71 	bl	8003900 <iprintf>
	  	printf("CHEKC RTC_ ANRL: %d, and ANRH: %d\n" , RTC->ALRH ,RTC->ALRL);
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <main+0x2e8>)
 8000420:	6a1b      	ldr	r3, [r3, #32]
 8000422:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <main+0x2e8>)
 8000424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000426:	4619      	mov	r1, r3
 8000428:	4827      	ldr	r0, [pc, #156]	; (80004c8 <main+0x2f8>)
 800042a:	f003 fa69 	bl	8003900 <iprintf>
	  	if (READ_BIT(RTC->CRL, RTC_CRL_ALRF)!=0) {
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <main+0x2e8>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f003 0302 	and.w	r3, r3, #2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d019      	beq.n	800046e <main+0x29e>
	  		printf("Alter alrm");
 800043a:	4824      	ldr	r0, [pc, #144]	; (80004cc <main+0x2fc>)
 800043c:	f003 fa60 	bl	8003900 <iprintf>
	  		CLEAR_BIT(RTC->CRL, RTC_CRL_ALRF);
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <main+0x2e8>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <main+0x2e8>)
 8000446:	f023 0302 	bic.w	r3, r3, #2
 800044a:	6053      	str	r3, [r2, #4]
	  		KIET_revise();
 800044c:	f000 faa0 	bl	8000990 <KIET_revise>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	480e      	ldr	r0, [pc, #56]	; (8000490 <main+0x2c0>)
 8000458:	f000 ffde 	bl	8001418 <HAL_GPIO_WritePin>
	  		HAL_Delay(100);
 800045c:	2064      	movs	r0, #100	; 0x64
 800045e:	f000 fd25 	bl	8000eac <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <main+0x2c0>)
 800046a:	f000 ffd5 	bl	8001418 <HAL_GPIO_WritePin>
	  	}
	  KIET_revise();
 800046e:	f000 fa8f 	bl	8000990 <KIET_revise>
	  printf("#GRN#GO TO STAND BY!-!\n");
 8000472:	4817      	ldr	r0, [pc, #92]	; (80004d0 <main+0x300>)
 8000474:	f003 fab2 	bl	80039dc <puts>
	  KIET_EnterStandBy();
 8000478:	f000 fad4 	bl	8000a24 <KIET_EnterStandBy>
  {
 800047c:	e74f      	b.n	800031e <main+0x14e>
 800047e:	bf00      	nop
 8000480:	0800473c 	.word	0x0800473c
 8000484:	20000144 	.word	0x20000144
 8000488:	200000ec 	.word	0x200000ec
 800048c:	40010800 	.word	0x40010800
 8000490:	40010c00 	.word	0x40010c00
 8000494:	0800474c 	.word	0x0800474c
 8000498:	08004754 	.word	0x08004754
 800049c:	08004764 	.word	0x08004764
 80004a0:	40007000 	.word	0x40007000
 80004a4:	200001f0 	.word	0x200001f0
 80004a8:	20000170 	.word	0x20000170
 80004ac:	0800477c 	.word	0x0800477c
 80004b0:	08004784 	.word	0x08004784
 80004b4:	08004794 	.word	0x08004794
 80004b8:	40002800 	.word	0x40002800
 80004bc:	08004798 	.word	0x08004798
 80004c0:	080047b0 	.word	0x080047b0
 80004c4:	080047d4 	.word	0x080047d4
 80004c8:	080047f8 	.word	0x080047f8
 80004cc:	0800481c 	.word	0x0800481c
 80004d0:	08004828 	.word	0x08004828

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	; 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fb5a 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000504:	2309      	movs	r3, #9
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000516:	2301      	movs	r3, #1
 8000518:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000524:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000528:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052e:	4618      	mov	r0, r3
 8000530:	f001 f940 	bl	80017b4 <HAL_RCC_OscConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800053a:	f000 fa91 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	230f      	movs	r3, #15
 8000540:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	2302      	movs	r3, #2
 8000544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800054a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2102      	movs	r1, #2
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fbac 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000566:	f000 fa7b 	bl	8000a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800056a:	2301      	movs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800056e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fd2c 	bl	8001fd4 <HAL_RCCEx_PeriphCLKConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000582:	f000 fa6d 	bl	8000a60 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3750      	adds	r7, #80	; 0x50
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_I2C2_Init+0x50>)
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <MX_I2C2_Init+0x54>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_I2C2_Init+0x50>)
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_I2C2_Init+0x58>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_I2C2_Init+0x50>)
 80005ce:	f000 ff6d 	bl	80014ac <HAL_I2C_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80005d8:	f000 fa42 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000084 	.word	0x20000084
 80005e4:	40005800 	.word	0x40005800
 80005e8:	000186a0 	.word	0x000186a0

080005ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_RTC_Init+0x30>)
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <MX_RTC_Init+0x34>)
 80005f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_RTC_Init+0x30>)
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_RTC_Init+0x30>)
 8000600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000604:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_RTC_Init+0x30>)
 8000608:	f001 fe50 	bl	80022ac <HAL_RTC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000612:	f000 fa25 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000d8 	.word	0x200000d8
 8000620:	40002800 	.word	0x40002800

08000624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_SPI1_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_SPI1_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_SPI1_Init+0x64>)
 8000630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI1_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI1_Init+0x64>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI1_Init+0x64>)
 8000658:	2210      	movs	r2, #16
 800065a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI1_Init+0x64>)
 8000670:	220a      	movs	r2, #10
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SPI1_Init+0x64>)
 8000676:	f001 ff22 	bl	80024be <HAL_SPI_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 f9ee 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000ec 	.word	0x200000ec
 800068c:	40013000 	.word	0x40013000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a40      	ldr	r2, [pc, #256]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006c2:	f043 0320 	orr.w	r3, r3, #32
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b35      	ldr	r3, [pc, #212]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a34      	ldr	r2, [pc, #208]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <MX_GPIO_Init+0x11c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2110      	movs	r1, #16
 8000708:	4829      	ldr	r0, [pc, #164]	; (80007b0 <MX_GPIO_Init+0x120>)
 800070a:	f000 fe85 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	4828      	ldr	r0, [pc, #160]	; (80007b4 <MX_GPIO_Init+0x124>)
 8000714:	f000 fe80 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|GPIO_PIN_7|GPIO_PIN_8
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800071e:	4825      	ldr	r0, [pc, #148]	; (80007b4 <MX_GPIO_Init+0x124>)
 8000720:	f000 fe7a 	bl	8001418 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_GPIO_Init+0x128>)
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	481e      	ldr	r0, [pc, #120]	; (80007b0 <MX_GPIO_Init+0x120>)
 8000738:	f000 fcea 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800073c:	2310      	movs	r3, #16
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4817      	ldr	r0, [pc, #92]	; (80007b0 <MX_GPIO_Init+0x120>)
 8000754:	f000 fcdc 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x124>)
 8000770:	f000 fcce 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GPIO_PIN_7|GPIO_PIN_8
 8000774:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000778:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_GPIO_Init+0x124>)
 800078e:	f000 fcbf 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	2007      	movs	r0, #7
 8000798:	f000 fc83 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800079c:	2007      	movs	r0, #7
 800079e:	f000 fc9c 	bl	80010da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800
 80007b4:	40010c00 	.word	0x40010c00
 80007b8:	10110000 	.word	0x10110000

080007bc <KIET_RTC_Init>:

/* USER CODE BEGIN 4 */

void KIET_RTC_Init(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	/** @note */

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a24      	ldr	r2, [pc, #144]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007d8:	61d3      	str	r3, [r2, #28]

	SET_BIT(PWR->CR, PWR_CR_DBP);
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <KIET_RTC_Init+0xac>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a22      	ldr	r2, [pc, #136]	; (8000868 <KIET_RTC_Init+0xac>)
 80007e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e4:	6013      	str	r3, [r2, #0]

	printf("CHEKC POINT -1: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY));
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	4619      	mov	r1, r3
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <KIET_RTC_Init+0xb0>)
 80007f2:	f003 f885 	bl	8003900 <iprintf>
	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <KIET_RTC_Init+0xa8>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6213      	str	r3, [r2, #32]
	uint8_t count = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	71fb      	strb	r3, [r7, #7]

	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 8000806:	e009      	b.n	800081c <KIET_RTC_Init+0x60>
		count++;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	3301      	adds	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
		if (count>100) {
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b64      	cmp	r3, #100	; 0x64
 8000812:	d903      	bls.n	800081c <KIET_RTC_Init+0x60>
			printf("Have a problem for connecting the External Crystal Clock!");
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <KIET_RTC_Init+0xb4>)
 8000816:	f003 f873 	bl	8003900 <iprintf>
			break;
 800081a:	e005      	b.n	8000828 <KIET_RTC_Init+0x6c>
	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <KIET_RTC_Init+0xa8>)
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0ef      	beq.n	8000808 <KIET_RTC_Init+0x4c>
		} else;
	}

	SET_BIT(RCC->BDCR, 9);
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <KIET_RTC_Init+0xa8>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <KIET_RTC_Init+0xa8>)
 800082e:	f043 0309 	orr.w	r3, r3, #9
 8000832:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(RCC->BDCR, 8);
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <KIET_RTC_Init+0xa8>)
 8000836:	6a1b      	ldr	r3, [r3, #32]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <KIET_RTC_Init+0xa8>)
 800083a:	f023 0308 	bic.w	r3, r3, #8
 800083e:	6213      	str	r3, [r2, #32]
	SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <KIET_RTC_Init+0xa8>)
 8000842:	6a1b      	ldr	r3, [r3, #32]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <KIET_RTC_Init+0xa8>)
 8000846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084a:	6213      	str	r3, [r2, #32]
	printf("CHEKC POINT -1: %d\n", RCC->BDCR);
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <KIET_RTC_Init+0xa8>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <KIET_RTC_Init+0xb0>)
 8000854:	f003 f854 	bl	8003900 <iprintf>
	 * 10: LSI oscillator clock used as RTC clock
	 * 11: HSE oscillator clock divided by 128 used as RTC clock*/



	KIET_configure_rtc_register();
 8000858:	f000 f80c 	bl	8000874 <KIET_configure_rtc_register>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	40007000 	.word	0x40007000
 800086c:	08004840 	.word	0x08004840
 8000870:	08004854 	.word	0x08004854

08000874 <KIET_configure_rtc_register>:



void KIET_configure_rtc_register() {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	/* 1. Poll RTOFF, wait until its value goes to ‘1
	 * 2. Set the CNF bit to enter configuration mode
	 * 3. Write to one or more RTC registers
	 * 4. Clear the CNF bit to exit configuration mode
	 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
	printf("CHEKC POINT 0: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)); //OKEE ==> VẤn đ�? ở CLOK chưa được kết nối vào
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <KIET_configure_rtc_register+0xf4>)
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	4619      	mov	r1, r3
 8000882:	483a      	ldr	r0, [pc, #232]	; (800096c <KIET_configure_rtc_register+0xf8>)
 8000884:	f003 f83c 	bl	8003900 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 8000888:	e002      	b.n	8000890 <KIET_configure_rtc_register+0x1c>
 800088a:	4839      	ldr	r0, [pc, #228]	; (8000970 <KIET_configure_rtc_register+0xfc>)
 800088c:	f003 f8a6 	bl	80039dc <puts>
 8000890:	4b38      	ldr	r3, [pc, #224]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0320 	and.w	r3, r3, #32
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0f6      	beq.n	800088a <KIET_configure_rtc_register+0x16>
	SET_BIT(RTC->CRL, RTC_CRL_CNF);
 800089c:	4b35      	ldr	r3, [pc, #212]	; (8000974 <KIET_configure_rtc_register+0x100>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a34      	ldr	r2, [pc, #208]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 1: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80008a8:	4b32      	ldr	r3, [pc, #200]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	4619      	mov	r1, r3
 80008b2:	4831      	ldr	r0, [pc, #196]	; (8000978 <KIET_configure_rtc_register+0x104>)
 80008b4:	f003 f824 	bl	8003900 <iprintf>
	/*Begin for writing to RTC Register - Write one or more RTC register*/
	RTC->PRLH = 0U;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 0x7FFFU;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80008c4:	60da      	str	r2, [r3, #12]
	printf("CHEKC POINT 2: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	4619      	mov	r1, r3
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <KIET_configure_rtc_register+0x108>)
 80008d2:	f003 f815 	bl	8003900 <iprintf>
	RTC->DIVH = 0x0000U;
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
	RTC->DIVL = 0x8000U;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008e2:	615a      	str	r2, [r3, #20]
	printf("CHEKC POINT 3: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	4619      	mov	r1, r3
 80008ee:	4824      	ldr	r0, [pc, #144]	; (8000980 <KIET_configure_rtc_register+0x10c>)
 80008f0:	f003 f806 	bl	8003900 <iprintf>
	RTC->CNTH = 0x0000U;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
	RTC->CNTL = 0x0000U;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <KIET_configure_rtc_register+0x100>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]

	RTC->ALRH = 0x0000U;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
	RTC->ALRL = 0x000FU;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000908:	220f      	movs	r2, #15
 800090a:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <KIET_configure_rtc_register+0x100>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	6013      	str	r3, [r2, #0]
	SET_BIT(RTC->CRH, RTC_CRH_OWIE);
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <KIET_configure_rtc_register+0x100>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <KIET_configure_rtc_register+0x100>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6013      	str	r3, [r2, #0]
	//	SET_BIT(RTC->CRH, RTC_CRH_SECIE);
	/*End of writing to RTC register*/
	CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <KIET_configure_rtc_register+0x100>)
 800092a:	f023 0310 	bic.w	r3, r3, #16
 800092e:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 4: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0320 	and.w	r3, r3, #32
 8000938:	4619      	mov	r1, r3
 800093a:	4812      	ldr	r0, [pc, #72]	; (8000984 <KIET_configure_rtc_register+0x110>)
 800093c:	f002 ffe0 	bl	8003900 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 8000940:	e007      	b.n	8000952 <KIET_configure_rtc_register+0xde>
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	4619      	mov	r1, r3
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <KIET_configure_rtc_register+0x114>)
 800094e:	f002 ffd7 	bl	8003900 <iprintf>
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <KIET_configure_rtc_register+0x100>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f1      	beq.n	8000942 <KIET_configure_rtc_register+0xce>
	printf("Done configuration RTC\n");
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <KIET_configure_rtc_register+0x118>)
 8000960:	f003 f83c 	bl	80039dc <puts>

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	08004890 	.word	0x08004890
 8000970:	080048a4 	.word	0x080048a4
 8000974:	40002800 	.word	0x40002800
 8000978:	080048b8 	.word	0x080048b8
 800097c:	080048cc 	.word	0x080048cc
 8000980:	080048e0 	.word	0x080048e0
 8000984:	080048f4 	.word	0x080048f4
 8000988:	08004908 	.word	0x08004908
 800098c:	0800492c 	.word	0x0800492c

08000990 <KIET_revise>:


void KIET_revise() {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 8000994:	e002      	b.n	800099c <KIET_revise+0xc>
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <KIET_revise+0x70>)
 8000998:	f003 f820 	bl	80039dc <puts>
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <KIET_revise+0x74>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0320 	and.w	r3, r3, #32
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f6      	beq.n	8000996 <KIET_revise+0x6>
		SET_BIT(RTC->CRL, RTC_CRL_CNF);
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <KIET_revise+0x74>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <KIET_revise+0x74>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6053      	str	r3, [r2, #4]
		/*Begin for writing to RTC Register - Write one or more RTC register*/
		RTC->DIVH = 0x0000U;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <KIET_revise+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
		RTC->DIVL = 0x8000U;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <KIET_revise+0x74>)
 80009bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009c0:	615a      	str	r2, [r3, #20]
		RTC->CNTH = 0x0000U;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <KIET_revise+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
		RTC->CNTL = 0x0000U;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <KIET_revise+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
		/*End of writing to RTC register*/
		CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <KIET_revise+0x74>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <KIET_revise+0x74>)
 80009d4:	f023 0310 	bic.w	r3, r3, #16
 80009d8:	6053      	str	r3, [r2, #4]
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 80009da:	e007      	b.n	80009ec <KIET_revise+0x5c>
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <KIET_revise+0x74>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <KIET_revise+0x78>)
 80009e8:	f002 ff8a 	bl	8003900 <iprintf>
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <KIET_revise+0x74>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0320 	and.w	r3, r3, #32
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f1      	beq.n	80009dc <KIET_revise+0x4c>
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	080048a4 	.word	0x080048a4
 8000a04:	40002800 	.word	0x40002800
 8000a08:	08004908 	.word	0x08004908

08000a0c <KIET_ToggleLED>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
}

void KIET_ToggleLED() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <KIET_ToggleLED+0x14>)
 8000a16:	f000 fd17 	bl	8001448 <HAL_GPIO_TogglePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <KIET_EnterStandBy>:

void KIET_EnterStandBy() {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	printf("Entering StandBy");
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <KIET_EnterStandBy+0x1c>)
 8000a2a:	f002 ff69 	bl	8003900 <iprintf>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000a2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a32:	f000 fe8b 	bl	800174c <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 8000a36:	f000 fea5 	bl	8001784 <HAL_PWR_EnterSTANDBYMode>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08004944 	.word	0x08004944

08000a44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
//		HAL_Delay(100);
//		LoRa_receive(&myLoRa, read_data, 128);
//	} else {
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//	}
	printf("#RED# Callback");
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x18>)
 8000a50:	f002 ff56 	bl	8003900 <iprintf>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	08004958 	.word	0x08004958

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x5c>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_MspInit+0x60>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_MspInit+0x60>)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_I2C_MspInit+0x74>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d124      	bne.n	8000b3a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_I2C_MspInit+0x78>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_I2C_MspInit+0x78>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_I2C_MspInit+0x78>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0308 	and.w	r3, r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0e:	2312      	movs	r3, #18
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <HAL_I2C_MspInit+0x7c>)
 8000b1e:	f000 faf7 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_I2C_MspInit+0x78>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_I2C_MspInit+0x78>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_I2C_MspInit+0x78>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40005800 	.word	0x40005800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_RTC_MspInit+0x3c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d110      	bne.n	8000b84 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000b62:	f000 fde7 	bl	8001734 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_RTC_MspInit+0x40>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <HAL_RTC_MspInit+0x40>)
 8000b6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <HAL_RTC_MspInit+0x40>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_RTC_MspInit+0x44>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40002800 	.word	0x40002800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	4242043c 	.word	0x4242043c

08000b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <HAL_SPI_MspInit+0x88>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d12f      	bne.n	8000c18 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_SPI_MspInit+0x90>)
 8000bfc:	f000 fa88 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_SPI_MspInit+0x90>)
 8000c14:	f000 fa7c 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40013000 	.word	0x40013000
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f000 f8ff 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f000 fbfc 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
  }

  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f002 ff70 	bl	8003c38 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20005000 	.word	0x20005000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	20000270 	.word	0x20000270
 8000d8c:	200003c8 	.word	0x200003c8

08000d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d9c:	f7ff fff8 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000da2:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000db8:	4c09      	ldr	r4, [pc, #36]	; (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f002 ff3d 	bl	8003c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dca:	f7ff fa01 	bl	80001d0 <main>
  bx lr
 8000dce:	4770      	bx	lr
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dd8:	080049e4 	.word	0x080049e4
  ldr r2, =_sbss
 8000ddc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000de0:	200003c4 	.word	0x200003c4

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x28>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x28>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f947 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe32 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f95f 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f927 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_IncTick+0x1c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_IncTick+0x20>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <HAL_IncTick+0x20>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000274 	.word	0x20000274

08000e98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <HAL_GetTick+0x10>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20000274 	.word	0x20000274

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fff0 	bl	8000e98 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffe0 	bl	8000e98 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <__NVIC_SetPriorityGrouping>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4906      	ldr	r1, [pc, #24]	; (8000f8c <__NVIC_EnableIRQ+0x34>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SysTick_Config>:
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff90 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff2d 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff42 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff90 	bl	8000fe4 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5f 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff35 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffa2 	bl	8001048 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e169      	b.n	80013f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001124:	2201      	movs	r2, #1
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8158 	bne.w	80013f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4a9a      	ldr	r2, [pc, #616]	; (80013b0 <HAL_GPIO_Init+0x2a0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d05e      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 800114c:	4a98      	ldr	r2, [pc, #608]	; (80013b0 <HAL_GPIO_Init+0x2a0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d875      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001152:	4a98      	ldr	r2, [pc, #608]	; (80013b4 <HAL_GPIO_Init+0x2a4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d058      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001158:	4a96      	ldr	r2, [pc, #600]	; (80013b4 <HAL_GPIO_Init+0x2a4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d86f      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800115e:	4a96      	ldr	r2, [pc, #600]	; (80013b8 <HAL_GPIO_Init+0x2a8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d052      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001164:	4a94      	ldr	r2, [pc, #592]	; (80013b8 <HAL_GPIO_Init+0x2a8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d869      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800116a:	4a94      	ldr	r2, [pc, #592]	; (80013bc <HAL_GPIO_Init+0x2ac>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d04c      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001170:	4a92      	ldr	r2, [pc, #584]	; (80013bc <HAL_GPIO_Init+0x2ac>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d863      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001176:	4a92      	ldr	r2, [pc, #584]	; (80013c0 <HAL_GPIO_Init+0x2b0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d046      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 800117c:	4a90      	ldr	r2, [pc, #576]	; (80013c0 <HAL_GPIO_Init+0x2b0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d85d      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d82a      	bhi.n	80011dc <HAL_GPIO_Init+0xcc>
 8001186:	2b12      	cmp	r3, #18
 8001188:	d859      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800118a:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <HAL_GPIO_Init+0x80>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	0800120b 	.word	0x0800120b
 8001194:	080011e5 	.word	0x080011e5
 8001198:	080011f7 	.word	0x080011f7
 800119c:	08001239 	.word	0x08001239
 80011a0:	0800123f 	.word	0x0800123f
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	0800123f 	.word	0x0800123f
 80011ac:	0800123f 	.word	0x0800123f
 80011b0:	0800123f 	.word	0x0800123f
 80011b4:	0800123f 	.word	0x0800123f
 80011b8:	0800123f 	.word	0x0800123f
 80011bc:	0800123f 	.word	0x0800123f
 80011c0:	0800123f 	.word	0x0800123f
 80011c4:	0800123f 	.word	0x0800123f
 80011c8:	0800123f 	.word	0x0800123f
 80011cc:	0800123f 	.word	0x0800123f
 80011d0:	0800123f 	.word	0x0800123f
 80011d4:	080011ed 	.word	0x080011ed
 80011d8:	08001201 	.word	0x08001201
 80011dc:	4a79      	ldr	r2, [pc, #484]	; (80013c4 <HAL_GPIO_Init+0x2b4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011e2:	e02c      	b.n	800123e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e029      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	3304      	adds	r3, #4
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e024      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	3308      	adds	r3, #8
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e01f      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	330c      	adds	r3, #12
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e01a      	b.n	8001240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001212:	2304      	movs	r3, #4
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e013      	b.n	8001240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	611a      	str	r2, [r3, #16]
          break;
 800122a:	e009      	b.n	8001240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800122c:	2308      	movs	r3, #8
 800122e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	615a      	str	r2, [r3, #20]
          break;
 8001236:	e003      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x130>
          break;
 800123e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d801      	bhi.n	800124a <HAL_GPIO_Init+0x13a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	e001      	b.n	800124e <HAL_GPIO_Init+0x13e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3304      	adds	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d802      	bhi.n	800125c <HAL_GPIO_Init+0x14c>
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x152>
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	3b08      	subs	r3, #8
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	210f      	movs	r1, #15
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	6a39      	ldr	r1, [r7, #32]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	431a      	orrs	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80b1 	beq.w	80013f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x2b8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a8:	4a48      	ldr	r2, [pc, #288]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1e8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a3e      	ldr	r2, [pc, #248]	; (80013d8 <HAL_GPIO_Init+0x2c8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1e4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1e0>
 80012ec:	2303      	movs	r3, #3
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012f0:	2304      	movs	r3, #4
 80012f2:	e004      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012fc:	2300      	movs	r3, #0
 80012fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001300:	f002 0203 	and.w	r2, r2, #3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4093      	lsls	r3, r2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800130e:	492f      	ldr	r1, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	492c      	ldr	r1, [pc, #176]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	608b      	str	r3, [r1, #8]
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	43db      	mvns	r3, r3
 800133e:	4928      	ldr	r1, [pc, #160]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001340:	4013      	ands	r3, r2
 8001342:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	4922      	ldr	r1, [pc, #136]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	60cb      	str	r3, [r1, #12]
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	43db      	mvns	r3, r3
 8001366:	491e      	ldr	r1, [pc, #120]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001368:	4013      	ands	r3, r2
 800136a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4918      	ldr	r1, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	4914      	ldr	r1, [pc, #80]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d021      	beq.n	80013e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
 80013ac:	e021      	b.n	80013f2 <HAL_GPIO_Init+0x2e2>
 80013ae:	bf00      	nop
 80013b0:	10320000 	.word	0x10320000
 80013b4:	10310000 	.word	0x10310000
 80013b8:	10220000 	.word	0x10220000
 80013bc:	10210000 	.word	0x10210000
 80013c0:	10120000 	.word	0x10120000
 80013c4:	10110000 	.word	0x10110000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40011400 	.word	0x40011400
 80013e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	4909      	ldr	r1, [pc, #36]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3301      	adds	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f47f ae8e 	bne.w	8001124 <HAL_GPIO_Init+0x14>
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	372c      	adds	r7, #44	; 0x2c
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43d9      	mvns	r1, r3
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	400b      	ands	r3, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fad2 	bl	8000a44 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e12b      	b.n	8001716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fafc 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800150e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001510:	f000 fd1a 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8001514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a81      	ldr	r2, [pc, #516]	; (8001720 <HAL_I2C_Init+0x274>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d807      	bhi.n	8001530 <HAL_I2C_Init+0x84>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a80      	ldr	r2, [pc, #512]	; (8001724 <HAL_I2C_Init+0x278>)
 8001524:	4293      	cmp	r3, r2
 8001526:	bf94      	ite	ls
 8001528:	2301      	movls	r3, #1
 800152a:	2300      	movhi	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e006      	b.n	800153e <HAL_I2C_Init+0x92>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a7d      	ldr	r2, [pc, #500]	; (8001728 <HAL_I2C_Init+0x27c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0e7      	b.n	8001716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4a78      	ldr	r2, [pc, #480]	; (800172c <HAL_I2C_Init+0x280>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a6a      	ldr	r2, [pc, #424]	; (8001720 <HAL_I2C_Init+0x274>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d802      	bhi.n	8001580 <HAL_I2C_Init+0xd4>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	e009      	b.n	8001594 <HAL_I2C_Init+0xe8>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	4a69      	ldr	r2, [pc, #420]	; (8001730 <HAL_I2C_Init+0x284>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	3301      	adds	r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	430b      	orrs	r3, r1
 800159a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	495c      	ldr	r1, [pc, #368]	; (8001720 <HAL_I2C_Init+0x274>)
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d819      	bhi.n	80015e8 <HAL_I2C_Init+0x13c>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1e59      	subs	r1, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015c8:	400b      	ands	r3, r1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00a      	beq.n	80015e4 <HAL_I2C_Init+0x138>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1e59      	subs	r1, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015dc:	3301      	adds	r3, #1
 80015de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e2:	e051      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 80015e4:	2304      	movs	r3, #4
 80015e6:	e04f      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d111      	bne.n	8001614 <HAL_I2C_Init+0x168>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	e012      	b.n	800163a <HAL_I2C_Init+0x18e>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1e58      	subs	r0, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	0099      	lsls	r1, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	fbb0 f3f3 	udiv	r3, r0, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x196>
 800163e:	2301      	movs	r3, #1
 8001640:	e022      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10e      	bne.n	8001668 <HAL_I2C_Init+0x1bc>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e58      	subs	r0, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6859      	ldr	r1, [r3, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	440b      	add	r3, r1
 8001658:	fbb0 f3f3 	udiv	r3, r0, r3
 800165c:	3301      	adds	r3, #1
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001666:	e00f      	b.n	8001688 <HAL_I2C_Init+0x1dc>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	6809      	ldr	r1, [r1, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6911      	ldr	r1, [r2, #16]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68d2      	ldr	r2, [r2, #12]
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	000186a0 	.word	0x000186a0
 8001724:	001e847f 	.word	0x001e847f
 8001728:	003d08ff 	.word	0x003d08ff
 800172c:	431bde83 	.word	0x431bde83
 8001730:	10624dd3 	.word	0x10624dd3

08001734 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_PWR_EnableBkUpAccess+0x14>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	420e0020 	.word	0x420e0020

0800174c <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001760:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_PWR_EnableWakeUpPin+0x34>)
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	461a      	mov	r2, r3
 8001772:	2301      	movs	r3, #1
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	10838020 	.word	0x10838020

08001784 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_PWR_EnterSTANDBYMode+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_PWR_EnterSTANDBYMode+0x28>)
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80017a0:	bf30      	wfi
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40007000 	.word	0x40007000
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e272      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8087 	beq.w	80018e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d4:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d00c      	beq.n	80017fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e0:	4b8f      	ldr	r3, [pc, #572]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d112      	bne.n	8001812 <HAL_RCC_OscConfig+0x5e>
 80017ec:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d10b      	bne.n	8001812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fa:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d06c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x12c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d168      	bne.n	80018e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e24c      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x76>
 800181c:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a7f      	ldr	r2, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e02e      	b.n	8001888 <HAL_RCC_OscConfig+0xd4>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x98>
 8001832:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7a      	ldr	r2, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a77      	ldr	r2, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0xd4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0xbc>
 8001856:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a71      	ldr	r2, [pc, #452]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0xd4>
 8001870:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a67      	ldr	r2, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fb02 	bl	8000e98 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fafe 	bl	8000e98 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e200      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xe4>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff faee 	bl	8000e98 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff faea 	bl	8000e98 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1ec      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x10c>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x18c>
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x176>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1c0      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4939      	ldr	r1, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e03a      	b.n	80019b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_RCC_OscConfig+0x270>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff faa3 	bl	8000e98 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fa9f 	bl	8000e98 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1a1      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4927      	ldr	r1, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x270>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fa82 	bl	8000e98 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fa7e 	bl	8000e98 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e180      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03a      	beq.n	8001a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d019      	beq.n	80019fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa62 	bl	8000e98 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fa5e 	bl	8000e98 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e160      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f000 face 	bl	8001f98 <RCC_Delay>
 80019fc:	e01c      	b.n	8001a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_RCC_OscConfig+0x274>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fa48 	bl	8000e98 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0a:	e00f      	b.n	8001a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fa44 	bl	8000e98 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d908      	bls.n	8001a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e146      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	42420000 	.word	0x42420000
 8001a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e9      	bne.n	8001a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80a6 	beq.w	8001b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10d      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b88      	ldr	r3, [pc, #544]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a87      	ldr	r2, [pc, #540]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b85      	ldr	r3, [pc, #532]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCC_OscConfig+0x4c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7e:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x4c8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7e      	ldr	r2, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x4c8>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa05 	bl	8000e98 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff fa01 	bl	8000e98 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b64      	cmp	r3, #100	; 0x64
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e103      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b75      	ldr	r3, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4c8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x312>
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	e02d      	b.n	8001b22 <HAL_RCC_OscConfig+0x36e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x334>
 8001ace:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a69      	ldr	r2, [pc, #420]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a66      	ldr	r2, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	e01c      	b.n	8001b22 <HAL_RCC_OscConfig+0x36e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d10c      	bne.n	8001b0a <HAL_RCC_OscConfig+0x356>
 8001af0:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a5d      	ldr	r2, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_OscConfig+0x36e>
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a5a      	ldr	r2, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d015      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f9b5 	bl	8000e98 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff f9b1 	bl	8000e98 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0b1      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b48:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ee      	beq.n	8001b32 <HAL_RCC_OscConfig+0x37e>
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b56:	f7ff f99f 	bl	8000e98 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7ff f99b 	bl	8000e98 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e09b      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ee      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d105      	bne.n	8001b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d061      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d146      	bne.n	8001c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCC_OscConfig+0x4cc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f96f 	bl	8000e98 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff f96b 	bl	8000e98 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e06d      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d108      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4921      	ldr	r1, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a19      	ldr	r1, [r3, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	491b      	ldr	r1, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x4cc>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f93f 	bl	8000e98 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f93b 	bl	8000e98 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e03d      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x46a>
 8001c3c:	e035      	b.n	8001caa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f928 	bl	8000e98 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f924 	bl	8000e98 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e026      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x498>
 8001c6a:	e01e      	b.n	8001caa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e019      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_OscConfig+0x500>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0d0      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	4965      	ldr	r1, [pc, #404]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0b8      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d14:	4b59      	ldr	r3, [pc, #356]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	494d      	ldr	r1, [pc, #308]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d040      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d115      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07f      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e073      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06b      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4936      	ldr	r1, [pc, #216]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f876 	bl	8000e98 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff f872 	bl	8000e98 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e053      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d210      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e032      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	490e      	ldr	r1, [pc, #56]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e46:	f000 f821 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490a      	ldr	r1, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x1cc>)
 8001e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1d0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ffd4 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	08004968 	.word	0x08004968
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x30>
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d003      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eba:	e027      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ebe:	613b      	str	r3, [r7, #16]
      break;
 8001ec0:	e027      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0c9b      	lsrs	r3, r3, #18
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0c5b      	lsrs	r3, r3, #17
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eee:	fb03 f202 	mul.w	r2, r3, r2
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e004      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	613b      	str	r3, [r7, #16]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	693b      	ldr	r3, [r7, #16]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	007a1200 	.word	0x007a1200
 8001f28:	08004980 	.word	0x08004980
 8001f2c:	08004990 	.word	0x08004990
 8001f30:	003d0900 	.word	0x003d0900

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff2 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08004978 	.word	0x08004978

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0adb      	lsrs	r3, r3, #11
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08004978 	.word	0x08004978

08001f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <RCC_Delay+0x34>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <RCC_Delay+0x38>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0a5b      	lsrs	r3, r3, #9
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fb4:	bf00      	nop
  }
  while (Delay --);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	60fa      	str	r2, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <RCC_Delay+0x1c>
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d07d      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d118      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a42      	ldr	r2, [pc, #264]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002034:	f7fe ff30 	bl	8000e98 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	e008      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203c:	f7fe ff2c 	bl	8000e98 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e06d      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002062:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d02e      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d027      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800208e:	4a29      	ldr	r2, [pc, #164]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe fefb 	bl	8000e98 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe fef7 	bl	8000e98 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e036      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ee      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4917      	ldr	r1, [pc, #92]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	4a13      	ldr	r2, [pc, #76]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	490b      	ldr	r1, [pc, #44]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	4904      	ldr	r1, [pc, #16]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420440 	.word	0x42420440

08002140 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b10      	cmp	r3, #16
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b10      	cmp	r3, #16
 8002166:	f200 808a 	bhi.w	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d045      	beq.n	80021fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d075      	beq.n	8002262 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002176:	e082      	b.n	800227e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07b      	beq.n	8002282 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	4a3b      	ldr	r2, [pc, #236]	; (800229c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80021bc:	4a38      	ldr	r2, [pc, #224]	; (80022a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e004      	b.n	80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e4:	d102      	bne.n	80021ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	61bb      	str	r3, [r7, #24]
      break;
 80021ea:	e04a      	b.n	8002282 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
      break;
 80021fa:	e042      	b.n	8002282 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d108      	bne.n	8002220 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e01f      	b.n	8002260 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222a:	d109      	bne.n	8002240 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002238:	f649 4340 	movw	r3, #40000	; 0x9c40
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e00f      	b.n	8002260 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800224a:	d11c      	bne.n	8002286 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d016      	beq.n	8002286 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002258:	f24f 4324 	movw	r3, #62500	; 0xf424
 800225c:	61bb      	str	r3, [r7, #24]
      break;
 800225e:	e012      	b.n	8002286 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002260:	e011      	b.n	8002286 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002262:	f7ff fe85 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0b9b      	lsrs	r3, r3, #14
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	61bb      	str	r3, [r7, #24]
      break;
 800227c:	e004      	b.n	8002288 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002286:	bf00      	nop
    }
  }
  return (frequency);
 8002288:	69bb      	ldr	r3, [r7, #24]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	08004994 	.word	0x08004994
 800229c:	080049a4 	.word	0x080049a4
 80022a0:	007a1200 	.word	0x007a1200
 80022a4:	003d0900 	.word	0x003d0900
 80022a8:	aaaaaaab 	.word	0xaaaaaaab

080022ac <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07a      	b.n	80023b8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7c5b      	ldrb	r3, [r3, #17]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fc3c 	bl	8000b50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f870 	bl	80023c4 <HAL_RTC_WaitForSynchro>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e061      	b.n	80023b8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f892 	bl	800241e <RTC_EnterInitMode>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2204      	movs	r2, #4
 8002304:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e056      	b.n	80023b8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0207 	bic.w	r2, r2, #7
 8002318:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002322:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RTC_Init+0x114>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_RTC_Init+0x114>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RTC_Init+0x114>)
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4921      	ldr	r1, [pc, #132]	; (80023c0 <HAL_RTC_Init+0x114>)
 800233c:	4313      	orrs	r3, r2
 800233e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d003      	beq.n	8002352 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e00e      	b.n	8002370 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff fef4 	bl	8002140 <HAL_RCCEx_GetPeriphCLKFreq>
 8002358:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e026      	b.n	80023b8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b01      	subs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	0c1a      	lsrs	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f002 020f 	and.w	r2, r2, #15
 800237c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	b292      	uxth	r2, r2
 8002386:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f870 	bl	800246e <RTC_ExitInitMode>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2204      	movs	r2, #4
 8002398:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00c      	b.n	80023b8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40006c00 	.word	0x40006c00

080023c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01d      	b.n	8002416 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0208 	bic.w	r2, r2, #8
 80023e8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80023ea:	f7fe fd55 	bl	8000e98 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80023f0:	e009      	b.n	8002406 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023f2:	f7fe fd51 	bl	8000e98 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002400:	d901      	bls.n	8002406 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e007      	b.n	8002416 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800242a:	f7fe fd35 	bl	8000e98 <HAL_GetTick>
 800242e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002430:	e009      	b.n	8002446 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002432:	f7fe fd31 	bl	8000e98 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002440:	d901      	bls.n	8002446 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e00f      	b.n	8002466 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0210 	orr.w	r2, r2, #16
 8002462:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0210 	bic.w	r2, r2, #16
 8002488:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800248a:	f7fe fd05 	bl	8000e98 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002490:	e009      	b.n	80024a6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002492:	f7fe fd01 	bl	8000e98 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a0:	d901      	bls.n	80024a6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e007      	b.n	80024b6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e076      	b.n	80025be <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e0:	d009      	beq.n	80024f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
 80024e8:	e005      	b.n	80024f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fe fb41 	bl	8000b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	ea42 0103 	orr.w	r1, r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	0c1a      	lsrs	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f002 0204 	and.w	r2, r2, #4
 800259c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b088      	sub	sp, #32
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_SPI_Transmit+0x22>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e12d      	b.n	8002844 <HAL_SPI_Transmit+0x27e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f0:	f7fe fc52 	bl	8000e98 <HAL_GetTick>
 80025f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d002      	beq.n	800260c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	77fb      	strb	r3, [r7, #31]
    goto error;
 800260a:	e116      	b.n	800283a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_SPI_Transmit+0x52>
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800261c:	e10d      	b.n	800283a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	d10f      	bne.n	8002686 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002674:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002684:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d007      	beq.n	80026a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ac:	d14f      	bne.n	800274e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_SPI_Transmit+0xf6>
 80026b6:	8afb      	ldrh	r3, [r7, #22]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d142      	bne.n	8002742 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	1c9a      	adds	r2, r3, #2
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026e0:	e02f      	b.n	8002742 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d112      	bne.n	8002716 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	1c9a      	adds	r2, r3, #2
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	86da      	strh	r2, [r3, #54]	; 0x36
 8002714:	e015      	b.n	8002742 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002716:	f7fe fbbf 	bl	8000e98 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d803      	bhi.n	800272e <HAL_SPI_Transmit+0x168>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d102      	bne.n	8002734 <HAL_SPI_Transmit+0x16e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002740:	e07b      	b.n	800283a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ca      	bne.n	80026e2 <HAL_SPI_Transmit+0x11c>
 800274c:	e050      	b.n	80027f0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_SPI_Transmit+0x196>
 8002756:	8afb      	ldrh	r3, [r7, #22]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d144      	bne.n	80027e6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002782:	e030      	b.n	80027e6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d113      	bne.n	80027ba <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80027b8:	e015      	b.n	80027e6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ba:	f7fe fb6d 	bl	8000e98 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d803      	bhi.n	80027d2 <HAL_SPI_Transmit+0x20c>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d102      	bne.n	80027d8 <HAL_SPI_Transmit+0x212>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027e4:	e029      	b.n	800283a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1c9      	bne.n	8002784 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fbd9 	bl	8002fac <SPI_EndRxTxTransaction>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e003      	b.n	800283a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002842:	7ffb      	ldrb	r3, [r7, #31]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800286c:	2302      	movs	r3, #2
 800286e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002870:	e0fb      	b.n	8002a6a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287a:	d112      	bne.n	80028a2 <HAL_SPI_Receive+0x56>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10e      	bne.n	80028a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2204      	movs	r2, #4
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8ef 	bl	8002a7c <HAL_SPI_TransmitReceive>
 800289e:	4603      	mov	r3, r0
 80028a0:	e0e8      	b.n	8002a74 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_SPI_Receive+0x64>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0e1      	b.n	8002a74 <HAL_SPI_Receive+0x228>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b8:	f7fe faee 	bl	8000e98 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_SPI_Receive+0x7e>
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ce:	e0cc      	b.n	8002a6a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2204      	movs	r2, #4
 80028d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002916:	d10f      	bne.n	8002938 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d007      	beq.n	8002956 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d16a      	bne.n	8002a34 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800295e:	e032      	b.n	80029c6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d115      	bne.n	800299a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f103 020c 	add.w	r2, r3, #12
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002998:	e015      	b.n	80029c6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800299a:	f7fe fa7d 	bl	8000e98 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d803      	bhi.n	80029b2 <HAL_SPI_Receive+0x166>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d102      	bne.n	80029b8 <HAL_SPI_Receive+0x16c>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029c4:	e051      	b.n	8002a6a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1c7      	bne.n	8002960 <HAL_SPI_Receive+0x114>
 80029d0:	e035      	b.n	8002a3e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d113      	bne.n	8002a08 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	b292      	uxth	r2, r2
 80029ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a06:	e015      	b.n	8002a34 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a08:	f7fe fa46 	bl	8000e98 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d803      	bhi.n	8002a20 <HAL_SPI_Receive+0x1d4>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d102      	bne.n	8002a26 <HAL_SPI_Receive+0x1da>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002a32:	e01a      	b.n	8002a6a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1c9      	bne.n	80029d2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fa60 	bl	8002f08 <SPI_EndRxTransaction>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
 8002a60:	e003      	b.n	8002a6a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x26>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e198      	b.n	8002dd4 <HAL_SPI_TransmitReceive+0x358>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aaa:	f7fe f9f5 	bl	8000e98 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d00f      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x70>
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad2:	d107      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d103      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x68>
 8002adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d003      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aea:	e16d      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x82>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x82>
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b04:	e160      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d003      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2205      	movs	r2, #5
 8002b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	887a      	ldrh	r2, [r7, #2]
 8002b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d007      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b76:	d17c      	bne.n	8002c72 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x10a>
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d16a      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	881a      	ldrh	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002baa:	e057      	b.n	8002c5c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_SPI_TransmitReceive+0x176>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_SPI_TransmitReceive+0x176>
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d113      	bne.n	8002bf2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	1c9a      	adds	r2, r3, #2
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d119      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x1b8>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d014      	beq.n	8002c34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	b292      	uxth	r2, r2
 8002c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c30:	2301      	movs	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c34:	f7fe f930 	bl	8000e98 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d80b      	bhi.n	8002c5c <HAL_SPI_TransmitReceive+0x1e0>
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d007      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002c5a:	e0b5      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1a2      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x130>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d19d      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x130>
 8002c70:	e080      	b.n	8002d74 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0x204>
 8002c7a:	8b7b      	ldrh	r3, [r7, #26]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d16f      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca6:	e05b      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x274>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x274>
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d114      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d119      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x2b6>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d014      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d32:	f7fe f8b1 	bl	8000e98 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d803      	bhi.n	8002d4a <HAL_SPI_TransmitReceive+0x2ce>
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d102      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x2d4>
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002d5e:	e033      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d19e      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x22c>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d199      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f917 	bl	8002fac <SPI_EndRxTxTransaction>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d90:	e01a      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dbe:	e003      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3730      	adds	r7, #48	; 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dea:	b2db      	uxtb	r3, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
	...

08002df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e08:	f7fe f846 	bl	8000e98 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e18:	f7fe f83e 	bl	8000e98 <HAL_GetTick>
 8002e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e1e:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	0d1b      	lsrs	r3, r3, #20
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e2e:	e054      	b.n	8002eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d050      	beq.n	8002eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e38:	f7fe f82e 	bl	8000e98 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d902      	bls.n	8002e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d13d      	bne.n	8002eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e66:	d111      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e70:	d004      	beq.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d107      	bne.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e94:	d10f      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e017      	b.n	8002efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d19b      	bne.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000

08002f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1c:	d111      	bne.n	8002f42 <SPI_EndRxTransaction+0x3a>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f26:	d004      	beq.n	8002f32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d107      	bne.n	8002f42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f40:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4a:	d117      	bne.n	8002f7c <SPI_EndRxTransaction+0x74>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d112      	bne.n	8002f7c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff ff49 	bl	8002df8 <SPI_WaitFlagStateUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01a      	beq.n	8002fa2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e013      	b.n	8002fa4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff ff36 	bl	8002df8 <SPI_WaitFlagStateUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e000      	b.n	8002fa4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff18 	bl	8002df8 <SPI_WaitFlagStateUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f043 0220 	orr.w	r2, r3, #32
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e000      	b.n	8002fe0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8002fe8:	b4b0      	push	{r4, r5, r7}
 8002fea:	b08f      	sub	sp, #60	; 0x3c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8002ff0:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8003008:	23ff      	movs	r3, #255	; 0xff
 800300a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800300e:	2364      	movs	r3, #100	; 0x64
 8003010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8003014:	2308      	movs	r3, #8
 8003016:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	461d      	mov	r5, r3
 800301c:	f107 040c 	add.w	r4, r7, #12
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003028:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800302c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	373c      	adds	r7, #60	; 0x3c
 8003034:	46bd      	mov	sp, r7
 8003036:	bcb0      	pop	{r4, r5, r7}
 8003038:	4770      	bx	lr

0800303a <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6898      	ldr	r0, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	899b      	ldrh	r3, [r3, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	4619      	mov	r1, r3
 800304e:	f7fe f9e3 	bl	8001418 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003052:	2001      	movs	r0, #1
 8003054:	f7fd ff2a 	bl	8000eac <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6898      	ldr	r0, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	899b      	ldrh	r3, [r3, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	4619      	mov	r1, r3
 8003064:	f7fe f9d8 	bl	8001418 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	f7fd ff1f 	bl	8000eac <HAL_Delay>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8003080:	2101      	movs	r1, #1
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f99e 	bl	80033c4 <LoRa_read>
 8003088:	4603      	mov	r3, r0
 800308a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <LoRa_gotoMode+0x30>
		data = (read & 0xF0) | 0x00;
 8003096:	7bbb      	ldrb	r3, [r7, #14]
 8003098:	f023 030f 	bic.w	r3, r3, #15
 800309c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
 80030a4:	e03e      	b.n	8003124 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10c      	bne.n	80030c6 <LoRa_gotoMode+0x50>
		data = (read & 0xF0) | 0x01;
 80030ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b0:	f023 030f 	bic.w	r3, r3, #15
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	61da      	str	r2, [r3, #28]
 80030c4:	e02e      	b.n	8003124 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d10c      	bne.n	80030e6 <LoRa_gotoMode+0x70>
		data = (read & 0xF0) | 0x03;
 80030cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030d0:	f023 030f 	bic.w	r3, r3, #15
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	f043 0303 	orr.w	r3, r3, #3
 80030da:	b25b      	sxtb	r3, r3
 80030dc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	61da      	str	r2, [r3, #28]
 80030e4:	e01e      	b.n	8003124 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b05      	cmp	r3, #5
 80030ea:	d10c      	bne.n	8003106 <LoRa_gotoMode+0x90>
		data = (read & 0xF0) | 0x05;
 80030ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	f043 0305 	orr.w	r3, r3, #5
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2205      	movs	r2, #5
 8003102:	61da      	str	r2, [r3, #28]
 8003104:	e00e      	b.n	8003124 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b06      	cmp	r3, #6
 800310a:	d10b      	bne.n	8003124 <LoRa_gotoMode+0xae>
		data = (read & 0xF0) | 0x06;
 800310c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003110:	f023 030f 	bic.w	r3, r3, #15
 8003114:	b25b      	sxtb	r3, r3
 8003116:	f043 0306 	orr.w	r3, r3, #6
 800311a:	b25b      	sxtb	r3, r3
 800311c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2206      	movs	r2, #6
 8003122:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	461a      	mov	r2, r3
 8003128:	2101      	movs	r1, #1
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f964 	bl	80033f8 <LoRa_write>
	//HAL_Delay(10);
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	889b      	ldrh	r3, [r3, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	4619      	mov	r1, r3
 8003154:	f7fe f960 	bl	8001418 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6998      	ldr	r0, [r3, #24]
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	f7ff fa2f 	bl	80025c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003168:	bf00      	nop
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fe34 	bl	8002ddc <HAL_SPI_GetState>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d1f7      	bne.n	800316a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6998      	ldr	r0, [r3, #24]
 800317e:	8b3a      	ldrh	r2, [r7, #24]
 8003180:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	f7ff fb61 	bl	800284c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800318a:	bf00      	nop
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fe23 	bl	8002ddc <HAL_SPI_GetState>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d1f7      	bne.n	800318c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	889b      	ldrh	r3, [r3, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fe f936 	bl	8001418 <HAL_GPIO_WritePin>
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fe f922 	bl	8001418 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6998      	ldr	r0, [r3, #24]
 80031d8:	88fa      	ldrh	r2, [r7, #6]
 80031da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	f7ff f9f1 	bl	80025c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80031e4:	bf00      	nop
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fdf6 	bl	8002ddc <HAL_SPI_GetState>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d1f7      	bne.n	80031e6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	8b3a      	ldrh	r2, [r7, #24]
 80031fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	f7ff f9e0 	bl	80025c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003206:	bf00      	nop
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fde5 	bl	8002ddc <HAL_SPI_GetState>
 8003212:	4603      	mov	r3, r0
 8003214:	2b01      	cmp	r3, #1
 8003216:	d1f7      	bne.n	8003208 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	889b      	ldrh	r3, [r3, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	4619      	mov	r1, r3
 8003224:	f7fe f8f8 	bl	8001418 <HAL_GPIO_WritePin>
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	04db      	lsls	r3, r3, #19
 800323e:	115b      	asrs	r3, r3, #5
 8003240:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	461a      	mov	r2, r3
 800324c:	2106      	movs	r1, #6
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8d2 	bl	80033f8 <LoRa_write>
	HAL_Delay(5);
 8003254:	2005      	movs	r0, #5
 8003256:	f7fd fe29 	bl	8000eac <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	461a      	mov	r2, r3
 8003264:	2107      	movs	r1, #7
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8c6 	bl	80033f8 <LoRa_write>
	HAL_Delay(5);
 800326c:	2005      	movs	r0, #5
 800326e:	f7fd fe1d 	bl	8000eac <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	461a      	mov	r2, r3
 800327a:	2108      	movs	r1, #8
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8bb 	bl	80033f8 <LoRa_write>
	HAL_Delay(5);
 8003282:	2005      	movs	r0, #5
 8003284:	f7fd fe12 	bl	8000eac <HAL_Delay>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	dd01      	ble.n	80032a4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	dc01      	bgt.n	80032ae <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80032aa:	2307      	movs	r3, #7
 80032ac:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80032ae:	211e      	movs	r1, #30
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f887 	bl	80033c4 <LoRa_read>
 80032b6:	4603      	mov	r3, r0
 80032b8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80032ba:	200a      	movs	r0, #10
 80032bc:	f7fd fdf6 	bl	8000eac <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80032d4:	7bbb      	ldrb	r3, [r7, #14]
 80032d6:	461a      	mov	r2, r3
 80032d8:	211e      	movs	r1, #30
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f88c 	bl	80033f8 <LoRa_write>
	HAL_Delay(10);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f7fd fde3 	bl	8000eac <HAL_Delay>
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	461a      	mov	r2, r3
 80032fe:	2109      	movs	r1, #9
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f879 	bl	80033f8 <LoRa_write>
	HAL_Delay(10);
 8003306:	200a      	movs	r0, #10
 8003308:	f7fd fdd0 	bl	8000eac <HAL_Delay>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b2c      	cmp	r3, #44	; 0x2c
 8003328:	d801      	bhi.n	800332e <LoRa_setOCP+0x1a>
		current = 45;
 800332a:	232d      	movs	r3, #45	; 0x2d
 800332c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	2bf0      	cmp	r3, #240	; 0xf0
 8003332:	d901      	bls.n	8003338 <LoRa_setOCP+0x24>
		current = 240;
 8003334:	23f0      	movs	r3, #240	; 0xf0
 8003336:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	2b78      	cmp	r3, #120	; 0x78
 800333c:	d809      	bhi.n	8003352 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	3b2d      	subs	r3, #45	; 0x2d
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <LoRa_setOCP+0x78>)
 8003344:	fb82 1203 	smull	r1, r2, r2, r3
 8003348:	1052      	asrs	r2, r2, #1
 800334a:	17db      	asrs	r3, r3, #31
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e00b      	b.n	800336a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	2bf0      	cmp	r3, #240	; 0xf0
 8003356:	d808      	bhi.n	800336a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	331e      	adds	r3, #30
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <LoRa_setOCP+0x78>)
 800335e:	fb82 1203 	smull	r1, r2, r2, r3
 8003362:	1092      	asrs	r2, r2, #2
 8003364:	17db      	asrs	r3, r3, #31
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3320      	adds	r3, #32
 800336e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	461a      	mov	r2, r3
 8003374:	210b      	movs	r1, #11
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f83e 	bl	80033f8 <LoRa_write>
	HAL_Delay(10);
 800337c:	200a      	movs	r0, #10
 800337e:	f7fd fd95 	bl	8000eac <HAL_Delay>
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	66666667 	.word	0x66666667

08003390 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8003398:	211e      	movs	r1, #30
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f812 	bl	80033c4 <LoRa_read>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	f043 0307 	orr.w	r3, r3, #7
 80033aa:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, 0x70);
 80033ac:	2270      	movs	r2, #112	; 0x70
 80033ae:	211e      	movs	r1, #30
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f821 	bl	80033f8 <LoRa_write>
	HAL_Delay(10);
 80033b6:	200a      	movs	r0, #10
 80033b8:	f7fd fd78 	bl	8000eac <HAL_Delay>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80033da:	f107 030f 	add.w	r3, r7, #15
 80033de:	f107 010e 	add.w	r1, r7, #14
 80033e2:	2201      	movs	r2, #1
 80033e4:	9200      	str	r2, [sp, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fea5 	bl	8003138 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
 8003404:	4613      	mov	r3, r2
 8003406:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800340e:	b2db      	uxtb	r3, r3
 8003410:	73bb      	strb	r3, [r7, #14]
	data = value;
 8003412:	78bb      	ldrb	r3, [r7, #2]
 8003414:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8003416:	f107 030f 	add.w	r3, r7, #15
 800341a:	f107 010e 	add.w	r1, r7, #14
 800341e:	2201      	movs	r2, #1
 8003420:	9200      	str	r2, [sp, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fec5 	bl	80031b4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	461a      	mov	r2, r3
 800343e:	460b      	mov	r3, r1
 8003440:	72fb      	strb	r3, [r7, #11]
 8003442:	4613      	mov	r3, r2
 8003444:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800344c:	b2db      	uxtb	r3, r3
 800344e:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	889b      	ldrh	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd ffdc 	bl	8001418 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6998      	ldr	r0, [r3, #24]
 8003464:	f107 0117 	add.w	r1, r7, #23
 8003468:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800346c:	2201      	movs	r2, #1
 800346e:	f7ff f8aa 	bl	80025c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003472:	bf00      	nop
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fcaf 	bl	8002ddc <HAL_SPI_GetState>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d1f7      	bne.n	8003474 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6998      	ldr	r0, [r3, #24]
 8003488:	7abb      	ldrb	r3, [r7, #10]
 800348a:	b29a      	uxth	r2, r3
 800348c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	f7ff f898 	bl	80025c6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003496:	bf00      	nop
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fc9d 	bl	8002ddc <HAL_SPI_GetState>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d1f7      	bne.n	8003498 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	889b      	ldrh	r3, [r3, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7fd ffb0 	bl	8001418 <HAL_GPIO_WritePin>
}
 80034b8:	bf00      	nop
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

	return 1;
 80034c8:	2301      	movs	r3, #1
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	460b      	mov	r3, r1
 80034e4:	71fb      	strb	r3, [r7, #7]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80034f0:	2101      	movs	r1, #1
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff fdbf 	bl	8003076 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80034f8:	210e      	movs	r1, #14
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff62 	bl	80033c4 <LoRa_read>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 8003504:	2200      	movs	r2, #0
 8003506:	210e      	movs	r1, #14
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff ff75 	bl	80033f8 <LoRa_write>
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	461a      	mov	r2, r3
 8003512:	210d      	movs	r1, #13
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff ff6f 	bl	80033f8 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	461a      	mov	r2, r3
 800351e:	2122      	movs	r1, #34	; 0x22
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff ff69 	bl	80033f8 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	2100      	movs	r1, #0
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff80 	bl	8003432 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8003532:	2103      	movs	r1, #3
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fd9e 	bl	8003076 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800353a:	2112      	movs	r1, #18
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff ff41 	bl	80033c4 <LoRa_read>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <LoRa_transmit+0x92>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	2112      	movs	r1, #18
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff ff4f 	bl	80033f8 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff fd8a 	bl	8003076 <LoRa_gotoMode>
			return 1;
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <LoRa_transmit+0xb2>
		}
		else{
			if(--timeout==0){
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	80bb      	strh	r3, [r7, #4]
 800356c:	88bb      	ldrh	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <LoRa_transmit+0xaa>
				LoRa_gotoMode(_LoRa, mode);
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff fd7e 	bl	8003076 <LoRa_gotoMode>
				return 0;
 800357a:	2300      	movs	r3, #0
 800357c:	e003      	b.n	8003586 <LoRa_transmit+0xb2>
			}
		}
		HAL_Delay(1);
 800357e:	2001      	movs	r0, #1
 8003580:	f7fd fc94 	bl	8000eac <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8003584:	e7d9      	b.n	800353a <LoRa_transmit+0x66>
	}
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800358e:	b590      	push	{r4, r7, lr}
 8003590:	b089      	sub	sp, #36	; 0x24
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e007      	b.n	80035b6 <LoRa_receive+0x28>
		data[i]=0;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4413      	add	r3, r2
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbf3      	blt.n	80035a6 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80035be:	2101      	movs	r1, #1
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fd58 	bl	8003076 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80035c6:	2112      	movs	r1, #18
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff fefb 	bl	80033c4 <LoRa_read>
 80035ce:	4603      	mov	r3, r0
 80035d0:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02f      	beq.n	800363c <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	2112      	movs	r1, #18
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff09 	bl	80033f8 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80035e6:	2113      	movs	r1, #19
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff feeb 	bl	80033c4 <LoRa_read>
 80035ee:	4603      	mov	r3, r0
 80035f0:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80035f2:	2110      	movs	r1, #16
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff fee5 	bl	80033c4 <LoRa_read>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	461a      	mov	r2, r3
 8003602:	210d      	movs	r1, #13
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fef7 	bl	80033f8 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800360a:	7cba      	ldrb	r2, [r7, #18]
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	4293      	cmp	r3, r2
 8003610:	bf28      	it	cs
 8003612:	4613      	movcs	r3, r2
 8003614:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e00b      	b.n	8003634 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d4      	adds	r4, r2, r3
 8003622:	2100      	movs	r1, #0
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7ff fecd 	bl	80033c4 <LoRa_read>
 800362a:	4603      	mov	r3, r0
 800362c:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbef      	blt.n	800361c <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800363c:	2105      	movs	r1, #5
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff fd19 	bl	8003076 <LoRa_gotoMode>
    return min;
 8003644:	7ffb      	ldrb	r3, [r7, #31]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd90      	pop	{r4, r7, pc}

0800364e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff32 	bl	80034c0 <LoRa_isvalid>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8098 	beq.w	8003794 <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8003664:	2100      	movs	r1, #0
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fd05 	bl	8003076 <LoRa_gotoMode>
			HAL_Delay(10);
 800366c:	200a      	movs	r0, #10
 800366e:	f7fd fc1d 	bl	8000eac <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8003672:	2101      	movs	r1, #1
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fea5 	bl	80033c4 <LoRa_read>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800367e:	200a      	movs	r0, #10
 8003680:	f7fd fc14 	bl	8000eac <HAL_Delay>
			data = read | 0x80;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800368a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	461a      	mov	r2, r3
 8003690:	2101      	movs	r1, #1
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff feb0 	bl	80033f8 <LoRa_write>
			HAL_Delay(100);
 8003698:	2064      	movs	r0, #100	; 0x64
 800369a:	f7fd fc07 	bl	8000eac <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fdc3 	bl	8003230 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fe1b 	bl	80032ee <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80036be:	4619      	mov	r1, r3
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fe27 	bl	8003314 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80036c6:	2223      	movs	r2, #35	; 0x23
 80036c8:	210c      	movs	r1, #12
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fe94 	bl	80033f8 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fe5d 	bl	8003390 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fdd6 	bl	8003290 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80036e4:	22ff      	movs	r2, #255	; 0xff
 80036e6:	211f      	movs	r1, #31
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fe85 	bl	80033f8 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	4413      	add	r3, r2
 8003708:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	461a      	mov	r2, r3
 800370e:	211d      	movs	r1, #29
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fe71 	bl	80033f8 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	b29b      	uxth	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	2120      	movs	r1, #32
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff fe67 	bl	80033f8 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	2121      	movs	r1, #33	; 0x21
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fe5f 	bl	80033f8 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800373a:	2140      	movs	r1, #64	; 0x40
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fe41 	bl	80033c4 <LoRa_read>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800374c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800374e:	7bbb      	ldrb	r3, [r7, #14]
 8003750:	461a      	mov	r2, r3
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fe4f 	bl	80033f8 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800375a:	2101      	movs	r1, #1
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fc8a 	bl	8003076 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8003768:	200a      	movs	r0, #10
 800376a:	f7fd fb9f 	bl	8000eac <HAL_Delay>

			//init register
			LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 800376e:	2200      	movs	r2, #0
 8003770:	210e      	movs	r1, #14
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fe40 	bl	80033f8 <LoRa_write>
			read = LoRa_read(_LoRa, RegVersion);
 8003778:	2142      	movs	r1, #66	; 0x42
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe22 	bl	80033c4 <LoRa_read>
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b12      	cmp	r3, #18
 8003788:	d101      	bne.n	800378e <LoRa_init+0x140>
				return LORA_OK;
 800378a:	23c8      	movs	r3, #200	; 0xc8
 800378c:	e004      	b.n	8003798 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 800378e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003792:	e001      	b.n	8003798 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 8003794:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <std>:
 80037a0:	2300      	movs	r3, #0
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
 80037a6:	e9c0 3300 	strd	r3, r3, [r0]
 80037aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ae:	6083      	str	r3, [r0, #8]
 80037b0:	8181      	strh	r1, [r0, #12]
 80037b2:	6643      	str	r3, [r0, #100]	; 0x64
 80037b4:	81c2      	strh	r2, [r0, #14]
 80037b6:	6183      	str	r3, [r0, #24]
 80037b8:	4619      	mov	r1, r3
 80037ba:	2208      	movs	r2, #8
 80037bc:	305c      	adds	r0, #92	; 0x5c
 80037be:	f000 f9ed 	bl	8003b9c <memset>
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <std+0x38>)
 80037c4:	6224      	str	r4, [r4, #32]
 80037c6:	6263      	str	r3, [r4, #36]	; 0x24
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <std+0x3c>)
 80037ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <std+0x40>)
 80037ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <std+0x44>)
 80037d2:	6323      	str	r3, [r4, #48]	; 0x30
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	080039ed 	.word	0x080039ed
 80037dc:	08003a0f 	.word	0x08003a0f
 80037e0:	08003a47 	.word	0x08003a47
 80037e4:	08003a6b 	.word	0x08003a6b

080037e8 <stdio_exit_handler>:
 80037e8:	4a02      	ldr	r2, [pc, #8]	; (80037f4 <stdio_exit_handler+0xc>)
 80037ea:	4903      	ldr	r1, [pc, #12]	; (80037f8 <stdio_exit_handler+0x10>)
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <stdio_exit_handler+0x14>)
 80037ee:	f000 b869 	b.w	80038c4 <_fwalk_sglue>
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c
 80037f8:	08004529 	.word	0x08004529
 80037fc:	20000018 	.word	0x20000018

08003800 <cleanup_stdio>:
 8003800:	6841      	ldr	r1, [r0, #4]
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <cleanup_stdio+0x34>)
 8003804:	b510      	push	{r4, lr}
 8003806:	4299      	cmp	r1, r3
 8003808:	4604      	mov	r4, r0
 800380a:	d001      	beq.n	8003810 <cleanup_stdio+0x10>
 800380c:	f000 fe8c 	bl	8004528 <_fflush_r>
 8003810:	68a1      	ldr	r1, [r4, #8]
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <cleanup_stdio+0x38>)
 8003814:	4299      	cmp	r1, r3
 8003816:	d002      	beq.n	800381e <cleanup_stdio+0x1e>
 8003818:	4620      	mov	r0, r4
 800381a:	f000 fe85 	bl	8004528 <_fflush_r>
 800381e:	68e1      	ldr	r1, [r4, #12]
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <cleanup_stdio+0x3c>)
 8003822:	4299      	cmp	r1, r3
 8003824:	d004      	beq.n	8003830 <cleanup_stdio+0x30>
 8003826:	4620      	mov	r0, r4
 8003828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382c:	f000 be7c 	b.w	8004528 <_fflush_r>
 8003830:	bd10      	pop	{r4, pc}
 8003832:	bf00      	nop
 8003834:	20000278 	.word	0x20000278
 8003838:	200002e0 	.word	0x200002e0
 800383c:	20000348 	.word	0x20000348

08003840 <global_stdio_init.part.0>:
 8003840:	b510      	push	{r4, lr}
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <global_stdio_init.part.0+0x30>)
 8003844:	4c0b      	ldr	r4, [pc, #44]	; (8003874 <global_stdio_init.part.0+0x34>)
 8003846:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <global_stdio_init.part.0+0x38>)
 8003848:	4620      	mov	r0, r4
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	2104      	movs	r1, #4
 800384e:	2200      	movs	r2, #0
 8003850:	f7ff ffa6 	bl	80037a0 <std>
 8003854:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003858:	2201      	movs	r2, #1
 800385a:	2109      	movs	r1, #9
 800385c:	f7ff ffa0 	bl	80037a0 <std>
 8003860:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003864:	2202      	movs	r2, #2
 8003866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386a:	2112      	movs	r1, #18
 800386c:	f7ff bf98 	b.w	80037a0 <std>
 8003870:	200003b0 	.word	0x200003b0
 8003874:	20000278 	.word	0x20000278
 8003878:	080037e9 	.word	0x080037e9

0800387c <__sfp_lock_acquire>:
 800387c:	4801      	ldr	r0, [pc, #4]	; (8003884 <__sfp_lock_acquire+0x8>)
 800387e:	f000 ba05 	b.w	8003c8c <__retarget_lock_acquire_recursive>
 8003882:	bf00      	nop
 8003884:	200003b9 	.word	0x200003b9

08003888 <__sfp_lock_release>:
 8003888:	4801      	ldr	r0, [pc, #4]	; (8003890 <__sfp_lock_release+0x8>)
 800388a:	f000 ba00 	b.w	8003c8e <__retarget_lock_release_recursive>
 800388e:	bf00      	nop
 8003890:	200003b9 	.word	0x200003b9

08003894 <__sinit>:
 8003894:	b510      	push	{r4, lr}
 8003896:	4604      	mov	r4, r0
 8003898:	f7ff fff0 	bl	800387c <__sfp_lock_acquire>
 800389c:	6a23      	ldr	r3, [r4, #32]
 800389e:	b11b      	cbz	r3, 80038a8 <__sinit+0x14>
 80038a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a4:	f7ff bff0 	b.w	8003888 <__sfp_lock_release>
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <__sinit+0x28>)
 80038aa:	6223      	str	r3, [r4, #32]
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <__sinit+0x2c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f5      	bne.n	80038a0 <__sinit+0xc>
 80038b4:	f7ff ffc4 	bl	8003840 <global_stdio_init.part.0>
 80038b8:	e7f2      	b.n	80038a0 <__sinit+0xc>
 80038ba:	bf00      	nop
 80038bc:	08003801 	.word	0x08003801
 80038c0:	200003b0 	.word	0x200003b0

080038c4 <_fwalk_sglue>:
 80038c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c8:	4607      	mov	r7, r0
 80038ca:	4688      	mov	r8, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	2600      	movs	r6, #0
 80038d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038d4:	f1b9 0901 	subs.w	r9, r9, #1
 80038d8:	d505      	bpl.n	80038e6 <_fwalk_sglue+0x22>
 80038da:	6824      	ldr	r4, [r4, #0]
 80038dc:	2c00      	cmp	r4, #0
 80038de:	d1f7      	bne.n	80038d0 <_fwalk_sglue+0xc>
 80038e0:	4630      	mov	r0, r6
 80038e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e6:	89ab      	ldrh	r3, [r5, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d907      	bls.n	80038fc <_fwalk_sglue+0x38>
 80038ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038f0:	3301      	adds	r3, #1
 80038f2:	d003      	beq.n	80038fc <_fwalk_sglue+0x38>
 80038f4:	4629      	mov	r1, r5
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c0      	blx	r8
 80038fa:	4306      	orrs	r6, r0
 80038fc:	3568      	adds	r5, #104	; 0x68
 80038fe:	e7e9      	b.n	80038d4 <_fwalk_sglue+0x10>

08003900 <iprintf>:
 8003900:	b40f      	push	{r0, r1, r2, r3}
 8003902:	b507      	push	{r0, r1, r2, lr}
 8003904:	4906      	ldr	r1, [pc, #24]	; (8003920 <iprintf+0x20>)
 8003906:	ab04      	add	r3, sp, #16
 8003908:	6808      	ldr	r0, [r1, #0]
 800390a:	f853 2b04 	ldr.w	r2, [r3], #4
 800390e:	6881      	ldr	r1, [r0, #8]
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	f000 fad9 	bl	8003ec8 <_vfiprintf_r>
 8003916:	b003      	add	sp, #12
 8003918:	f85d eb04 	ldr.w	lr, [sp], #4
 800391c:	b004      	add	sp, #16
 800391e:	4770      	bx	lr
 8003920:	20000064 	.word	0x20000064

08003924 <putchar>:
 8003924:	4b02      	ldr	r3, [pc, #8]	; (8003930 <putchar+0xc>)
 8003926:	4601      	mov	r1, r0
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	6882      	ldr	r2, [r0, #8]
 800392c:	f000 be85 	b.w	800463a <_putc_r>
 8003930:	20000064 	.word	0x20000064

08003934 <_puts_r>:
 8003934:	6a03      	ldr	r3, [r0, #32]
 8003936:	b570      	push	{r4, r5, r6, lr}
 8003938:	4605      	mov	r5, r0
 800393a:	460e      	mov	r6, r1
 800393c:	6884      	ldr	r4, [r0, #8]
 800393e:	b90b      	cbnz	r3, 8003944 <_puts_r+0x10>
 8003940:	f7ff ffa8 	bl	8003894 <__sinit>
 8003944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003946:	07db      	lsls	r3, r3, #31
 8003948:	d405      	bmi.n	8003956 <_puts_r+0x22>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	0598      	lsls	r0, r3, #22
 800394e:	d402      	bmi.n	8003956 <_puts_r+0x22>
 8003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003952:	f000 f99b 	bl	8003c8c <__retarget_lock_acquire_recursive>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	0719      	lsls	r1, r3, #28
 800395a:	d513      	bpl.n	8003984 <_puts_r+0x50>
 800395c:	6923      	ldr	r3, [r4, #16]
 800395e:	b18b      	cbz	r3, 8003984 <_puts_r+0x50>
 8003960:	3e01      	subs	r6, #1
 8003962:	68a3      	ldr	r3, [r4, #8]
 8003964:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003968:	3b01      	subs	r3, #1
 800396a:	60a3      	str	r3, [r4, #8]
 800396c:	b9e9      	cbnz	r1, 80039aa <_puts_r+0x76>
 800396e:	2b00      	cmp	r3, #0
 8003970:	da2e      	bge.n	80039d0 <_puts_r+0x9c>
 8003972:	4622      	mov	r2, r4
 8003974:	210a      	movs	r1, #10
 8003976:	4628      	mov	r0, r5
 8003978:	f000 f87b 	bl	8003a72 <__swbuf_r>
 800397c:	3001      	adds	r0, #1
 800397e:	d007      	beq.n	8003990 <_puts_r+0x5c>
 8003980:	250a      	movs	r5, #10
 8003982:	e007      	b.n	8003994 <_puts_r+0x60>
 8003984:	4621      	mov	r1, r4
 8003986:	4628      	mov	r0, r5
 8003988:	f000 f8b0 	bl	8003aec <__swsetup_r>
 800398c:	2800      	cmp	r0, #0
 800398e:	d0e7      	beq.n	8003960 <_puts_r+0x2c>
 8003990:	f04f 35ff 	mov.w	r5, #4294967295
 8003994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003996:	07da      	lsls	r2, r3, #31
 8003998:	d405      	bmi.n	80039a6 <_puts_r+0x72>
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	059b      	lsls	r3, r3, #22
 800399e:	d402      	bmi.n	80039a6 <_puts_r+0x72>
 80039a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039a2:	f000 f974 	bl	8003c8e <__retarget_lock_release_recursive>
 80039a6:	4628      	mov	r0, r5
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da04      	bge.n	80039b8 <_puts_r+0x84>
 80039ae:	69a2      	ldr	r2, [r4, #24]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	dc06      	bgt.n	80039c2 <_puts_r+0x8e>
 80039b4:	290a      	cmp	r1, #10
 80039b6:	d004      	beq.n	80039c2 <_puts_r+0x8e>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	6022      	str	r2, [r4, #0]
 80039be:	7019      	strb	r1, [r3, #0]
 80039c0:	e7cf      	b.n	8003962 <_puts_r+0x2e>
 80039c2:	4622      	mov	r2, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 f854 	bl	8003a72 <__swbuf_r>
 80039ca:	3001      	adds	r0, #1
 80039cc:	d1c9      	bne.n	8003962 <_puts_r+0x2e>
 80039ce:	e7df      	b.n	8003990 <_puts_r+0x5c>
 80039d0:	250a      	movs	r5, #10
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	6022      	str	r2, [r4, #0]
 80039d8:	701d      	strb	r5, [r3, #0]
 80039da:	e7db      	b.n	8003994 <_puts_r+0x60>

080039dc <puts>:
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <puts+0xc>)
 80039de:	4601      	mov	r1, r0
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	f7ff bfa7 	b.w	8003934 <_puts_r>
 80039e6:	bf00      	nop
 80039e8:	20000064 	.word	0x20000064

080039ec <__sread>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	460c      	mov	r4, r1
 80039f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f4:	f000 f8fc 	bl	8003bf0 <_read_r>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	bfab      	itete	ge
 80039fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003a00:	181b      	addge	r3, r3, r0
 8003a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a06:	bfac      	ite	ge
 8003a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a0a:	81a3      	strhlt	r3, [r4, #12]
 8003a0c:	bd10      	pop	{r4, pc}

08003a0e <__swrite>:
 8003a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a12:	461f      	mov	r7, r3
 8003a14:	898b      	ldrh	r3, [r1, #12]
 8003a16:	4605      	mov	r5, r0
 8003a18:	05db      	lsls	r3, r3, #23
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	4616      	mov	r6, r2
 8003a1e:	d505      	bpl.n	8003a2c <__swrite+0x1e>
 8003a20:	2302      	movs	r3, #2
 8003a22:	2200      	movs	r2, #0
 8003a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a28:	f000 f8d0 	bl	8003bcc <_lseek_r>
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	4632      	mov	r2, r6
 8003a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	4628      	mov	r0, r5
 8003a38:	463b      	mov	r3, r7
 8003a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a42:	f000 b8e7 	b.w	8003c14 <_write_r>

08003a46 <__sseek>:
 8003a46:	b510      	push	{r4, lr}
 8003a48:	460c      	mov	r4, r1
 8003a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4e:	f000 f8bd 	bl	8003bcc <_lseek_r>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	bf15      	itete	ne
 8003a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a62:	81a3      	strheq	r3, [r4, #12]
 8003a64:	bf18      	it	ne
 8003a66:	81a3      	strhne	r3, [r4, #12]
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <__sclose>:
 8003a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6e:	f000 b89d 	b.w	8003bac <_close_r>

08003a72 <__swbuf_r>:
 8003a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a74:	460e      	mov	r6, r1
 8003a76:	4614      	mov	r4, r2
 8003a78:	4605      	mov	r5, r0
 8003a7a:	b118      	cbz	r0, 8003a84 <__swbuf_r+0x12>
 8003a7c:	6a03      	ldr	r3, [r0, #32]
 8003a7e:	b90b      	cbnz	r3, 8003a84 <__swbuf_r+0x12>
 8003a80:	f7ff ff08 	bl	8003894 <__sinit>
 8003a84:	69a3      	ldr	r3, [r4, #24]
 8003a86:	60a3      	str	r3, [r4, #8]
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	071a      	lsls	r2, r3, #28
 8003a8c:	d525      	bpl.n	8003ada <__swbuf_r+0x68>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	b31b      	cbz	r3, 8003ada <__swbuf_r+0x68>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	6922      	ldr	r2, [r4, #16]
 8003a96:	b2f6      	uxtb	r6, r6
 8003a98:	1a98      	subs	r0, r3, r2
 8003a9a:	6963      	ldr	r3, [r4, #20]
 8003a9c:	4637      	mov	r7, r6
 8003a9e:	4283      	cmp	r3, r0
 8003aa0:	dc04      	bgt.n	8003aac <__swbuf_r+0x3a>
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f000 fd3f 	bl	8004528 <_fflush_r>
 8003aaa:	b9e0      	cbnz	r0, 8003ae6 <__swbuf_r+0x74>
 8003aac:	68a3      	ldr	r3, [r4, #8]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	6022      	str	r2, [r4, #0]
 8003ab8:	701e      	strb	r6, [r3, #0]
 8003aba:	6962      	ldr	r2, [r4, #20]
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d004      	beq.n	8003acc <__swbuf_r+0x5a>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	07db      	lsls	r3, r3, #31
 8003ac6:	d506      	bpl.n	8003ad6 <__swbuf_r+0x64>
 8003ac8:	2e0a      	cmp	r6, #10
 8003aca:	d104      	bne.n	8003ad6 <__swbuf_r+0x64>
 8003acc:	4621      	mov	r1, r4
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 fd2a 	bl	8004528 <_fflush_r>
 8003ad4:	b938      	cbnz	r0, 8003ae6 <__swbuf_r+0x74>
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ada:	4621      	mov	r1, r4
 8003adc:	4628      	mov	r0, r5
 8003ade:	f000 f805 	bl	8003aec <__swsetup_r>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d0d5      	beq.n	8003a92 <__swbuf_r+0x20>
 8003ae6:	f04f 37ff 	mov.w	r7, #4294967295
 8003aea:	e7f4      	b.n	8003ad6 <__swbuf_r+0x64>

08003aec <__swsetup_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <__swsetup_r+0xac>)
 8003af0:	4605      	mov	r5, r0
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	460c      	mov	r4, r1
 8003af6:	b118      	cbz	r0, 8003b00 <__swsetup_r+0x14>
 8003af8:	6a03      	ldr	r3, [r0, #32]
 8003afa:	b90b      	cbnz	r3, 8003b00 <__swsetup_r+0x14>
 8003afc:	f7ff feca 	bl	8003894 <__sinit>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b06:	0718      	lsls	r0, r3, #28
 8003b08:	d422      	bmi.n	8003b50 <__swsetup_r+0x64>
 8003b0a:	06d9      	lsls	r1, r3, #27
 8003b0c:	d407      	bmi.n	8003b1e <__swsetup_r+0x32>
 8003b0e:	2309      	movs	r3, #9
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b16:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	e034      	b.n	8003b88 <__swsetup_r+0x9c>
 8003b1e:	0758      	lsls	r0, r3, #29
 8003b20:	d512      	bpl.n	8003b48 <__swsetup_r+0x5c>
 8003b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b24:	b141      	cbz	r1, 8003b38 <__swsetup_r+0x4c>
 8003b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b2a:	4299      	cmp	r1, r3
 8003b2c:	d002      	beq.n	8003b34 <__swsetup_r+0x48>
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 f8ae 	bl	8003c90 <_free_r>
 8003b34:	2300      	movs	r3, #0
 8003b36:	6363      	str	r3, [r4, #52]	; 0x34
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	2300      	movs	r3, #0
 8003b42:	6063      	str	r3, [r4, #4]
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f043 0308 	orr.w	r3, r3, #8
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	6923      	ldr	r3, [r4, #16]
 8003b52:	b94b      	cbnz	r3, 8003b68 <__swsetup_r+0x7c>
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d003      	beq.n	8003b68 <__swsetup_r+0x7c>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4628      	mov	r0, r5
 8003b64:	f000 fd2d 	bl	80045c2 <__smakebuf_r>
 8003b68:	89a0      	ldrh	r0, [r4, #12]
 8003b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b6e:	f010 0301 	ands.w	r3, r0, #1
 8003b72:	d00a      	beq.n	8003b8a <__swsetup_r+0x9e>
 8003b74:	2300      	movs	r3, #0
 8003b76:	60a3      	str	r3, [r4, #8]
 8003b78:	6963      	ldr	r3, [r4, #20]
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	61a3      	str	r3, [r4, #24]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	b943      	cbnz	r3, 8003b94 <__swsetup_r+0xa8>
 8003b82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b86:	d1c4      	bne.n	8003b12 <__swsetup_r+0x26>
 8003b88:	bd38      	pop	{r3, r4, r5, pc}
 8003b8a:	0781      	lsls	r1, r0, #30
 8003b8c:	bf58      	it	pl
 8003b8e:	6963      	ldrpl	r3, [r4, #20]
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	e7f4      	b.n	8003b7e <__swsetup_r+0x92>
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7f7      	b.n	8003b88 <__swsetup_r+0x9c>
 8003b98:	20000064 	.word	0x20000064

08003b9c <memset>:
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4402      	add	r2, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <_close_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	2300      	movs	r3, #0
 8003bb0:	4d05      	ldr	r5, [pc, #20]	; (8003bc8 <_close_r+0x1c>)
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	f7fd f883 	bl	8000cc2 <_close>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_close_r+0x1a>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_close_r+0x1a>
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	200003b4 	.word	0x200003b4

08003bcc <_lseek_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4d05      	ldr	r5, [pc, #20]	; (8003bec <_lseek_r+0x20>)
 8003bd8:	602a      	str	r2, [r5, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7fd f895 	bl	8000d0a <_lseek>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_lseek_r+0x1e>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_lseek_r+0x1e>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	200003b4 	.word	0x200003b4

08003bf0 <_read_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4d05      	ldr	r5, [pc, #20]	; (8003c10 <_read_r+0x20>)
 8003bfc:	602a      	str	r2, [r5, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fd f842 	bl	8000c88 <_read>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_read_r+0x1e>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_read_r+0x1e>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	200003b4 	.word	0x200003b4

08003c14 <_write_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4d05      	ldr	r5, [pc, #20]	; (8003c34 <_write_r+0x20>)
 8003c20:	602a      	str	r2, [r5, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fc fab8 	bl	8000198 <_write>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_write_r+0x1e>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_write_r+0x1e>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	200003b4 	.word	0x200003b4

08003c38 <__errno>:
 8003c38:	4b01      	ldr	r3, [pc, #4]	; (8003c40 <__errno+0x8>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000064 	.word	0x20000064

08003c44 <__libc_init_array>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	2600      	movs	r6, #0
 8003c48:	4d0c      	ldr	r5, [pc, #48]	; (8003c7c <__libc_init_array+0x38>)
 8003c4a:	4c0d      	ldr	r4, [pc, #52]	; (8003c80 <__libc_init_array+0x3c>)
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	42a6      	cmp	r6, r4
 8003c52:	d109      	bne.n	8003c68 <__libc_init_array+0x24>
 8003c54:	f000 fd66 	bl	8004724 <_init>
 8003c58:	2600      	movs	r6, #0
 8003c5a:	4d0a      	ldr	r5, [pc, #40]	; (8003c84 <__libc_init_array+0x40>)
 8003c5c:	4c0a      	ldr	r4, [pc, #40]	; (8003c88 <__libc_init_array+0x44>)
 8003c5e:	1b64      	subs	r4, r4, r5
 8003c60:	10a4      	asrs	r4, r4, #2
 8003c62:	42a6      	cmp	r6, r4
 8003c64:	d105      	bne.n	8003c72 <__libc_init_array+0x2e>
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6c:	4798      	blx	r3
 8003c6e:	3601      	adds	r6, #1
 8003c70:	e7ee      	b.n	8003c50 <__libc_init_array+0xc>
 8003c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c76:	4798      	blx	r3
 8003c78:	3601      	adds	r6, #1
 8003c7a:	e7f2      	b.n	8003c62 <__libc_init_array+0x1e>
 8003c7c:	080049dc 	.word	0x080049dc
 8003c80:	080049dc 	.word	0x080049dc
 8003c84:	080049dc 	.word	0x080049dc
 8003c88:	080049e0 	.word	0x080049e0

08003c8c <__retarget_lock_acquire_recursive>:
 8003c8c:	4770      	bx	lr

08003c8e <__retarget_lock_release_recursive>:
 8003c8e:	4770      	bx	lr

08003c90 <_free_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	4605      	mov	r5, r0
 8003c94:	2900      	cmp	r1, #0
 8003c96:	d040      	beq.n	8003d1a <_free_r+0x8a>
 8003c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c9c:	1f0c      	subs	r4, r1, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bfb8      	it	lt
 8003ca2:	18e4      	addlt	r4, r4, r3
 8003ca4:	f000 f8dc 	bl	8003e60 <__malloc_lock>
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <_free_r+0x8c>)
 8003caa:	6813      	ldr	r3, [r2, #0]
 8003cac:	b933      	cbnz	r3, 8003cbc <_free_r+0x2c>
 8003cae:	6063      	str	r3, [r4, #4]
 8003cb0:	6014      	str	r4, [r2, #0]
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cb8:	f000 b8d8 	b.w	8003e6c <__malloc_unlock>
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	d908      	bls.n	8003cd2 <_free_r+0x42>
 8003cc0:	6820      	ldr	r0, [r4, #0]
 8003cc2:	1821      	adds	r1, r4, r0
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf01      	itttt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	1809      	addeq	r1, r1, r0
 8003cce:	6021      	streq	r1, [r4, #0]
 8003cd0:	e7ed      	b.n	8003cae <_free_r+0x1e>
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b10b      	cbz	r3, 8003cdc <_free_r+0x4c>
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d9fa      	bls.n	8003cd2 <_free_r+0x42>
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	1850      	adds	r0, r2, r1
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d10b      	bne.n	8003cfc <_free_r+0x6c>
 8003ce4:	6820      	ldr	r0, [r4, #0]
 8003ce6:	4401      	add	r1, r0
 8003ce8:	1850      	adds	r0, r2, r1
 8003cea:	4283      	cmp	r3, r0
 8003cec:	6011      	str	r1, [r2, #0]
 8003cee:	d1e0      	bne.n	8003cb2 <_free_r+0x22>
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4408      	add	r0, r1
 8003cf6:	6010      	str	r0, [r2, #0]
 8003cf8:	6053      	str	r3, [r2, #4]
 8003cfa:	e7da      	b.n	8003cb2 <_free_r+0x22>
 8003cfc:	d902      	bls.n	8003d04 <_free_r+0x74>
 8003cfe:	230c      	movs	r3, #12
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	e7d6      	b.n	8003cb2 <_free_r+0x22>
 8003d04:	6820      	ldr	r0, [r4, #0]
 8003d06:	1821      	adds	r1, r4, r0
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	bf01      	itttt	eq
 8003d0c:	6819      	ldreq	r1, [r3, #0]
 8003d0e:	685b      	ldreq	r3, [r3, #4]
 8003d10:	1809      	addeq	r1, r1, r0
 8003d12:	6021      	streq	r1, [r4, #0]
 8003d14:	6063      	str	r3, [r4, #4]
 8003d16:	6054      	str	r4, [r2, #4]
 8003d18:	e7cb      	b.n	8003cb2 <_free_r+0x22>
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	200003bc 	.word	0x200003bc

08003d20 <sbrk_aligned>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	4e0e      	ldr	r6, [pc, #56]	; (8003d5c <sbrk_aligned+0x3c>)
 8003d24:	460c      	mov	r4, r1
 8003d26:	6831      	ldr	r1, [r6, #0]
 8003d28:	4605      	mov	r5, r0
 8003d2a:	b911      	cbnz	r1, 8003d32 <sbrk_aligned+0x12>
 8003d2c:	f000 fcdc 	bl	80046e8 <_sbrk_r>
 8003d30:	6030      	str	r0, [r6, #0]
 8003d32:	4621      	mov	r1, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	f000 fcd7 	bl	80046e8 <_sbrk_r>
 8003d3a:	1c43      	adds	r3, r0, #1
 8003d3c:	d00a      	beq.n	8003d54 <sbrk_aligned+0x34>
 8003d3e:	1cc4      	adds	r4, r0, #3
 8003d40:	f024 0403 	bic.w	r4, r4, #3
 8003d44:	42a0      	cmp	r0, r4
 8003d46:	d007      	beq.n	8003d58 <sbrk_aligned+0x38>
 8003d48:	1a21      	subs	r1, r4, r0
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 fccc 	bl	80046e8 <_sbrk_r>
 8003d50:	3001      	adds	r0, #1
 8003d52:	d101      	bne.n	8003d58 <sbrk_aligned+0x38>
 8003d54:	f04f 34ff 	mov.w	r4, #4294967295
 8003d58:	4620      	mov	r0, r4
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	200003c0 	.word	0x200003c0

08003d60 <_malloc_r>:
 8003d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	1ccd      	adds	r5, r1, #3
 8003d66:	f025 0503 	bic.w	r5, r5, #3
 8003d6a:	3508      	adds	r5, #8
 8003d6c:	2d0c      	cmp	r5, #12
 8003d6e:	bf38      	it	cc
 8003d70:	250c      	movcc	r5, #12
 8003d72:	2d00      	cmp	r5, #0
 8003d74:	4607      	mov	r7, r0
 8003d76:	db01      	blt.n	8003d7c <_malloc_r+0x1c>
 8003d78:	42a9      	cmp	r1, r5
 8003d7a:	d905      	bls.n	8003d88 <_malloc_r+0x28>
 8003d7c:	230c      	movs	r3, #12
 8003d7e:	2600      	movs	r6, #0
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4630      	mov	r0, r6
 8003d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e5c <_malloc_r+0xfc>
 8003d8c:	f000 f868 	bl	8003e60 <__malloc_lock>
 8003d90:	f8d8 3000 	ldr.w	r3, [r8]
 8003d94:	461c      	mov	r4, r3
 8003d96:	bb5c      	cbnz	r4, 8003df0 <_malloc_r+0x90>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f7ff ffc0 	bl	8003d20 <sbrk_aligned>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	4604      	mov	r4, r0
 8003da4:	d155      	bne.n	8003e52 <_malloc_r+0xf2>
 8003da6:	f8d8 4000 	ldr.w	r4, [r8]
 8003daa:	4626      	mov	r6, r4
 8003dac:	2e00      	cmp	r6, #0
 8003dae:	d145      	bne.n	8003e3c <_malloc_r+0xdc>
 8003db0:	2c00      	cmp	r4, #0
 8003db2:	d048      	beq.n	8003e46 <_malloc_r+0xe6>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	4631      	mov	r1, r6
 8003db8:	4638      	mov	r0, r7
 8003dba:	eb04 0903 	add.w	r9, r4, r3
 8003dbe:	f000 fc93 	bl	80046e8 <_sbrk_r>
 8003dc2:	4581      	cmp	r9, r0
 8003dc4:	d13f      	bne.n	8003e46 <_malloc_r+0xe6>
 8003dc6:	6821      	ldr	r1, [r4, #0]
 8003dc8:	4638      	mov	r0, r7
 8003dca:	1a6d      	subs	r5, r5, r1
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f7ff ffa7 	bl	8003d20 <sbrk_aligned>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d037      	beq.n	8003e46 <_malloc_r+0xe6>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	442b      	add	r3, r5
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d038      	beq.n	8003e56 <_malloc_r+0xf6>
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	42a2      	cmp	r2, r4
 8003de8:	d12b      	bne.n	8003e42 <_malloc_r+0xe2>
 8003dea:	2200      	movs	r2, #0
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	e00f      	b.n	8003e10 <_malloc_r+0xb0>
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	1b52      	subs	r2, r2, r5
 8003df4:	d41f      	bmi.n	8003e36 <_malloc_r+0xd6>
 8003df6:	2a0b      	cmp	r2, #11
 8003df8:	d917      	bls.n	8003e2a <_malloc_r+0xca>
 8003dfa:	1961      	adds	r1, r4, r5
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	6025      	str	r5, [r4, #0]
 8003e00:	bf18      	it	ne
 8003e02:	6059      	strne	r1, [r3, #4]
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	bf08      	it	eq
 8003e08:	f8c8 1000 	streq.w	r1, [r8]
 8003e0c:	5162      	str	r2, [r4, r5]
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	4638      	mov	r0, r7
 8003e12:	f104 060b 	add.w	r6, r4, #11
 8003e16:	f000 f829 	bl	8003e6c <__malloc_unlock>
 8003e1a:	f026 0607 	bic.w	r6, r6, #7
 8003e1e:	1d23      	adds	r3, r4, #4
 8003e20:	1af2      	subs	r2, r6, r3
 8003e22:	d0ae      	beq.n	8003d82 <_malloc_r+0x22>
 8003e24:	1b9b      	subs	r3, r3, r6
 8003e26:	50a3      	str	r3, [r4, r2]
 8003e28:	e7ab      	b.n	8003d82 <_malloc_r+0x22>
 8003e2a:	42a3      	cmp	r3, r4
 8003e2c:	6862      	ldr	r2, [r4, #4]
 8003e2e:	d1dd      	bne.n	8003dec <_malloc_r+0x8c>
 8003e30:	f8c8 2000 	str.w	r2, [r8]
 8003e34:	e7ec      	b.n	8003e10 <_malloc_r+0xb0>
 8003e36:	4623      	mov	r3, r4
 8003e38:	6864      	ldr	r4, [r4, #4]
 8003e3a:	e7ac      	b.n	8003d96 <_malloc_r+0x36>
 8003e3c:	4634      	mov	r4, r6
 8003e3e:	6876      	ldr	r6, [r6, #4]
 8003e40:	e7b4      	b.n	8003dac <_malloc_r+0x4c>
 8003e42:	4613      	mov	r3, r2
 8003e44:	e7cc      	b.n	8003de0 <_malloc_r+0x80>
 8003e46:	230c      	movs	r3, #12
 8003e48:	4638      	mov	r0, r7
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	f000 f80e 	bl	8003e6c <__malloc_unlock>
 8003e50:	e797      	b.n	8003d82 <_malloc_r+0x22>
 8003e52:	6025      	str	r5, [r4, #0]
 8003e54:	e7dc      	b.n	8003e10 <_malloc_r+0xb0>
 8003e56:	605b      	str	r3, [r3, #4]
 8003e58:	deff      	udf	#255	; 0xff
 8003e5a:	bf00      	nop
 8003e5c:	200003bc 	.word	0x200003bc

08003e60 <__malloc_lock>:
 8003e60:	4801      	ldr	r0, [pc, #4]	; (8003e68 <__malloc_lock+0x8>)
 8003e62:	f7ff bf13 	b.w	8003c8c <__retarget_lock_acquire_recursive>
 8003e66:	bf00      	nop
 8003e68:	200003b8 	.word	0x200003b8

08003e6c <__malloc_unlock>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	; (8003e74 <__malloc_unlock+0x8>)
 8003e6e:	f7ff bf0e 	b.w	8003c8e <__retarget_lock_release_recursive>
 8003e72:	bf00      	nop
 8003e74:	200003b8 	.word	0x200003b8

08003e78 <__sfputc_r>:
 8003e78:	6893      	ldr	r3, [r2, #8]
 8003e7a:	b410      	push	{r4}
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	da07      	bge.n	8003e94 <__sfputc_r+0x1c>
 8003e84:	6994      	ldr	r4, [r2, #24]
 8003e86:	42a3      	cmp	r3, r4
 8003e88:	db01      	blt.n	8003e8e <__sfputc_r+0x16>
 8003e8a:	290a      	cmp	r1, #10
 8003e8c:	d102      	bne.n	8003e94 <__sfputc_r+0x1c>
 8003e8e:	bc10      	pop	{r4}
 8003e90:	f7ff bdef 	b.w	8003a72 <__swbuf_r>
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	1c58      	adds	r0, r3, #1
 8003e98:	6010      	str	r0, [r2, #0]
 8003e9a:	7019      	strb	r1, [r3, #0]
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	bc10      	pop	{r4}
 8003ea0:	4770      	bx	lr

08003ea2 <__sfputs_r>:
 8003ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	18d5      	adds	r5, r2, r3
 8003eac:	42ac      	cmp	r4, r5
 8003eae:	d101      	bne.n	8003eb4 <__sfputs_r+0x12>
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e007      	b.n	8003ec4 <__sfputs_r+0x22>
 8003eb4:	463a      	mov	r2, r7
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ebc:	f7ff ffdc 	bl	8003e78 <__sfputc_r>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d1f3      	bne.n	8003eac <__sfputs_r+0xa>
 8003ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ec8 <_vfiprintf_r>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	460d      	mov	r5, r1
 8003ece:	4614      	mov	r4, r2
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	b09d      	sub	sp, #116	; 0x74
 8003ed6:	b118      	cbz	r0, 8003ee0 <_vfiprintf_r+0x18>
 8003ed8:	6a03      	ldr	r3, [r0, #32]
 8003eda:	b90b      	cbnz	r3, 8003ee0 <_vfiprintf_r+0x18>
 8003edc:	f7ff fcda 	bl	8003894 <__sinit>
 8003ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee2:	07d9      	lsls	r1, r3, #31
 8003ee4:	d405      	bmi.n	8003ef2 <_vfiprintf_r+0x2a>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	059a      	lsls	r2, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <_vfiprintf_r+0x2a>
 8003eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eee:	f7ff fecd 	bl	8003c8c <__retarget_lock_acquire_recursive>
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	071b      	lsls	r3, r3, #28
 8003ef6:	d501      	bpl.n	8003efc <_vfiprintf_r+0x34>
 8003ef8:	692b      	ldr	r3, [r5, #16]
 8003efa:	b99b      	cbnz	r3, 8003f24 <_vfiprintf_r+0x5c>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4630      	mov	r0, r6
 8003f00:	f7ff fdf4 	bl	8003aec <__swsetup_r>
 8003f04:	b170      	cbz	r0, 8003f24 <_vfiprintf_r+0x5c>
 8003f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f08:	07dc      	lsls	r4, r3, #31
 8003f0a:	d504      	bpl.n	8003f16 <_vfiprintf_r+0x4e>
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	b01d      	add	sp, #116	; 0x74
 8003f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	0598      	lsls	r0, r3, #22
 8003f1a:	d4f7      	bmi.n	8003f0c <_vfiprintf_r+0x44>
 8003f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f1e:	f7ff feb6 	bl	8003c8e <__retarget_lock_release_recursive>
 8003f22:	e7f3      	b.n	8003f0c <_vfiprintf_r+0x44>
 8003f24:	2300      	movs	r3, #0
 8003f26:	9309      	str	r3, [sp, #36]	; 0x24
 8003f28:	2320      	movs	r3, #32
 8003f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f2e:	2330      	movs	r3, #48	; 0x30
 8003f30:	f04f 0901 	mov.w	r9, #1
 8003f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80040e8 <_vfiprintf_r+0x220>
 8003f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f40:	4623      	mov	r3, r4
 8003f42:	469a      	mov	sl, r3
 8003f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f48:	b10a      	cbz	r2, 8003f4e <_vfiprintf_r+0x86>
 8003f4a:	2a25      	cmp	r2, #37	; 0x25
 8003f4c:	d1f9      	bne.n	8003f42 <_vfiprintf_r+0x7a>
 8003f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f52:	d00b      	beq.n	8003f6c <_vfiprintf_r+0xa4>
 8003f54:	465b      	mov	r3, fp
 8003f56:	4622      	mov	r2, r4
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f7ff ffa1 	bl	8003ea2 <__sfputs_r>
 8003f60:	3001      	adds	r0, #1
 8003f62:	f000 80a9 	beq.w	80040b8 <_vfiprintf_r+0x1f0>
 8003f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f68:	445a      	add	r2, fp
 8003f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a1 	beq.w	80040b8 <_vfiprintf_r+0x1f0>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f80:	f10a 0a01 	add.w	sl, sl, #1
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	9307      	str	r3, [sp, #28]
 8003f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f8e:	4654      	mov	r4, sl
 8003f90:	2205      	movs	r2, #5
 8003f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f96:	4854      	ldr	r0, [pc, #336]	; (80040e8 <_vfiprintf_r+0x220>)
 8003f98:	f000 fbb6 	bl	8004708 <memchr>
 8003f9c:	9a04      	ldr	r2, [sp, #16]
 8003f9e:	b9d8      	cbnz	r0, 8003fd8 <_vfiprintf_r+0x110>
 8003fa0:	06d1      	lsls	r1, r2, #27
 8003fa2:	bf44      	itt	mi
 8003fa4:	2320      	movmi	r3, #32
 8003fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003faa:	0713      	lsls	r3, r2, #28
 8003fac:	bf44      	itt	mi
 8003fae:	232b      	movmi	r3, #43	; 0x2b
 8003fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8003fba:	d015      	beq.n	8003fe8 <_vfiprintf_r+0x120>
 8003fbc:	4654      	mov	r4, sl
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f04f 0c0a 	mov.w	ip, #10
 8003fc4:	9a07      	ldr	r2, [sp, #28]
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fcc:	3b30      	subs	r3, #48	; 0x30
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d94d      	bls.n	800406e <_vfiprintf_r+0x1a6>
 8003fd2:	b1b0      	cbz	r0, 8004002 <_vfiprintf_r+0x13a>
 8003fd4:	9207      	str	r2, [sp, #28]
 8003fd6:	e014      	b.n	8004002 <_vfiprintf_r+0x13a>
 8003fd8:	eba0 0308 	sub.w	r3, r0, r8
 8003fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	46a2      	mov	sl, r4
 8003fe4:	9304      	str	r3, [sp, #16]
 8003fe6:	e7d2      	b.n	8003f8e <_vfiprintf_r+0xc6>
 8003fe8:	9b03      	ldr	r3, [sp, #12]
 8003fea:	1d19      	adds	r1, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	9103      	str	r1, [sp, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bfbb      	ittet	lt
 8003ff4:	425b      	neglt	r3, r3
 8003ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8003ffa:	9307      	strge	r3, [sp, #28]
 8003ffc:	9307      	strlt	r3, [sp, #28]
 8003ffe:	bfb8      	it	lt
 8004000:	9204      	strlt	r2, [sp, #16]
 8004002:	7823      	ldrb	r3, [r4, #0]
 8004004:	2b2e      	cmp	r3, #46	; 0x2e
 8004006:	d10c      	bne.n	8004022 <_vfiprintf_r+0x15a>
 8004008:	7863      	ldrb	r3, [r4, #1]
 800400a:	2b2a      	cmp	r3, #42	; 0x2a
 800400c:	d134      	bne.n	8004078 <_vfiprintf_r+0x1b0>
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	3402      	adds	r4, #2
 8004012:	1d1a      	adds	r2, r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	9203      	str	r2, [sp, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfb8      	it	lt
 800401c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004020:	9305      	str	r3, [sp, #20]
 8004022:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040ec <_vfiprintf_r+0x224>
 8004026:	2203      	movs	r2, #3
 8004028:	4650      	mov	r0, sl
 800402a:	7821      	ldrb	r1, [r4, #0]
 800402c:	f000 fb6c 	bl	8004708 <memchr>
 8004030:	b138      	cbz	r0, 8004042 <_vfiprintf_r+0x17a>
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	9b04      	ldr	r3, [sp, #16]
 8004036:	eba0 000a 	sub.w	r0, r0, sl
 800403a:	4082      	lsls	r2, r0
 800403c:	4313      	orrs	r3, r2
 800403e:	3401      	adds	r4, #1
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004046:	2206      	movs	r2, #6
 8004048:	4829      	ldr	r0, [pc, #164]	; (80040f0 <_vfiprintf_r+0x228>)
 800404a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800404e:	f000 fb5b 	bl	8004708 <memchr>
 8004052:	2800      	cmp	r0, #0
 8004054:	d03f      	beq.n	80040d6 <_vfiprintf_r+0x20e>
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <_vfiprintf_r+0x22c>)
 8004058:	bb1b      	cbnz	r3, 80040a2 <_vfiprintf_r+0x1da>
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	3307      	adds	r3, #7
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	3308      	adds	r3, #8
 8004064:	9303      	str	r3, [sp, #12]
 8004066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004068:	443b      	add	r3, r7
 800406a:	9309      	str	r3, [sp, #36]	; 0x24
 800406c:	e768      	b.n	8003f40 <_vfiprintf_r+0x78>
 800406e:	460c      	mov	r4, r1
 8004070:	2001      	movs	r0, #1
 8004072:	fb0c 3202 	mla	r2, ip, r2, r3
 8004076:	e7a6      	b.n	8003fc6 <_vfiprintf_r+0xfe>
 8004078:	2300      	movs	r3, #0
 800407a:	f04f 0c0a 	mov.w	ip, #10
 800407e:	4619      	mov	r1, r3
 8004080:	3401      	adds	r4, #1
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	4620      	mov	r0, r4
 8004086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800408a:	3a30      	subs	r2, #48	; 0x30
 800408c:	2a09      	cmp	r2, #9
 800408e:	d903      	bls.n	8004098 <_vfiprintf_r+0x1d0>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0c6      	beq.n	8004022 <_vfiprintf_r+0x15a>
 8004094:	9105      	str	r1, [sp, #20]
 8004096:	e7c4      	b.n	8004022 <_vfiprintf_r+0x15a>
 8004098:	4604      	mov	r4, r0
 800409a:	2301      	movs	r3, #1
 800409c:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a0:	e7f0      	b.n	8004084 <_vfiprintf_r+0x1bc>
 80040a2:	ab03      	add	r3, sp, #12
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	462a      	mov	r2, r5
 80040a8:	4630      	mov	r0, r6
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <_vfiprintf_r+0x230>)
 80040ac:	a904      	add	r1, sp, #16
 80040ae:	f3af 8000 	nop.w
 80040b2:	4607      	mov	r7, r0
 80040b4:	1c78      	adds	r0, r7, #1
 80040b6:	d1d6      	bne.n	8004066 <_vfiprintf_r+0x19e>
 80040b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040ba:	07d9      	lsls	r1, r3, #31
 80040bc:	d405      	bmi.n	80040ca <_vfiprintf_r+0x202>
 80040be:	89ab      	ldrh	r3, [r5, #12]
 80040c0:	059a      	lsls	r2, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_vfiprintf_r+0x202>
 80040c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040c6:	f7ff fde2 	bl	8003c8e <__retarget_lock_release_recursive>
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	065b      	lsls	r3, r3, #25
 80040ce:	f53f af1d 	bmi.w	8003f0c <_vfiprintf_r+0x44>
 80040d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d4:	e71c      	b.n	8003f10 <_vfiprintf_r+0x48>
 80040d6:	ab03      	add	r3, sp, #12
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	462a      	mov	r2, r5
 80040dc:	4630      	mov	r0, r6
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <_vfiprintf_r+0x230>)
 80040e0:	a904      	add	r1, sp, #16
 80040e2:	f000 f87d 	bl	80041e0 <_printf_i>
 80040e6:	e7e4      	b.n	80040b2 <_vfiprintf_r+0x1ea>
 80040e8:	080049a6 	.word	0x080049a6
 80040ec:	080049ac 	.word	0x080049ac
 80040f0:	080049b0 	.word	0x080049b0
 80040f4:	00000000 	.word	0x00000000
 80040f8:	08003ea3 	.word	0x08003ea3

080040fc <_printf_common>:
 80040fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004100:	4616      	mov	r6, r2
 8004102:	4699      	mov	r9, r3
 8004104:	688a      	ldr	r2, [r1, #8]
 8004106:	690b      	ldr	r3, [r1, #16]
 8004108:	4607      	mov	r7, r0
 800410a:	4293      	cmp	r3, r2
 800410c:	bfb8      	it	lt
 800410e:	4613      	movlt	r3, r2
 8004110:	6033      	str	r3, [r6, #0]
 8004112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004116:	460c      	mov	r4, r1
 8004118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800411c:	b10a      	cbz	r2, 8004122 <_printf_common+0x26>
 800411e:	3301      	adds	r3, #1
 8004120:	6033      	str	r3, [r6, #0]
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	0699      	lsls	r1, r3, #26
 8004126:	bf42      	ittt	mi
 8004128:	6833      	ldrmi	r3, [r6, #0]
 800412a:	3302      	addmi	r3, #2
 800412c:	6033      	strmi	r3, [r6, #0]
 800412e:	6825      	ldr	r5, [r4, #0]
 8004130:	f015 0506 	ands.w	r5, r5, #6
 8004134:	d106      	bne.n	8004144 <_printf_common+0x48>
 8004136:	f104 0a19 	add.w	sl, r4, #25
 800413a:	68e3      	ldr	r3, [r4, #12]
 800413c:	6832      	ldr	r2, [r6, #0]
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	42ab      	cmp	r3, r5
 8004142:	dc2b      	bgt.n	800419c <_printf_common+0xa0>
 8004144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004148:	1e13      	subs	r3, r2, #0
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	bf18      	it	ne
 800414e:	2301      	movne	r3, #1
 8004150:	0692      	lsls	r2, r2, #26
 8004152:	d430      	bmi.n	80041b6 <_printf_common+0xba>
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800415c:	47c0      	blx	r8
 800415e:	3001      	adds	r0, #1
 8004160:	d023      	beq.n	80041aa <_printf_common+0xae>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	6922      	ldr	r2, [r4, #16]
 8004166:	f003 0306 	and.w	r3, r3, #6
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf14      	ite	ne
 800416e:	2500      	movne	r5, #0
 8004170:	6833      	ldreq	r3, [r6, #0]
 8004172:	f04f 0600 	mov.w	r6, #0
 8004176:	bf08      	it	eq
 8004178:	68e5      	ldreq	r5, [r4, #12]
 800417a:	f104 041a 	add.w	r4, r4, #26
 800417e:	bf08      	it	eq
 8004180:	1aed      	subeq	r5, r5, r3
 8004182:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004186:	bf08      	it	eq
 8004188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800418c:	4293      	cmp	r3, r2
 800418e:	bfc4      	itt	gt
 8004190:	1a9b      	subgt	r3, r3, r2
 8004192:	18ed      	addgt	r5, r5, r3
 8004194:	42b5      	cmp	r5, r6
 8004196:	d11a      	bne.n	80041ce <_printf_common+0xd2>
 8004198:	2000      	movs	r0, #0
 800419a:	e008      	b.n	80041ae <_printf_common+0xb2>
 800419c:	2301      	movs	r3, #1
 800419e:	4652      	mov	r2, sl
 80041a0:	4649      	mov	r1, r9
 80041a2:	4638      	mov	r0, r7
 80041a4:	47c0      	blx	r8
 80041a6:	3001      	adds	r0, #1
 80041a8:	d103      	bne.n	80041b2 <_printf_common+0xb6>
 80041aa:	f04f 30ff 	mov.w	r0, #4294967295
 80041ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b2:	3501      	adds	r5, #1
 80041b4:	e7c1      	b.n	800413a <_printf_common+0x3e>
 80041b6:	2030      	movs	r0, #48	; 0x30
 80041b8:	18e1      	adds	r1, r4, r3
 80041ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c4:	4422      	add	r2, r4
 80041c6:	3302      	adds	r3, #2
 80041c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041cc:	e7c2      	b.n	8004154 <_printf_common+0x58>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4622      	mov	r2, r4
 80041d2:	4649      	mov	r1, r9
 80041d4:	4638      	mov	r0, r7
 80041d6:	47c0      	blx	r8
 80041d8:	3001      	adds	r0, #1
 80041da:	d0e6      	beq.n	80041aa <_printf_common+0xae>
 80041dc:	3601      	adds	r6, #1
 80041de:	e7d9      	b.n	8004194 <_printf_common+0x98>

080041e0 <_printf_i>:
 80041e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	7e0f      	ldrb	r7, [r1, #24]
 80041e6:	4691      	mov	r9, r2
 80041e8:	2f78      	cmp	r7, #120	; 0x78
 80041ea:	4680      	mov	r8, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	469a      	mov	sl, r3
 80041f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f6:	d807      	bhi.n	8004208 <_printf_i+0x28>
 80041f8:	2f62      	cmp	r7, #98	; 0x62
 80041fa:	d80a      	bhi.n	8004212 <_printf_i+0x32>
 80041fc:	2f00      	cmp	r7, #0
 80041fe:	f000 80d5 	beq.w	80043ac <_printf_i+0x1cc>
 8004202:	2f58      	cmp	r7, #88	; 0x58
 8004204:	f000 80c1 	beq.w	800438a <_printf_i+0x1aa>
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004210:	e03a      	b.n	8004288 <_printf_i+0xa8>
 8004212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004216:	2b15      	cmp	r3, #21
 8004218:	d8f6      	bhi.n	8004208 <_printf_i+0x28>
 800421a:	a101      	add	r1, pc, #4	; (adr r1, 8004220 <_printf_i+0x40>)
 800421c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004220:	08004279 	.word	0x08004279
 8004224:	0800428d 	.word	0x0800428d
 8004228:	08004209 	.word	0x08004209
 800422c:	08004209 	.word	0x08004209
 8004230:	08004209 	.word	0x08004209
 8004234:	08004209 	.word	0x08004209
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004209 	.word	0x08004209
 8004240:	08004209 	.word	0x08004209
 8004244:	08004209 	.word	0x08004209
 8004248:	08004209 	.word	0x08004209
 800424c:	08004393 	.word	0x08004393
 8004250:	080042b9 	.word	0x080042b9
 8004254:	0800434d 	.word	0x0800434d
 8004258:	08004209 	.word	0x08004209
 800425c:	08004209 	.word	0x08004209
 8004260:	080043b5 	.word	0x080043b5
 8004264:	08004209 	.word	0x08004209
 8004268:	080042b9 	.word	0x080042b9
 800426c:	08004209 	.word	0x08004209
 8004270:	08004209 	.word	0x08004209
 8004274:	08004355 	.word	0x08004355
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	1d1a      	adds	r2, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	602a      	str	r2, [r5, #0]
 8004280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004288:	2301      	movs	r3, #1
 800428a:	e0a0      	b.n	80043ce <_printf_i+0x1ee>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	0607      	lsls	r7, r0, #24
 8004292:	f103 0104 	add.w	r1, r3, #4
 8004296:	6029      	str	r1, [r5, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0xbe>
 800429a:	681e      	ldr	r6, [r3, #0]
 800429c:	e003      	b.n	80042a6 <_printf_i+0xc6>
 800429e:	0646      	lsls	r6, r0, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0xba>
 80042a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	da03      	bge.n	80042b2 <_printf_i+0xd2>
 80042aa:	232d      	movs	r3, #45	; 0x2d
 80042ac:	4276      	negs	r6, r6
 80042ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b2:	230a      	movs	r3, #10
 80042b4:	4859      	ldr	r0, [pc, #356]	; (800441c <_printf_i+0x23c>)
 80042b6:	e012      	b.n	80042de <_printf_i+0xfe>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	1d19      	adds	r1, r3, #4
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	0605      	lsls	r5, r0, #24
 80042c2:	d501      	bpl.n	80042c8 <_printf_i+0xe8>
 80042c4:	681e      	ldr	r6, [r3, #0]
 80042c6:	e002      	b.n	80042ce <_printf_i+0xee>
 80042c8:	0641      	lsls	r1, r0, #25
 80042ca:	d5fb      	bpl.n	80042c4 <_printf_i+0xe4>
 80042cc:	881e      	ldrh	r6, [r3, #0]
 80042ce:	2f6f      	cmp	r7, #111	; 0x6f
 80042d0:	bf0c      	ite	eq
 80042d2:	2308      	moveq	r3, #8
 80042d4:	230a      	movne	r3, #10
 80042d6:	4851      	ldr	r0, [pc, #324]	; (800441c <_printf_i+0x23c>)
 80042d8:	2100      	movs	r1, #0
 80042da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042de:	6865      	ldr	r5, [r4, #4]
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	bfa8      	it	ge
 80042e4:	6821      	ldrge	r1, [r4, #0]
 80042e6:	60a5      	str	r5, [r4, #8]
 80042e8:	bfa4      	itt	ge
 80042ea:	f021 0104 	bicge.w	r1, r1, #4
 80042ee:	6021      	strge	r1, [r4, #0]
 80042f0:	b90e      	cbnz	r6, 80042f6 <_printf_i+0x116>
 80042f2:	2d00      	cmp	r5, #0
 80042f4:	d04b      	beq.n	800438e <_printf_i+0x1ae>
 80042f6:	4615      	mov	r5, r2
 80042f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80042fc:	fb03 6711 	mls	r7, r3, r1, r6
 8004300:	5dc7      	ldrb	r7, [r0, r7]
 8004302:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004306:	4637      	mov	r7, r6
 8004308:	42bb      	cmp	r3, r7
 800430a:	460e      	mov	r6, r1
 800430c:	d9f4      	bls.n	80042f8 <_printf_i+0x118>
 800430e:	2b08      	cmp	r3, #8
 8004310:	d10b      	bne.n	800432a <_printf_i+0x14a>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	07de      	lsls	r6, r3, #31
 8004316:	d508      	bpl.n	800432a <_printf_i+0x14a>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	6861      	ldr	r1, [r4, #4]
 800431c:	4299      	cmp	r1, r3
 800431e:	bfde      	ittt	le
 8004320:	2330      	movle	r3, #48	; 0x30
 8004322:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800432a:	1b52      	subs	r2, r2, r5
 800432c:	6122      	str	r2, [r4, #16]
 800432e:	464b      	mov	r3, r9
 8004330:	4621      	mov	r1, r4
 8004332:	4640      	mov	r0, r8
 8004334:	f8cd a000 	str.w	sl, [sp]
 8004338:	aa03      	add	r2, sp, #12
 800433a:	f7ff fedf 	bl	80040fc <_printf_common>
 800433e:	3001      	adds	r0, #1
 8004340:	d14a      	bne.n	80043d8 <_printf_i+0x1f8>
 8004342:	f04f 30ff 	mov.w	r0, #4294967295
 8004346:	b004      	add	sp, #16
 8004348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	f043 0320 	orr.w	r3, r3, #32
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	2778      	movs	r7, #120	; 0x78
 8004356:	4832      	ldr	r0, [pc, #200]	; (8004420 <_printf_i+0x240>)
 8004358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	6829      	ldr	r1, [r5, #0]
 8004360:	061f      	lsls	r7, r3, #24
 8004362:	f851 6b04 	ldr.w	r6, [r1], #4
 8004366:	d402      	bmi.n	800436e <_printf_i+0x18e>
 8004368:	065f      	lsls	r7, r3, #25
 800436a:	bf48      	it	mi
 800436c:	b2b6      	uxthmi	r6, r6
 800436e:	07df      	lsls	r7, r3, #31
 8004370:	bf48      	it	mi
 8004372:	f043 0320 	orrmi.w	r3, r3, #32
 8004376:	6029      	str	r1, [r5, #0]
 8004378:	bf48      	it	mi
 800437a:	6023      	strmi	r3, [r4, #0]
 800437c:	b91e      	cbnz	r6, 8004386 <_printf_i+0x1a6>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f023 0320 	bic.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	2310      	movs	r3, #16
 8004388:	e7a6      	b.n	80042d8 <_printf_i+0xf8>
 800438a:	4824      	ldr	r0, [pc, #144]	; (800441c <_printf_i+0x23c>)
 800438c:	e7e4      	b.n	8004358 <_printf_i+0x178>
 800438e:	4615      	mov	r5, r2
 8004390:	e7bd      	b.n	800430e <_printf_i+0x12e>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	6826      	ldr	r6, [r4, #0]
 8004396:	1d18      	adds	r0, r3, #4
 8004398:	6961      	ldr	r1, [r4, #20]
 800439a:	6028      	str	r0, [r5, #0]
 800439c:	0635      	lsls	r5, r6, #24
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	d501      	bpl.n	80043a6 <_printf_i+0x1c6>
 80043a2:	6019      	str	r1, [r3, #0]
 80043a4:	e002      	b.n	80043ac <_printf_i+0x1cc>
 80043a6:	0670      	lsls	r0, r6, #25
 80043a8:	d5fb      	bpl.n	80043a2 <_printf_i+0x1c2>
 80043aa:	8019      	strh	r1, [r3, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	4615      	mov	r5, r2
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	e7bc      	b.n	800432e <_printf_i+0x14e>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	2100      	movs	r1, #0
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	602a      	str	r2, [r5, #0]
 80043bc:	681d      	ldr	r5, [r3, #0]
 80043be:	6862      	ldr	r2, [r4, #4]
 80043c0:	4628      	mov	r0, r5
 80043c2:	f000 f9a1 	bl	8004708 <memchr>
 80043c6:	b108      	cbz	r0, 80043cc <_printf_i+0x1ec>
 80043c8:	1b40      	subs	r0, r0, r5
 80043ca:	6060      	str	r0, [r4, #4]
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	2300      	movs	r3, #0
 80043d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d6:	e7aa      	b.n	800432e <_printf_i+0x14e>
 80043d8:	462a      	mov	r2, r5
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	47d0      	blx	sl
 80043e2:	3001      	adds	r0, #1
 80043e4:	d0ad      	beq.n	8004342 <_printf_i+0x162>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	079b      	lsls	r3, r3, #30
 80043ea:	d413      	bmi.n	8004414 <_printf_i+0x234>
 80043ec:	68e0      	ldr	r0, [r4, #12]
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	4298      	cmp	r0, r3
 80043f2:	bfb8      	it	lt
 80043f4:	4618      	movlt	r0, r3
 80043f6:	e7a6      	b.n	8004346 <_printf_i+0x166>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4632      	mov	r2, r6
 80043fc:	4649      	mov	r1, r9
 80043fe:	4640      	mov	r0, r8
 8004400:	47d0      	blx	sl
 8004402:	3001      	adds	r0, #1
 8004404:	d09d      	beq.n	8004342 <_printf_i+0x162>
 8004406:	3501      	adds	r5, #1
 8004408:	68e3      	ldr	r3, [r4, #12]
 800440a:	9903      	ldr	r1, [sp, #12]
 800440c:	1a5b      	subs	r3, r3, r1
 800440e:	42ab      	cmp	r3, r5
 8004410:	dcf2      	bgt.n	80043f8 <_printf_i+0x218>
 8004412:	e7eb      	b.n	80043ec <_printf_i+0x20c>
 8004414:	2500      	movs	r5, #0
 8004416:	f104 0619 	add.w	r6, r4, #25
 800441a:	e7f5      	b.n	8004408 <_printf_i+0x228>
 800441c:	080049b7 	.word	0x080049b7
 8004420:	080049c8 	.word	0x080049c8

08004424 <__sflush_r>:
 8004424:	898a      	ldrh	r2, [r1, #12]
 8004426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004428:	4605      	mov	r5, r0
 800442a:	0710      	lsls	r0, r2, #28
 800442c:	460c      	mov	r4, r1
 800442e:	d457      	bmi.n	80044e0 <__sflush_r+0xbc>
 8004430:	684b      	ldr	r3, [r1, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	dc04      	bgt.n	8004440 <__sflush_r+0x1c>
 8004436:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	dc01      	bgt.n	8004440 <__sflush_r+0x1c>
 800443c:	2000      	movs	r0, #0
 800443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004442:	2e00      	cmp	r6, #0
 8004444:	d0fa      	beq.n	800443c <__sflush_r+0x18>
 8004446:	2300      	movs	r3, #0
 8004448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800444c:	682f      	ldr	r7, [r5, #0]
 800444e:	6a21      	ldr	r1, [r4, #32]
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	d032      	beq.n	80044ba <__sflush_r+0x96>
 8004454:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	075a      	lsls	r2, r3, #29
 800445a:	d505      	bpl.n	8004468 <__sflush_r+0x44>
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	1ac0      	subs	r0, r0, r3
 8004460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004462:	b10b      	cbz	r3, 8004468 <__sflush_r+0x44>
 8004464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004466:	1ac0      	subs	r0, r0, r3
 8004468:	2300      	movs	r3, #0
 800446a:	4602      	mov	r2, r0
 800446c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800446e:	4628      	mov	r0, r5
 8004470:	6a21      	ldr	r1, [r4, #32]
 8004472:	47b0      	blx	r6
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	d106      	bne.n	8004488 <__sflush_r+0x64>
 800447a:	6829      	ldr	r1, [r5, #0]
 800447c:	291d      	cmp	r1, #29
 800447e:	d82b      	bhi.n	80044d8 <__sflush_r+0xb4>
 8004480:	4a28      	ldr	r2, [pc, #160]	; (8004524 <__sflush_r+0x100>)
 8004482:	410a      	asrs	r2, r1
 8004484:	07d6      	lsls	r6, r2, #31
 8004486:	d427      	bmi.n	80044d8 <__sflush_r+0xb4>
 8004488:	2200      	movs	r2, #0
 800448a:	6062      	str	r2, [r4, #4]
 800448c:	6922      	ldr	r2, [r4, #16]
 800448e:	04d9      	lsls	r1, r3, #19
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	d504      	bpl.n	800449e <__sflush_r+0x7a>
 8004494:	1c42      	adds	r2, r0, #1
 8004496:	d101      	bne.n	800449c <__sflush_r+0x78>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b903      	cbnz	r3, 800449e <__sflush_r+0x7a>
 800449c:	6560      	str	r0, [r4, #84]	; 0x54
 800449e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a0:	602f      	str	r7, [r5, #0]
 80044a2:	2900      	cmp	r1, #0
 80044a4:	d0ca      	beq.n	800443c <__sflush_r+0x18>
 80044a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044aa:	4299      	cmp	r1, r3
 80044ac:	d002      	beq.n	80044b4 <__sflush_r+0x90>
 80044ae:	4628      	mov	r0, r5
 80044b0:	f7ff fbee 	bl	8003c90 <_free_r>
 80044b4:	2000      	movs	r0, #0
 80044b6:	6360      	str	r0, [r4, #52]	; 0x34
 80044b8:	e7c1      	b.n	800443e <__sflush_r+0x1a>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4628      	mov	r0, r5
 80044be:	47b0      	blx	r6
 80044c0:	1c41      	adds	r1, r0, #1
 80044c2:	d1c8      	bne.n	8004456 <__sflush_r+0x32>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0c5      	beq.n	8004456 <__sflush_r+0x32>
 80044ca:	2b1d      	cmp	r3, #29
 80044cc:	d001      	beq.n	80044d2 <__sflush_r+0xae>
 80044ce:	2b16      	cmp	r3, #22
 80044d0:	d101      	bne.n	80044d6 <__sflush_r+0xb2>
 80044d2:	602f      	str	r7, [r5, #0]
 80044d4:	e7b2      	b.n	800443c <__sflush_r+0x18>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	e7ae      	b.n	800443e <__sflush_r+0x1a>
 80044e0:	690f      	ldr	r7, [r1, #16]
 80044e2:	2f00      	cmp	r7, #0
 80044e4:	d0aa      	beq.n	800443c <__sflush_r+0x18>
 80044e6:	0793      	lsls	r3, r2, #30
 80044e8:	bf18      	it	ne
 80044ea:	2300      	movne	r3, #0
 80044ec:	680e      	ldr	r6, [r1, #0]
 80044ee:	bf08      	it	eq
 80044f0:	694b      	ldreq	r3, [r1, #20]
 80044f2:	1bf6      	subs	r6, r6, r7
 80044f4:	600f      	str	r7, [r1, #0]
 80044f6:	608b      	str	r3, [r1, #8]
 80044f8:	2e00      	cmp	r6, #0
 80044fa:	dd9f      	ble.n	800443c <__sflush_r+0x18>
 80044fc:	4633      	mov	r3, r6
 80044fe:	463a      	mov	r2, r7
 8004500:	4628      	mov	r0, r5
 8004502:	6a21      	ldr	r1, [r4, #32]
 8004504:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004508:	47e0      	blx	ip
 800450a:	2800      	cmp	r0, #0
 800450c:	dc06      	bgt.n	800451c <__sflush_r+0xf8>
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	e790      	b.n	800443e <__sflush_r+0x1a>
 800451c:	4407      	add	r7, r0
 800451e:	1a36      	subs	r6, r6, r0
 8004520:	e7ea      	b.n	80044f8 <__sflush_r+0xd4>
 8004522:	bf00      	nop
 8004524:	dfbffffe 	.word	0xdfbffffe

08004528 <_fflush_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	4605      	mov	r5, r0
 800452e:	460c      	mov	r4, r1
 8004530:	b913      	cbnz	r3, 8004538 <_fflush_r+0x10>
 8004532:	2500      	movs	r5, #0
 8004534:	4628      	mov	r0, r5
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	b118      	cbz	r0, 8004542 <_fflush_r+0x1a>
 800453a:	6a03      	ldr	r3, [r0, #32]
 800453c:	b90b      	cbnz	r3, 8004542 <_fflush_r+0x1a>
 800453e:	f7ff f9a9 	bl	8003894 <__sinit>
 8004542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f3      	beq.n	8004532 <_fflush_r+0xa>
 800454a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800454c:	07d0      	lsls	r0, r2, #31
 800454e:	d404      	bmi.n	800455a <_fflush_r+0x32>
 8004550:	0599      	lsls	r1, r3, #22
 8004552:	d402      	bmi.n	800455a <_fflush_r+0x32>
 8004554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004556:	f7ff fb99 	bl	8003c8c <__retarget_lock_acquire_recursive>
 800455a:	4628      	mov	r0, r5
 800455c:	4621      	mov	r1, r4
 800455e:	f7ff ff61 	bl	8004424 <__sflush_r>
 8004562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004564:	4605      	mov	r5, r0
 8004566:	07da      	lsls	r2, r3, #31
 8004568:	d4e4      	bmi.n	8004534 <_fflush_r+0xc>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	d4e1      	bmi.n	8004534 <_fflush_r+0xc>
 8004570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004572:	f7ff fb8c 	bl	8003c8e <__retarget_lock_release_recursive>
 8004576:	e7dd      	b.n	8004534 <_fflush_r+0xc>

08004578 <__swhatbuf_r>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	460c      	mov	r4, r1
 800457c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004580:	4615      	mov	r5, r2
 8004582:	2900      	cmp	r1, #0
 8004584:	461e      	mov	r6, r3
 8004586:	b096      	sub	sp, #88	; 0x58
 8004588:	da0c      	bge.n	80045a4 <__swhatbuf_r+0x2c>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	2100      	movs	r1, #0
 800458e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004592:	bf0c      	ite	eq
 8004594:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004598:	2340      	movne	r3, #64	; 0x40
 800459a:	2000      	movs	r0, #0
 800459c:	6031      	str	r1, [r6, #0]
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	b016      	add	sp, #88	; 0x58
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	466a      	mov	r2, sp
 80045a6:	f000 f87d 	bl	80046a4 <_fstat_r>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	dbed      	blt.n	800458a <__swhatbuf_r+0x12>
 80045ae:	9901      	ldr	r1, [sp, #4]
 80045b0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045b4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045b8:	4259      	negs	r1, r3
 80045ba:	4159      	adcs	r1, r3
 80045bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c0:	e7eb      	b.n	800459a <__swhatbuf_r+0x22>

080045c2 <__smakebuf_r>:
 80045c2:	898b      	ldrh	r3, [r1, #12]
 80045c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045c6:	079d      	lsls	r5, r3, #30
 80045c8:	4606      	mov	r6, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	d507      	bpl.n	80045de <__smakebuf_r+0x1c>
 80045ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	2301      	movs	r3, #1
 80045d8:	6163      	str	r3, [r4, #20]
 80045da:	b002      	add	sp, #8
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	466a      	mov	r2, sp
 80045e0:	ab01      	add	r3, sp, #4
 80045e2:	f7ff ffc9 	bl	8004578 <__swhatbuf_r>
 80045e6:	9900      	ldr	r1, [sp, #0]
 80045e8:	4605      	mov	r5, r0
 80045ea:	4630      	mov	r0, r6
 80045ec:	f7ff fbb8 	bl	8003d60 <_malloc_r>
 80045f0:	b948      	cbnz	r0, 8004606 <__smakebuf_r+0x44>
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	059a      	lsls	r2, r3, #22
 80045f8:	d4ef      	bmi.n	80045da <__smakebuf_r+0x18>
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	e7e3      	b.n	80045ce <__smakebuf_r+0xc>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	6020      	str	r0, [r4, #0]
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	9b00      	ldr	r3, [sp, #0]
 8004612:	6120      	str	r0, [r4, #16]
 8004614:	6163      	str	r3, [r4, #20]
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	b15b      	cbz	r3, 8004632 <__smakebuf_r+0x70>
 800461a:	4630      	mov	r0, r6
 800461c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004620:	f000 f852 	bl	80046c8 <_isatty_r>
 8004624:	b128      	cbz	r0, 8004632 <__smakebuf_r+0x70>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	431d      	orrs	r5, r3
 8004636:	81a5      	strh	r5, [r4, #12]
 8004638:	e7cf      	b.n	80045da <__smakebuf_r+0x18>

0800463a <_putc_r>:
 800463a:	b570      	push	{r4, r5, r6, lr}
 800463c:	460d      	mov	r5, r1
 800463e:	4614      	mov	r4, r2
 8004640:	4606      	mov	r6, r0
 8004642:	b118      	cbz	r0, 800464c <_putc_r+0x12>
 8004644:	6a03      	ldr	r3, [r0, #32]
 8004646:	b90b      	cbnz	r3, 800464c <_putc_r+0x12>
 8004648:	f7ff f924 	bl	8003894 <__sinit>
 800464c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800464e:	07d8      	lsls	r0, r3, #31
 8004650:	d405      	bmi.n	800465e <_putc_r+0x24>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	0599      	lsls	r1, r3, #22
 8004656:	d402      	bmi.n	800465e <_putc_r+0x24>
 8004658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800465a:	f7ff fb17 	bl	8003c8c <__retarget_lock_acquire_recursive>
 800465e:	68a3      	ldr	r3, [r4, #8]
 8004660:	3b01      	subs	r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	60a3      	str	r3, [r4, #8]
 8004666:	da05      	bge.n	8004674 <_putc_r+0x3a>
 8004668:	69a2      	ldr	r2, [r4, #24]
 800466a:	4293      	cmp	r3, r2
 800466c:	db12      	blt.n	8004694 <_putc_r+0x5a>
 800466e:	b2eb      	uxtb	r3, r5
 8004670:	2b0a      	cmp	r3, #10
 8004672:	d00f      	beq.n	8004694 <_putc_r+0x5a>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	6022      	str	r2, [r4, #0]
 800467a:	701d      	strb	r5, [r3, #0]
 800467c:	b2ed      	uxtb	r5, r5
 800467e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004680:	07da      	lsls	r2, r3, #31
 8004682:	d405      	bmi.n	8004690 <_putc_r+0x56>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	059b      	lsls	r3, r3, #22
 8004688:	d402      	bmi.n	8004690 <_putc_r+0x56>
 800468a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800468c:	f7ff faff 	bl	8003c8e <__retarget_lock_release_recursive>
 8004690:	4628      	mov	r0, r5
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	4629      	mov	r1, r5
 8004696:	4622      	mov	r2, r4
 8004698:	4630      	mov	r0, r6
 800469a:	f7ff f9ea 	bl	8003a72 <__swbuf_r>
 800469e:	4605      	mov	r5, r0
 80046a0:	e7ed      	b.n	800467e <_putc_r+0x44>
	...

080046a4 <_fstat_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	2300      	movs	r3, #0
 80046a8:	4d06      	ldr	r5, [pc, #24]	; (80046c4 <_fstat_r+0x20>)
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	f7fc fb11 	bl	8000cd8 <_fstat>
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d102      	bne.n	80046c0 <_fstat_r+0x1c>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	b103      	cbz	r3, 80046c0 <_fstat_r+0x1c>
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
 80046c2:	bf00      	nop
 80046c4:	200003b4 	.word	0x200003b4

080046c8 <_isatty_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	2300      	movs	r3, #0
 80046cc:	4d05      	ldr	r5, [pc, #20]	; (80046e4 <_isatty_r+0x1c>)
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fb0f 	bl	8000cf6 <_isatty>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_isatty_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_isatty_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	200003b4 	.word	0x200003b4

080046e8 <_sbrk_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	2300      	movs	r3, #0
 80046ec:	4d05      	ldr	r5, [pc, #20]	; (8004704 <_sbrk_r+0x1c>)
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	f7fc fb16 	bl	8000d24 <_sbrk>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_sbrk_r+0x1a>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_sbrk_r+0x1a>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	200003b4 	.word	0x200003b4

08004708 <memchr>:
 8004708:	4603      	mov	r3, r0
 800470a:	b510      	push	{r4, lr}
 800470c:	b2c9      	uxtb	r1, r1
 800470e:	4402      	add	r2, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	4618      	mov	r0, r3
 8004714:	d101      	bne.n	800471a <memchr+0x12>
 8004716:	2000      	movs	r0, #0
 8004718:	e003      	b.n	8004722 <memchr+0x1a>
 800471a:	7804      	ldrb	r4, [r0, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	428c      	cmp	r4, r1
 8004720:	d1f6      	bne.n	8004710 <memchr+0x8>
 8004722:	bd10      	pop	{r4, pc}

08004724 <_init>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr

08004730 <_fini>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr
