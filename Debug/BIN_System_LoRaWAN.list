
BIN_System_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004328  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004674  08004674  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004674  08004674  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000068  080046e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080046e4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa94  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b6  00000000  00000000  0002ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000946  00000000  00000000  0002d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188c0  00000000  00000000  0002e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e98a  00000000  00000000  00046a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008842c  00000000  00000000  000553d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038fc  00000000  00000000  000dd804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e1100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800441c 	.word	0x0800441c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800441c 	.word	0x0800441c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
void KIET_EnterStandBy();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b5b0      	push	{r4, r5, r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("MAIN==>RUNNIG\n");
 80001d6:	488f      	ldr	r0, [pc, #572]	; (8000414 <main+0x244>)
 80001d8:	f003 fab0 	bl	800373c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fd92 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f934 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 fa10 	bl	8000608 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001e8:	f000 f98e 	bl	8000508 <MX_I2C2_Init>
  MX_RTC_Init();
 80001ec:	f000 f9ba 	bl	8000564 <MX_RTC_Init>
  MX_SPI1_Init();
 80001f0:	f000 f9d4 	bl	800059c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  KIET_RTC_Init();
 80001f4:	f000 fa96 	bl	8000724 <KIET_RTC_Init>
  myLoRa = newLoRa();
 80001f8:	4c87      	ldr	r4, [pc, #540]	; (8000418 <main+0x248>)
 80001fa:	463b      	mov	r3, r7
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fe0b 	bl	8002e18 <newLoRa>
 8000202:	4625      	mov	r5, r4
 8000204:	463c      	mov	r4, r7
 8000206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000212:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  //	LoRa_reset(&myLoRa);

	myLoRa.hSPIx                 = &hspi1;
 8000216:	4b80      	ldr	r3, [pc, #512]	; (8000418 <main+0x248>)
 8000218:	4a80      	ldr	r2, [pc, #512]	; (800041c <main+0x24c>)
 800021a:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = NSS_GPIO_Port;
 800021c:	4b7e      	ldr	r3, [pc, #504]	; (8000418 <main+0x248>)
 800021e:	4a80      	ldr	r2, [pc, #512]	; (8000420 <main+0x250>)
 8000220:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = NSS_Pin;
 8000222:	4b7d      	ldr	r3, [pc, #500]	; (8000418 <main+0x248>)
 8000224:	2210      	movs	r2, #16
 8000226:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = RST_GPIO_Port;
 8000228:	4b7b      	ldr	r3, [pc, #492]	; (8000418 <main+0x248>)
 800022a:	4a7e      	ldr	r2, [pc, #504]	; (8000424 <main+0x254>)
 800022c:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RST_Pin;
 800022e:	4b7a      	ldr	r3, [pc, #488]	; (8000418 <main+0x248>)
 8000230:	2201      	movs	r2, #1
 8000232:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port			 = DIO0_GPIO_Port;
 8000234:	4b78      	ldr	r3, [pc, #480]	; (8000418 <main+0x248>)
 8000236:	4a7a      	ldr	r2, [pc, #488]	; (8000420 <main+0x250>)
 8000238:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin				 = DIO0_Pin;
 800023a:	4b77      	ldr	r3, [pc, #476]	; (8000418 <main+0x248>)
 800023c:	2202      	movs	r2, #2
 800023e:	829a      	strh	r2, [r3, #20]
	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000240:	4b75      	ldr	r3, [pc, #468]	; (8000418 <main+0x248>)
 8000242:	f240 12b1 	movw	r2, #433	; 0x1b1
 8000246:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000248:	4b73      	ldr	r3, [pc, #460]	; (8000418 <main+0x248>)
 800024a:	2207      	movs	r2, #7
 800024c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth			 = BW_125KHz;				  // default = BW_125KHz
 8000250:	4b71      	ldr	r3, [pc, #452]	; (8000418 <main+0x248>)
 8000252:	2207      	movs	r2, #7
 8000254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate				 = CR_4_5;						// default = CR_4_5
 8000258:	4b6f      	ldr	r3, [pc, #444]	; (8000418 <main+0x248>)
 800025a:	2201      	movs	r2, #1
 800025c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power				 = POWER_11db;				// default = 20db
 8000260:	4b6d      	ldr	r3, [pc, #436]	; (8000418 <main+0x248>)
 8000262:	22f6      	movs	r2, #246	; 0xf6
 8000264:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000268:	4b6b      	ldr	r3, [pc, #428]	; (8000418 <main+0x248>)
 800026a:	2278      	movs	r2, #120	; 0x78
 800026c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble				 = 8;		  					// default = 8;
 8000270:	4b69      	ldr	r3, [pc, #420]	; (8000418 <main+0x248>)
 8000272:	2208      	movs	r2, #8
 8000274:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000276:	4868      	ldr	r0, [pc, #416]	; (8000418 <main+0x248>)
 8000278:	f002 fdf7 	bl	8002e6a <LoRa_reset>

	uint16_t loraStatus= LoRa_init(&myLoRa);
 800027c:	4866      	ldr	r0, [pc, #408]	; (8000418 <main+0x248>)
 800027e:	f003 f89e 	bl	80033be <LoRa_init>
 8000282:	4603      	mov	r3, r0
 8000284:	86fb      	strh	r3, [r7, #54]	; 0x36
	for (uint8_t i = 0; i<= 127; i++) {
 8000286:	2300      	movs	r3, #0
 8000288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800028c:	e012      	b.n	80002b4 <main+0xe4>
		printf("%i--%d\n",i,LoRa_read(&myLoRa, i));
 800028e:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000296:	4619      	mov	r1, r3
 8000298:	485f      	ldr	r0, [pc, #380]	; (8000418 <main+0x248>)
 800029a:	f002 ffab 	bl	80031f4 <LoRa_read>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4621      	mov	r1, r4
 80002a4:	4860      	ldr	r0, [pc, #384]	; (8000428 <main+0x258>)
 80002a6:	f003 f9e3 	bl	8003670 <iprintf>
	for (uint8_t i = 0; i<= 127; i++) {
 80002aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80002ae:	3301      	adds	r3, #1
 80002b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80002b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	dae8      	bge.n	800028e <main+0xbe>
	}
	if (loraStatus==LORA_OK) {
 80002bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80002be:	2bc8      	cmp	r3, #200	; 0xc8
 80002c0:	d10d      	bne.n	80002de <main+0x10e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	4857      	ldr	r0, [pc, #348]	; (8000424 <main+0x254>)
 80002c8:	f001 f80a 	bl	80012e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80002cc:	2064      	movs	r0, #100	; 0x64
 80002ce:	f000 fd7b 	bl	8000dc8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2120      	movs	r1, #32
 80002d6:	4853      	ldr	r0, [pc, #332]	; (8000424 <main+0x254>)
 80002d8:	f001 f802 	bl	80012e0 <HAL_GPIO_WritePin>
 80002dc:	e01c      	b.n	8000318 <main+0x148>
	} else {
		for (uint8_t i = 0; i<= 10; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80002e4:	e014      	b.n	8000310 <main+0x140>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	484e      	ldr	r0, [pc, #312]	; (8000424 <main+0x254>)
 80002ec:	f000 fff8 	bl	80012e0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 fd69 	bl	8000dc8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	484a      	ldr	r0, [pc, #296]	; (8000424 <main+0x254>)
 80002fc:	f000 fff0 	bl	80012e0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000300:	2064      	movs	r0, #100	; 0x64
 8000302:	f000 fd61 	bl	8000dc8 <HAL_Delay>
		for (uint8_t i = 0; i<= 10; i++) {
 8000306:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800030a:	3301      	adds	r3, #1
 800030c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000310:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000314:	2b0a      	cmp	r3, #10
 8000316:	d9e6      	bls.n	80002e6 <main+0x116>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8000318:	4b44      	ldr	r3, [pc, #272]	; (800042c <main+0x25c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <main+0x25c>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6013      	str	r3, [r2, #0]

	  send_data[0] = 0x3B; // MY ADDRESS
 8000324:	4b42      	ldr	r3, [pc, #264]	; (8000430 <main+0x260>)
 8000326:	223b      	movs	r2, #59	; 0x3b
 8000328:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<26; i++) send_data[i+1] = 48+i;
 800032a:	2300      	movs	r3, #0
 800032c:	63bb      	str	r3, [r7, #56]	; 0x38
 800032e:	e00a      	b.n	8000346 <main+0x176>
 8000330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000332:	b2da      	uxtb	r2, r3
 8000334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000336:	3301      	adds	r3, #1
 8000338:	3230      	adds	r2, #48	; 0x30
 800033a:	b2d1      	uxtb	r1, r2
 800033c:	4a3c      	ldr	r2, [pc, #240]	; (8000430 <main+0x260>)
 800033e:	54d1      	strb	r1, [r2, r3]
 8000340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000342:	3301      	adds	r3, #1
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
 8000346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000348:	2b19      	cmp	r3, #25
 800034a:	ddf1      	ble.n	8000330 <main+0x160>
	  uint8_t flag = LoRa_transmit(&myLoRa, send_data, 3, 1000);
 800034c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000350:	2203      	movs	r2, #3
 8000352:	4937      	ldr	r1, [pc, #220]	; (8000430 <main+0x260>)
 8000354:	4830      	ldr	r0, [pc, #192]	; (8000418 <main+0x248>)
 8000356:	f002 ffd5 	bl	8003304 <LoRa_transmit>
 800035a:	4603      	mov	r3, r0
 800035c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  if (flag) {
 8000360:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00f      	beq.n	8000388 <main+0x1b8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2140      	movs	r1, #64	; 0x40
 800036c:	482d      	ldr	r0, [pc, #180]	; (8000424 <main+0x254>)
 800036e:	f000 ffb7 	bl	80012e0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000372:	2064      	movs	r0, #100	; 0x64
 8000374:	f000 fd28 	bl	8000dc8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4829      	ldr	r0, [pc, #164]	; (8000424 <main+0x254>)
 800037e:	f000 ffaf 	bl	80012e0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000382:	2064      	movs	r0, #100	; 0x64
 8000384:	f000 fd20 	bl	8000dc8 <HAL_Delay>
	  }

	  KIET_ToggleLED();
 8000388:	f000 faf4 	bl	8000974 <KIET_ToggleLED>
	  HAL_Delay(100);
 800038c:	2064      	movs	r0, #100	; 0x64
 800038e:	f000 fd1b 	bl	8000dc8 <HAL_Delay>
	  	printf("CHECK RTC_CRL_ALRG %d\n", READ_BIT(RTC->CRL, RTC_CRL_ALRF));
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <main+0x264>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	4619      	mov	r1, r3
 800039c:	4826      	ldr	r0, [pc, #152]	; (8000438 <main+0x268>)
 800039e:	f003 f967 	bl	8003670 <iprintf>
	  	printf("CHEKC RTC_ DIVH %d, and DIVL: %d\n ", RTC->DIVH ,RTC->DIVL);
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <main+0x264>)
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	4a23      	ldr	r2, [pc, #140]	; (8000434 <main+0x264>)
 80003a8:	6952      	ldr	r2, [r2, #20]
 80003aa:	4619      	mov	r1, r3
 80003ac:	4823      	ldr	r0, [pc, #140]	; (800043c <main+0x26c>)
 80003ae:	f003 f95f 	bl	8003670 <iprintf>
	  	printf("CHEKC RTC_ CNTH  %d, and CNTL: %d\n" , RTC->CNTH ,RTC->CNTL);
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <main+0x264>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <main+0x264>)
 80003b8:	69d2      	ldr	r2, [r2, #28]
 80003ba:	4619      	mov	r1, r3
 80003bc:	4820      	ldr	r0, [pc, #128]	; (8000440 <main+0x270>)
 80003be:	f003 f957 	bl	8003670 <iprintf>
	  	printf("CHEKC RTC_ ANRL: %d, and ANRH: %d\n" , RTC->ALRH ,RTC->ALRL);
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <main+0x264>)
 80003c4:	6a1b      	ldr	r3, [r3, #32]
 80003c6:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <main+0x264>)
 80003c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80003ca:	4619      	mov	r1, r3
 80003cc:	481d      	ldr	r0, [pc, #116]	; (8000444 <main+0x274>)
 80003ce:	f003 f94f 	bl	8003670 <iprintf>
	  	if (READ_BIT(RTC->CRL, RTC_CRL_ALRF)!=0) {
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <main+0x264>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d09c      	beq.n	8000318 <main+0x148>
	  		printf("Alter alrm");
 80003de:	481a      	ldr	r0, [pc, #104]	; (8000448 <main+0x278>)
 80003e0:	f003 f946 	bl	8003670 <iprintf>
	  		CLEAR_BIT(RTC->CRL, RTC_CRL_ALRF);
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <main+0x264>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4a12      	ldr	r2, [pc, #72]	; (8000434 <main+0x264>)
 80003ea:	f023 0302 	bic.w	r3, r3, #2
 80003ee:	6053      	str	r3, [r2, #4]
	  		KIET_revise();
 80003f0:	f000 fa82 	bl	80008f8 <KIET_revise>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003fa:	480a      	ldr	r0, [pc, #40]	; (8000424 <main+0x254>)
 80003fc:	f000 ff70 	bl	80012e0 <HAL_GPIO_WritePin>
	  		HAL_Delay(100);
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fce1 	bl	8000dc8 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <main+0x254>)
 800040e:	f000 ff67 	bl	80012e0 <HAL_GPIO_WritePin>
  {
 8000412:	e781      	b.n	8000318 <main+0x148>
 8000414:	08004434 	.word	0x08004434
 8000418:	20000144 	.word	0x20000144
 800041c:	200000ec 	.word	0x200000ec
 8000420:	40010800 	.word	0x40010800
 8000424:	40010c00 	.word	0x40010c00
 8000428:	08004444 	.word	0x08004444
 800042c:	40007000 	.word	0x40007000
 8000430:	20000170 	.word	0x20000170
 8000434:	40002800 	.word	0x40002800
 8000438:	0800444c 	.word	0x0800444c
 800043c:	08004464 	.word	0x08004464
 8000440:	08004488 	.word	0x08004488
 8000444:	080044ac 	.word	0x080044ac
 8000448:	080044d0 	.word	0x080044d0

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b094      	sub	sp, #80	; 0x50
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000456:	2228      	movs	r2, #40	; 0x28
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f003 fa4e 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800047c:	2309      	movs	r3, #9
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800048e:	2301      	movs	r3, #1
 8000490:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	2302      	movs	r3, #2
 8000494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 f89c 	bl	80015e4 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004b2:	f000 fa6b 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fb08 	bl	8001ae8 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004de:	f000 fa55 	bl	800098c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004e2:	2301      	movs	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ea:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fc88 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004fa:	f000 fa47 	bl	800098c <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3750      	adds	r7, #80	; 0x50
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_I2C2_Init+0x50>)
 800050e:	4a13      	ldr	r2, [pc, #76]	; (800055c <MX_I2C2_Init+0x54>)
 8000510:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_I2C2_Init+0x50>)
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <MX_I2C2_Init+0x58>)
 8000516:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_I2C2_Init+0x50>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_I2C2_Init+0x50>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_I2C2_Init+0x50>)
 8000526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800052a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <MX_I2C2_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_I2C2_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <MX_I2C2_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_I2C2_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_I2C2_Init+0x50>)
 8000546:	f000 fefd 	bl	8001344 <HAL_I2C_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000550:	f000 fa1c 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000084 	.word	0x20000084
 800055c:	40005800 	.word	0x40005800
 8000560:	000186a0 	.word	0x000186a0

08000564 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_RTC_Init+0x30>)
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <MX_RTC_Init+0x34>)
 800056c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_RTC_Init+0x30>)
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_RTC_Init+0x30>)
 8000578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_RTC_Init+0x30>)
 8000580:	f001 fdac 	bl	80020dc <HAL_RTC_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800058a:	f000 f9ff 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000d8 	.word	0x200000d8
 8000598:	40002800 	.word	0x40002800

0800059c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_SPI1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	; (8000604 <MX_SPI1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_SPI1_Init+0x64>)
 80005a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_SPI1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_SPI1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_SPI1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_SPI1_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_SPI1_Init+0x64>)
 80005c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_SPI1_Init+0x64>)
 80005d0:	2210      	movs	r2, #16
 80005d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_SPI1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_SPI1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_SPI1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_SPI1_Init+0x64>)
 80005e8:	220a      	movs	r2, #10
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_SPI1_Init+0x64>)
 80005ee:	f001 fe7e 	bl	80022ee <HAL_SPI_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 f9c8 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000ec 	.word	0x200000ec
 8000604:	40013000 	.word	0x40013000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061c:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <MX_GPIO_Init+0x10c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a3c      	ldr	r2, [pc, #240]	; (8000714 <MX_GPIO_Init+0x10c>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <MX_GPIO_Init+0x10c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000634:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0x10c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0x10c>)
 800063a:	f043 0320 	orr.w	r3, r3, #32
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0x10c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0320 	and.w	r3, r3, #32
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <MX_GPIO_Init+0x10c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a30      	ldr	r2, [pc, #192]	; (8000714 <MX_GPIO_Init+0x10c>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_GPIO_Init+0x10c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_GPIO_Init+0x10c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0x10c>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0x10c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2110      	movs	r1, #16
 8000680:	4825      	ldr	r0, [pc, #148]	; (8000718 <MX_GPIO_Init+0x110>)
 8000682:	f000 fe2d 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	4824      	ldr	r0, [pc, #144]	; (800071c <MX_GPIO_Init+0x114>)
 800068c:	f000 fe28 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|GPIO_PIN_7|GPIO_PIN_8
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000696:	4821      	ldr	r0, [pc, #132]	; (800071c <MX_GPIO_Init+0x114>)
 8000698:	f000 fe22 	bl	80012e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0x118>)
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	481a      	ldr	r0, [pc, #104]	; (8000718 <MX_GPIO_Init+0x110>)
 80006b0:	f000 fc92 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80006b4:	2310      	movs	r3, #16
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <MX_GPIO_Init+0x110>)
 80006cc:	f000 fc84 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80006d0:	2301      	movs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_GPIO_Init+0x114>)
 80006e8:	f000 fc76 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GPIO_PIN_7|GPIO_PIN_8
 80006ec:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80006f0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_GPIO_Init+0x114>)
 8000706:	f000 fc67 	bl	8000fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800
 800071c:	40010c00 	.word	0x40010c00
 8000720:	10110000 	.word	0x10110000

08000724 <KIET_RTC_Init>:

/* USER CODE BEGIN 4 */

void KIET_RTC_Init(){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	/** @note */

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <KIET_RTC_Init+0xa8>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a27      	ldr	r2, [pc, #156]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	61d3      	str	r3, [r2, #28]

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <KIET_RTC_Init+0xa8>)
 800073c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000740:	61d3      	str	r3, [r2, #28]

	SET_BIT(PWR->CR, PWR_CR_DBP);
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <KIET_RTC_Init+0xac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <KIET_RTC_Init+0xac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]

	printf("CHEKC POINT -1: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY));
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	4619      	mov	r1, r3
 8000758:	481e      	ldr	r0, [pc, #120]	; (80007d4 <KIET_RTC_Init+0xb0>)
 800075a:	f002 ff89 	bl	8003670 <iprintf>
	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6213      	str	r3, [r2, #32]
	uint8_t count = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]

	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 800076e:	e009      	b.n	8000784 <KIET_RTC_Init+0x60>
		count++;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	3301      	adds	r3, #1
 8000774:	71fb      	strb	r3, [r7, #7]
		if (count>100) {
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b64      	cmp	r3, #100	; 0x64
 800077a:	d903      	bls.n	8000784 <KIET_RTC_Init+0x60>
			printf("Have a problem for connecting the External Crystal Clock!");
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <KIET_RTC_Init+0xb4>)
 800077e:	f002 ff77 	bl	8003670 <iprintf>
			break;
 8000782:	e005      	b.n	8000790 <KIET_RTC_Init+0x6c>
	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0ef      	beq.n	8000770 <KIET_RTC_Init+0x4c>
		} else;
	}

	SET_BIT(RCC->BDCR, 9);
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000792:	6a1b      	ldr	r3, [r3, #32]
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <KIET_RTC_Init+0xa8>)
 8000796:	f043 0309 	orr.w	r3, r3, #9
 800079a:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(RCC->BDCR, 8);
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <KIET_RTC_Init+0xa8>)
 800079e:	6a1b      	ldr	r3, [r3, #32]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <KIET_RTC_Init+0xa8>)
 80007a2:	f023 0308 	bic.w	r3, r3, #8
 80007a6:	6213      	str	r3, [r2, #32]
	SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <KIET_RTC_Init+0xa8>)
 80007aa:	6a1b      	ldr	r3, [r3, #32]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <KIET_RTC_Init+0xa8>)
 80007ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b2:	6213      	str	r3, [r2, #32]
	printf("CHEKC POINT -1: %d\n", RCC->BDCR);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <KIET_RTC_Init+0xa8>)
 80007b6:	6a1b      	ldr	r3, [r3, #32]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <KIET_RTC_Init+0xb0>)
 80007bc:	f002 ff58 	bl	8003670 <iprintf>
	 * 10: LSI oscillator clock used as RTC clock
	 * 11: HSE oscillator clock divided by 128 used as RTC clock*/



	KIET_configure_rtc_register();
 80007c0:	f000 f80c 	bl	80007dc <KIET_configure_rtc_register>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40007000 	.word	0x40007000
 80007d4:	080044dc 	.word	0x080044dc
 80007d8:	080044f0 	.word	0x080044f0

080007dc <KIET_configure_rtc_register>:



void KIET_configure_rtc_register() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	/* 1. Poll RTOFF, wait until its value goes to ‘1
	 * 2. Set the CNF bit to enter configuration mode
	 * 3. Write to one or more RTC registers
	 * 4. Clear the CNF bit to exit configuration mode
	 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
	printf("CHEKC POINT 0: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)); //OKEE ==> VẤn đ�? ở CLOK chưa được kết nối vào
 80007e0:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <KIET_configure_rtc_register+0xf4>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	f003 0302 	and.w	r3, r3, #2
 80007e8:	4619      	mov	r1, r3
 80007ea:	483a      	ldr	r0, [pc, #232]	; (80008d4 <KIET_configure_rtc_register+0xf8>)
 80007ec:	f002 ff40 	bl	8003670 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 80007f0:	e002      	b.n	80007f8 <KIET_configure_rtc_register+0x1c>
 80007f2:	4839      	ldr	r0, [pc, #228]	; (80008d8 <KIET_configure_rtc_register+0xfc>)
 80007f4:	f002 ffa2 	bl	800373c <puts>
 80007f8:	4b38      	ldr	r3, [pc, #224]	; (80008dc <KIET_configure_rtc_register+0x100>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f6      	beq.n	80007f2 <KIET_configure_rtc_register+0x16>
	SET_BIT(RTC->CRL, RTC_CRL_CNF);
 8000804:	4b35      	ldr	r3, [pc, #212]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	4a34      	ldr	r2, [pc, #208]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 1: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000810:	4b32      	ldr	r3, [pc, #200]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	4619      	mov	r1, r3
 800081a:	4831      	ldr	r0, [pc, #196]	; (80008e0 <KIET_configure_rtc_register+0x104>)
 800081c:	f002 ff28 	bl	8003670 <iprintf>
	/*Begin for writing to RTC Register - Write one or more RTC register*/
	RTC->PRLH = 0U;
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 0x7FFFU;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000828:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800082c:	60da      	str	r2, [r3, #12]
	printf("CHEKC POINT 2: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	4619      	mov	r1, r3
 8000838:	482a      	ldr	r0, [pc, #168]	; (80008e4 <KIET_configure_rtc_register+0x108>)
 800083a:	f002 ff19 	bl	8003670 <iprintf>
	RTC->DIVH = 0x0000U;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
	RTC->DIVL = 0x8000U;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000846:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800084a:	615a      	str	r2, [r3, #20]
	printf("CHEKC POINT 3: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	4619      	mov	r1, r3
 8000856:	4824      	ldr	r0, [pc, #144]	; (80008e8 <KIET_configure_rtc_register+0x10c>)
 8000858:	f002 ff0a 	bl	8003670 <iprintf>
	RTC->CNTH = 0x0000U;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
	RTC->CNTL = 0x0000U;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]

	RTC->ALRH = 0x0000U;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
	RTC->ALRL = 0x0004U;
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000870:	2204      	movs	r2, #4
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	6013      	str	r3, [r2, #0]
	SET_BIT(RTC->CRH, RTC_CRH_OWIE);
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6013      	str	r3, [r2, #0]
	//	SET_BIT(RTC->CRH, RTC_CRH_SECIE);
	/*End of writing to RTC register*/
	CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <KIET_configure_rtc_register+0x100>)
 8000892:	f023 0310 	bic.w	r3, r3, #16
 8000896:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 4: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <KIET_configure_rtc_register+0x100>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	4619      	mov	r1, r3
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <KIET_configure_rtc_register+0x110>)
 80008a4:	f002 fee4 	bl	8003670 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 80008a8:	e007      	b.n	80008ba <KIET_configure_rtc_register+0xde>
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <KIET_configure_rtc_register+0x100>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	4619      	mov	r1, r3
 80008b4:	480e      	ldr	r0, [pc, #56]	; (80008f0 <KIET_configure_rtc_register+0x114>)
 80008b6:	f002 fedb 	bl	8003670 <iprintf>
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <KIET_configure_rtc_register+0x100>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f1      	beq.n	80008aa <KIET_configure_rtc_register+0xce>
	printf("Done configuration RTC\n");
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <KIET_configure_rtc_register+0x118>)
 80008c8:	f002 ff38 	bl	800373c <puts>

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	0800452c 	.word	0x0800452c
 80008d8:	08004540 	.word	0x08004540
 80008dc:	40002800 	.word	0x40002800
 80008e0:	08004554 	.word	0x08004554
 80008e4:	08004568 	.word	0x08004568
 80008e8:	0800457c 	.word	0x0800457c
 80008ec:	08004590 	.word	0x08004590
 80008f0:	080045a4 	.word	0x080045a4
 80008f4:	080045c8 	.word	0x080045c8

080008f8 <KIET_revise>:


void KIET_revise() {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 80008fc:	e002      	b.n	8000904 <KIET_revise+0xc>
 80008fe:	481a      	ldr	r0, [pc, #104]	; (8000968 <KIET_revise+0x70>)
 8000900:	f002 ff1c 	bl	800373c <puts>
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <KIET_revise+0x74>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0320 	and.w	r3, r3, #32
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f6      	beq.n	80008fe <KIET_revise+0x6>
		SET_BIT(RTC->CRL, RTC_CRL_CNF);
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <KIET_revise+0x74>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <KIET_revise+0x74>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6053      	str	r3, [r2, #4]
		/*Begin for writing to RTC Register - Write one or more RTC register*/
		RTC->DIVH = 0x0000U;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <KIET_revise+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
		RTC->DIVL = 0x8000U;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <KIET_revise+0x74>)
 8000924:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000928:	615a      	str	r2, [r3, #20]
		RTC->CNTH = 0x0000U;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <KIET_revise+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
		RTC->CNTL = 0x0000U;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <KIET_revise+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
		/*End of writing to RTC register*/
		CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <KIET_revise+0x74>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	4a0c      	ldr	r2, [pc, #48]	; (800096c <KIET_revise+0x74>)
 800093c:	f023 0310 	bic.w	r3, r3, #16
 8000940:	6053      	str	r3, [r2, #4]
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 8000942:	e007      	b.n	8000954 <KIET_revise+0x5c>
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <KIET_revise+0x74>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 0320 	and.w	r3, r3, #32
 800094c:	4619      	mov	r1, r3
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <KIET_revise+0x78>)
 8000950:	f002 fe8e 	bl	8003670 <iprintf>
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <KIET_revise+0x74>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f1      	beq.n	8000944 <KIET_revise+0x4c>
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	08004540 	.word	0x08004540
 800096c:	40002800 	.word	0x40002800
 8000970:	080045a4 	.word	0x080045a4

08000974 <KIET_ToggleLED>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
}

void KIET_ToggleLED() {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <KIET_ToggleLED+0x14>)
 800097e:	f000 fcc7 	bl	8001310 <HAL_GPIO_TogglePin>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010c00 	.word	0x40010c00

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_MspInit+0x5c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <HAL_MspInit+0x5c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_MspInit+0x5c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x5c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x5c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x5c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_MspInit+0x60>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_MspInit+0x60>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010000 	.word	0x40010000

080009fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <HAL_I2C_MspInit+0x74>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d124      	bne.n	8000a66 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_I2C_MspInit+0x78>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_I2C_MspInit+0x78>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_I2C_MspInit+0x78>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0x7c>)
 8000a4a:	f000 fac5 	bl	8000fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_I2C_MspInit+0x78>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x78>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_I2C_MspInit+0x78>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005800 	.word	0x40005800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010c00 	.word	0x40010c00

08000a7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_RTC_MspInit+0x3c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d110      	bne.n	8000ab0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000a8e:	f000 fd9d 	bl	80015cc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_RTC_MspInit+0x40>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_RTC_MspInit+0x40>)
 8000a98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_RTC_MspInit+0x40>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_RTC_MspInit+0x44>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40002800 	.word	0x40002800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	4242043c 	.word	0x4242043c

08000ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <HAL_SPI_MspInit+0x88>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d12f      	bne.n	8000b44 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b14:	23a0      	movs	r3, #160	; 0xa0
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000b28:	f000 fa56 	bl	8000fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b2c:	2340      	movs	r3, #64	; 0x40
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000b40:	f000 fa4a 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013000 	.word	0x40013000
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f8f7 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e00a      	b.n	8000bce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb8:	f3af 8000 	nop.w
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	60ba      	str	r2, [r7, #8]
 8000bc4:	b2ca      	uxtb	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dbf0      	blt.n	8000bb8 <_read+0x12>
  }

  return len;
 8000bd6:	687b      	ldr	r3, [r7, #4]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c06:	605a      	str	r2, [r3, #4]
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <_isatty>:

int _isatty(int file)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f002 fe92 	bl	8003998 <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20005000 	.word	0x20005000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	200001f0 	.word	0x200001f0
 8000ca8:	20000348 	.word	0x20000348

08000cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff fff8 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cbe:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd4:	4c09      	ldr	r4, [pc, #36]	; (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f002 fe5f 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce6:	f7ff fa73 	bl	80001d0 <main>
  bx lr
 8000cea:	4770      	bx	lr
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cf4:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 8000cf8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cfc:	20000344 	.word	0x20000344

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x28>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x28>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f92b 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff fe3a 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f935 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f90b 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x1c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_IncTick+0x20>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <HAL_IncTick+0x20>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200001f4 	.word	0x200001f4

08000db4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <HAL_GetTick+0x10>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	200001f4 	.word	0x200001f4

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff fff0 	bl	8000db4 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffe0 	bl	8000db4 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <__NVIC_SetPriorityGrouping>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Config>:
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff90 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff49 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff5e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff90 	bl	8000ec8 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5f 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffb0 	bl	8000f2c <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e169      	b.n	80012c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fec:	2201      	movs	r2, #1
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8158 	bne.w	80012ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4a9a      	ldr	r2, [pc, #616]	; (8001278 <HAL_GPIO_Init+0x2a0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d05e      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001014:	4a98      	ldr	r2, [pc, #608]	; (8001278 <HAL_GPIO_Init+0x2a0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d875      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800101a:	4a98      	ldr	r2, [pc, #608]	; (800127c <HAL_GPIO_Init+0x2a4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d058      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001020:	4a96      	ldr	r2, [pc, #600]	; (800127c <HAL_GPIO_Init+0x2a4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d86f      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001026:	4a96      	ldr	r2, [pc, #600]	; (8001280 <HAL_GPIO_Init+0x2a8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d052      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 800102c:	4a94      	ldr	r2, [pc, #592]	; (8001280 <HAL_GPIO_Init+0x2a8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d869      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001032:	4a94      	ldr	r2, [pc, #592]	; (8001284 <HAL_GPIO_Init+0x2ac>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d04c      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001038:	4a92      	ldr	r2, [pc, #584]	; (8001284 <HAL_GPIO_Init+0x2ac>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d863      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800103e:	4a92      	ldr	r2, [pc, #584]	; (8001288 <HAL_GPIO_Init+0x2b0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d046      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001044:	4a90      	ldr	r2, [pc, #576]	; (8001288 <HAL_GPIO_Init+0x2b0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d85d      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800104a:	2b12      	cmp	r3, #18
 800104c:	d82a      	bhi.n	80010a4 <HAL_GPIO_Init+0xcc>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d859      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <HAL_GPIO_Init+0x80>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	080010d3 	.word	0x080010d3
 800105c:	080010ad 	.word	0x080010ad
 8001060:	080010bf 	.word	0x080010bf
 8001064:	08001101 	.word	0x08001101
 8001068:	08001107 	.word	0x08001107
 800106c:	08001107 	.word	0x08001107
 8001070:	08001107 	.word	0x08001107
 8001074:	08001107 	.word	0x08001107
 8001078:	08001107 	.word	0x08001107
 800107c:	08001107 	.word	0x08001107
 8001080:	08001107 	.word	0x08001107
 8001084:	08001107 	.word	0x08001107
 8001088:	08001107 	.word	0x08001107
 800108c:	08001107 	.word	0x08001107
 8001090:	08001107 	.word	0x08001107
 8001094:	08001107 	.word	0x08001107
 8001098:	08001107 	.word	0x08001107
 800109c:	080010b5 	.word	0x080010b5
 80010a0:	080010c9 	.word	0x080010c9
 80010a4:	4a79      	ldr	r2, [pc, #484]	; (800128c <HAL_GPIO_Init+0x2b4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010aa:	e02c      	b.n	8001106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e029      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	3304      	adds	r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e024      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	3308      	adds	r3, #8
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e01f      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	330c      	adds	r3, #12
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e01a      	b.n	8001108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010da:	2304      	movs	r3, #4
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e013      	b.n	8001108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e8:	2308      	movs	r3, #8
 80010ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	611a      	str	r2, [r3, #16]
          break;
 80010f2:	e009      	b.n	8001108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f4:	2308      	movs	r3, #8
 80010f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	615a      	str	r2, [r3, #20]
          break;
 80010fe:	e003      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x130>
          break;
 8001106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d801      	bhi.n	8001112 <HAL_GPIO_Init+0x13a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_Init+0x13e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d802      	bhi.n	8001124 <HAL_GPIO_Init+0x14c>
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x152>
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3b08      	subs	r3, #8
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	210f      	movs	r1, #15
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	401a      	ands	r2, r3
 800113c:	6a39      	ldr	r1, [r7, #32]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80b1 	beq.w	80012ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001158:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <HAL_GPIO_Init+0x2b8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a40      	ldr	r2, [pc, #256]	; (8001298 <HAL_GPIO_Init+0x2c0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1ec>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a3f      	ldr	r2, [pc, #252]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1e8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3e      	ldr	r2, [pc, #248]	; (80012a0 <HAL_GPIO_Init+0x2c8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1e4>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <HAL_GPIO_Init+0x2cc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1e0>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011b8:	2304      	movs	r3, #4
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011c4:	2300      	movs	r3, #0
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011d6:	492f      	ldr	r1, [pc, #188]	; (8001294 <HAL_GPIO_Init+0x2bc>)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	492c      	ldr	r1, [pc, #176]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	43db      	mvns	r3, r3
 8001206:	4928      	ldr	r1, [pc, #160]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001208:	4013      	ands	r3, r2
 800120a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	4922      	ldr	r1, [pc, #136]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	60cb      	str	r3, [r1, #12]
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	43db      	mvns	r3, r3
 800122e:	491e      	ldr	r1, [pc, #120]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001230:	4013      	ands	r3, r2
 8001232:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4918      	ldr	r1, [pc, #96]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	4914      	ldr	r1, [pc, #80]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d021      	beq.n	80012ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	490e      	ldr	r1, [pc, #56]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e021      	b.n	80012ba <HAL_GPIO_Init+0x2e2>
 8001276:	bf00      	nop
 8001278:	10320000 	.word	0x10320000
 800127c:	10310000 	.word	0x10310000
 8001280:	10220000 	.word	0x10220000
 8001284:	10210000 	.word	0x10210000
 8001288:	10120000 	.word	0x10120000
 800128c:	10110000 	.word	0x10110000
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40011400 	.word	0x40011400
 80012a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_GPIO_Init+0x304>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4909      	ldr	r1, [pc, #36]	; (80012dc <HAL_GPIO_Init+0x304>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f47f ae8e 	bne.w	8000fec <HAL_GPIO_Init+0x14>
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	372c      	adds	r7, #44	; 0x2c
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	611a      	str	r2, [r3, #16]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4013      	ands	r3, r2
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43d9      	mvns	r1, r3
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	400b      	ands	r3, r1
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	611a      	str	r2, [r3, #16]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
	...

08001344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e12b      	b.n	80015ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fb46 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013a8:	f000 fce6 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a81      	ldr	r2, [pc, #516]	; (80015b8 <HAL_I2C_Init+0x274>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d807      	bhi.n	80013c8 <HAL_I2C_Init+0x84>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a80      	ldr	r2, [pc, #512]	; (80015bc <HAL_I2C_Init+0x278>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	e006      	b.n	80013d6 <HAL_I2C_Init+0x92>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a7d      	ldr	r2, [pc, #500]	; (80015c0 <HAL_I2C_Init+0x27c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	bf94      	ite	ls
 80013d0:	2301      	movls	r3, #1
 80013d2:	2300      	movhi	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0e7      	b.n	80015ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4a78      	ldr	r2, [pc, #480]	; (80015c4 <HAL_I2C_Init+0x280>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_I2C_Init+0x274>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d802      	bhi.n	8001418 <HAL_I2C_Init+0xd4>
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	e009      	b.n	800142c <HAL_I2C_Init+0xe8>
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	4a69      	ldr	r2, [pc, #420]	; (80015c8 <HAL_I2C_Init+0x284>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	3301      	adds	r3, #1
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	430b      	orrs	r3, r1
 8001432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800143e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	495c      	ldr	r1, [pc, #368]	; (80015b8 <HAL_I2C_Init+0x274>)
 8001448:	428b      	cmp	r3, r1
 800144a:	d819      	bhi.n	8001480 <HAL_I2C_Init+0x13c>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1e59      	subs	r1, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fbb1 f3f3 	udiv	r3, r1, r3
 800145a:	1c59      	adds	r1, r3, #1
 800145c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001460:	400b      	ands	r3, r1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00a      	beq.n	800147c <HAL_I2C_Init+0x138>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1e59      	subs	r1, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fbb1 f3f3 	udiv	r3, r1, r3
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147a:	e051      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 800147c:	2304      	movs	r3, #4
 800147e:	e04f      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_I2C_Init+0x168>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	e012      	b.n	80014d2 <HAL_I2C_Init+0x18e>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	0099      	lsls	r1, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Init+0x196>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e022      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <HAL_I2C_Init+0x1bc>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e58      	subs	r0, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f4:	3301      	adds	r3, #1
 80014f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fe:	e00f      	b.n	8001520 <HAL_I2C_Init+0x1dc>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	0099      	lsls	r1, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	fbb0 f3f3 	udiv	r3, r0, r3
 8001516:	3301      	adds	r3, #1
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	6809      	ldr	r1, [r1, #0]
 8001524:	4313      	orrs	r3, r2
 8001526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800154e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6911      	ldr	r1, [r2, #16]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68d2      	ldr	r2, [r2, #12]
 800155a:	4311      	orrs	r1, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	000186a0 	.word	0x000186a0
 80015bc:	001e847f 	.word	0x001e847f
 80015c0:	003d08ff 	.word	0x003d08ff
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	10624dd3 	.word	0x10624dd3

080015cc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	420e0020 	.word	0x420e0020

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e272      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d112      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
 800161c:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <HAL_RCC_OscConfig+0x12c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d168      	bne.n	8001710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e24c      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x76>
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7f      	ldr	r2, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a77      	ldr	r2, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xbc>
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a71      	ldr	r2, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb78 	bl	8000db4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb74 	bl	8000db4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e200      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe4>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb64 	bl	8000db4 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb60 	bl	8000db4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1ec      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x10c>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d063      	beq.n	80017e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1c0      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4939      	ldr	r1, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e03a      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fb19 	bl	8000db4 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff fb15 	bl	8000db4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1a1      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x270>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff faf8 	bl	8000db4 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff faf4 	bl	8000db4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e180      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03a      	beq.n	8001868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d019      	beq.n	800182e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff fad8 	bl	8000db4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fad4 	bl	8000db4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e160      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x26c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 face 	bl	8001dc8 <RCC_Delay>
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x274>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fabe 	bl	8000db4 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	e00f      	b.n	800185c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff faba 	bl	8000db4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d908      	bls.n	800185c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e146      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	42420000 	.word	0x42420000
 8001858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e9      	bne.n	800183c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a6 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b82      	ldr	r3, [pc, #520]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7e      	ldr	r2, [pc, #504]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fa7b 	bl	8000db4 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fa77 	bl	8000db4 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e103      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b75      	ldr	r3, [pc, #468]	; (8001aac <HAL_RCC_OscConfig+0x4c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x312>
 80018e8:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x334>
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	e01c      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x356>
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a60      	ldr	r2, [pc, #384]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a5d      	ldr	r2, [pc, #372]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x36e>
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fa2b 	bl	8000db4 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fa27 	bl	8000db4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0b1      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RCC_OscConfig+0x37e>
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fa15 	bl	8000db4 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fa11 	bl	8000db4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e09b      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ee      	bne.n	800198e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d061      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d146      	bne.n	8001a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff f9e5 	bl	8000db4 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f9e1 	bl	8000db4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e06d      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4921      	ldr	r1, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a19      	ldr	r1, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff f9b5 	bl	8000db4 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f9b1 	bl	8000db4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e03d      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46a>
 8001a6c:	e035      	b.n	8001ada <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f99e 	bl	8000db4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f99a 	bl	8000db4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e026      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x498>
 8001a9a:	e01e      	b.n	8001ada <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e019      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_OscConfig+0x500>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d0      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4965      	ldr	r1, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d040      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e073      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06b      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4936      	ldr	r1, [pc, #216]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f8ec 	bl	8000db4 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f8e8 	bl	8000db4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e053      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d210      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	4922      	ldr	r1, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f84a 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08004600 	.word	0x08004600
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x30>
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cea:	e027      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	e027      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0c5b      	lsrs	r3, r3, #17
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e004      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	613b      	str	r3, [r7, #16]
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3e:	613b      	str	r3, [r7, #16]
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	693b      	ldr	r3, [r7, #16]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	007a1200 	.word	0x007a1200
 8001d58:	08004618 	.word	0x08004618
 8001d5c:	08004628 	.word	0x08004628
 8001d60:	003d0900 	.word	0x003d0900

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004610 	.word	0x08004610

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08004610 	.word	0x08004610

08001dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <RCC_Delay+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <RCC_Delay+0x38>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a5b      	lsrs	r3, r3, #9
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de4:	bf00      	nop
  }
  while (Delay --);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f9      	bne.n	8001de4 <RCC_Delay+0x1c>
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d07d      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	61d3      	str	r3, [r2, #28]
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d118      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a42      	ldr	r2, [pc, #264]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e64:	f7fe ffa6 	bl	8000db4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	e008      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe ffa2 	bl	8000db4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e06d      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d02e      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d027      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d014      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe ff71 	bl	8000db4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe ff6d 	bl	8000db4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e036      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4917      	ldr	r1, [pc, #92]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42420440 	.word	0x42420440

08001f70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	f200 808a 	bhi.w	80020ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d045      	beq.n	800202c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d075      	beq.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001fa6:	e082      	b.n	80020ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fae:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07b      	beq.n	80020b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0c9b      	lsrs	r3, r3, #18
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	4a41      	ldr	r2, [pc, #260]	; (80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d015      	beq.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	0c5b      	lsrs	r3, r3, #17
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	e004      	b.n	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002014:	d102      	bne.n	800201c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	61bb      	str	r3, [r7, #24]
      break;
 800201a:	e04a      	b.n	80020b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
      break;
 800202a:	e042      	b.n	80020b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203c:	d108      	bne.n	8002050 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	e01f      	b.n	8002090 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205a:	d109      	bne.n	8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002068:	f649 4340 	movw	r3, #40000	; 0x9c40
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e00f      	b.n	8002090 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800207a:	d11c      	bne.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d016      	beq.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002088:	f24f 4324 	movw	r3, #62500	; 0xf424
 800208c:	61bb      	str	r3, [r7, #24]
      break;
 800208e:	e012      	b.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002090:	e011      	b.n	80020b6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002092:	f7ff fe85 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0b9b      	lsrs	r3, r3, #14
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	61bb      	str	r3, [r7, #24]
      break;
 80020ac:	e004      	b.n	80020b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80020ae:	bf00      	nop
 80020b0:	e002      	b.n	80020b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80020b6:	bf00      	nop
    }
  }
  return (frequency);
 80020b8:	69bb      	ldr	r3, [r7, #24]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800462c 	.word	0x0800462c
 80020cc:	0800463c 	.word	0x0800463c
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	003d0900 	.word	0x003d0900
 80020d8:	aaaaaaab 	.word	0xaaaaaaab

080020dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07a      	b.n	80021e8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7c5b      	ldrb	r3, [r3, #17]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fcba 	bl	8000a7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f870 	bl	80021f4 <HAL_RTC_WaitForSynchro>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2204      	movs	r2, #4
 800211e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e061      	b.n	80021e8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f892 	bl	800224e <RTC_EnterInitMode>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e056      	b.n	80021e8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0207 	bic.w	r2, r2, #7
 8002148:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RTC_Init+0x114>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_RTC_Init+0x114>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RTC_Init+0x114>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4921      	ldr	r1, [pc, #132]	; (80021f0 <HAL_RTC_Init+0x114>)
 800216c:	4313      	orrs	r3, r2
 800216e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d003      	beq.n	8002182 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e00e      	b.n	80021a0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff fef4 	bl	8001f70 <HAL_RCCEx_GetPeriphCLKFreq>
 8002188:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2204      	movs	r2, #4
 8002194:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e026      	b.n	80021e8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3b01      	subs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0c1a      	lsrs	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f002 020f 	and.w	r2, r2, #15
 80021ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	b292      	uxth	r2, r2
 80021b6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f870 	bl	800229e <RTC_ExitInitMode>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2204      	movs	r2, #4
 80021c8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00c      	b.n	80021e8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80021e6:	2300      	movs	r3, #0
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40006c00 	.word	0x40006c00

080021f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e01d      	b.n	8002246 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800221a:	f7fe fdcb 	bl	8000db4 <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002220:	e009      	b.n	8002236 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002222:	f7fe fdc7 	bl	8000db4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002230:	d901      	bls.n	8002236 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e007      	b.n	8002246 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800225a:	f7fe fdab 	bl	8000db4 <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002260:	e009      	b.n	8002276 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002262:	f7fe fda7 	bl	8000db4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002270:	d901      	bls.n	8002276 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e00f      	b.n	8002296 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0210 	orr.w	r2, r2, #16
 8002292:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0210 	bic.w	r2, r2, #16
 80022b8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80022ba:	f7fe fd7b 	bl	8000db4 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022c0:	e009      	b.n	80022d6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80022c2:	f7fe fd77 	bl	8000db4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d0:	d901      	bls.n	80022d6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e007      	b.n	80022e6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ee      	beq.n	80022c2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e076      	b.n	80023ee <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002310:	d009      	beq.n	8002326 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
 8002318:	e005      	b.n	8002326 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fbbf 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	ea42 0103 	orr.w	r1, r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	0c1a      	lsrs	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 0204 	and.w	r2, r2, #4
 80023cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b088      	sub	sp, #32
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_SPI_Transmit+0x22>
 8002414:	2302      	movs	r3, #2
 8002416:	e12d      	b.n	8002674 <HAL_SPI_Transmit+0x27e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002420:	f7fe fcc8 	bl	8000db4 <HAL_GetTick>
 8002424:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d002      	beq.n	800243c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	77fb      	strb	r3, [r7, #31]
    goto error;
 800243a:	e116      	b.n	800266a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_SPI_Transmit+0x52>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800244c:	e10d      	b.n	800266a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002494:	d10f      	bne.n	80024b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d007      	beq.n	80024d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024dc:	d14f      	bne.n	800257e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_Transmit+0xf6>
 80024e6:	8afb      	ldrh	r3, [r7, #22]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d142      	bne.n	8002572 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	1c9a      	adds	r2, r3, #2
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002510:	e02f      	b.n	8002572 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b02      	cmp	r3, #2
 800251e:	d112      	bne.n	8002546 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	1c9a      	adds	r2, r3, #2
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	86da      	strh	r2, [r3, #54]	; 0x36
 8002544:	e015      	b.n	8002572 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002546:	f7fe fc35 	bl	8000db4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d803      	bhi.n	800255e <HAL_SPI_Transmit+0x168>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d102      	bne.n	8002564 <HAL_SPI_Transmit+0x16e>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002570:	e07b      	b.n	800266a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ca      	bne.n	8002512 <HAL_SPI_Transmit+0x11c>
 800257c:	e050      	b.n	8002620 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_Transmit+0x196>
 8002586:	8afb      	ldrh	r3, [r7, #22]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d144      	bne.n	8002616 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025b2:	e030      	b.n	8002616 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d113      	bne.n	80025ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80025e8:	e015      	b.n	8002616 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ea:	f7fe fbe3 	bl	8000db4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d803      	bhi.n	8002602 <HAL_SPI_Transmit+0x20c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d102      	bne.n	8002608 <HAL_SPI_Transmit+0x212>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002614:	e029      	b.n	800266a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1c9      	bne.n	80025b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fbd9 	bl	8002ddc <SPI_EndRxTxTransaction>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	77fb      	strb	r3, [r7, #31]
 8002660:	e003      	b.n	800266a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002672:	7ffb      	ldrb	r3, [r7, #31]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d002      	beq.n	80026a2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800269c:	2302      	movs	r3, #2
 800269e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026a0:	e0fb      	b.n	800289a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d112      	bne.n	80026d2 <HAL_SPI_Receive+0x56>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10e      	bne.n	80026d2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2204      	movs	r2, #4
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f8ef 	bl	80028ac <HAL_SPI_TransmitReceive>
 80026ce:	4603      	mov	r3, r0
 80026d0:	e0e8      	b.n	80028a4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_SPI_Receive+0x64>
 80026dc:	2302      	movs	r3, #2
 80026de:	e0e1      	b.n	80028a4 <HAL_SPI_Receive+0x228>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026e8:	f7fe fb64 	bl	8000db4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_SPI_Receive+0x7e>
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026fe:	e0cc      	b.n	800289a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2204      	movs	r2, #4
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	88fa      	ldrh	r2, [r7, #6]
 8002718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002746:	d10f      	bne.n	8002768 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d007      	beq.n	8002786 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d16a      	bne.n	8002864 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800278e:	e032      	b.n	80027f6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d115      	bne.n	80027ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f103 020c 	add.w	r2, r3, #12
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c8:	e015      	b.n	80027f6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ca:	f7fe faf3 	bl	8000db4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d803      	bhi.n	80027e2 <HAL_SPI_Receive+0x166>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d102      	bne.n	80027e8 <HAL_SPI_Receive+0x16c>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027f4:	e051      	b.n	800289a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1c7      	bne.n	8002790 <HAL_SPI_Receive+0x114>
 8002800:	e035      	b.n	800286e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d113      	bne.n	8002838 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	b292      	uxth	r2, r2
 800281c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	1c9a      	adds	r2, r3, #2
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002836:	e015      	b.n	8002864 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002838:	f7fe fabc 	bl	8000db4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d803      	bhi.n	8002850 <HAL_SPI_Receive+0x1d4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d102      	bne.n	8002856 <HAL_SPI_Receive+0x1da>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002862:	e01a      	b.n	800289a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1c9      	bne.n	8002802 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fa60 	bl	8002d38 <SPI_EndRxTransaction>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
 8002890:	e003      	b.n	800289a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x26>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e198      	b.n	8002c04 <HAL_SPI_TransmitReceive+0x358>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028da:	f7fe fa6b 	bl	8000db4 <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d00f      	beq.n	800291c <HAL_SPI_TransmitReceive+0x70>
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002902:	d107      	bne.n	8002914 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_SPI_TransmitReceive+0x68>
 800290c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002910:	2b04      	cmp	r3, #4
 8002912:	d003      	beq.n	800291c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002914:	2302      	movs	r3, #2
 8002916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800291a:	e16d      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_SPI_TransmitReceive+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_SPI_TransmitReceive+0x82>
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002934:	e160      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2205      	movs	r2, #5
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	887a      	ldrh	r2, [r7, #2]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	887a      	ldrh	r2, [r7, #2]
 8002972:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d007      	beq.n	800299e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a6:	d17c      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x10a>
 80029b0:	8b7b      	ldrh	r3, [r7, #26]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d16a      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029da:	e057      	b.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d11b      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x176>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d016      	beq.n	8002a22 <HAL_SPI_TransmitReceive+0x176>
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d113      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	1c9a      	adds	r2, r3, #2
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d119      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x1b8>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	b292      	uxth	r2, r2
 8002a46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a60:	2301      	movs	r3, #1
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a64:	f7fe f9a6 	bl	8000db4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d80b      	bhi.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d007      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a8a:	e0b5      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1a2      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x130>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d19d      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x130>
 8002aa0:	e080      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x204>
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d16f      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad6:	e05b      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d11c      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x274>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x274>
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d114      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d119      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x2b6>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d014      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b62:	f7fe f927 	bl	8000db4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d803      	bhi.n	8002b7a <HAL_SPI_TransmitReceive+0x2ce>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d102      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x2d4>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b8e:	e033      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d19e      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x22c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d199      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f917 	bl	8002ddc <SPI_EndRxTxTransaction>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bc0:	e01a      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bee:	e003      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3730      	adds	r7, #48	; 0x30
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c1a:	b2db      	uxtb	r3, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
	...

08002c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c38:	f7fe f8bc 	bl	8000db4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c48:	f7fe f8b4 	bl	8000db4 <HAL_GetTick>
 8002c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	0d1b      	lsrs	r3, r3, #20
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5e:	e054      	b.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d050      	beq.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c68:	f7fe f8a4 	bl	8000db4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d902      	bls.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d13d      	bne.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c96:	d111      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca0:	d004      	beq.n	8002cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002caa:	d107      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc4:	d10f      	bne.n	8002ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e017      	b.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d19b      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4c:	d111      	bne.n	8002d72 <SPI_EndRxTransaction+0x3a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d004      	beq.n	8002d62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d107      	bne.n	8002d72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7a:	d117      	bne.n	8002dac <SPI_EndRxTransaction+0x74>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d84:	d112      	bne.n	8002dac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2101      	movs	r1, #1
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff ff49 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01a      	beq.n	8002dd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e013      	b.n	8002dd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff36 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff ff18 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e000      	b.n	8002e10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8002e18:	b4b0      	push	{r4, r5, r7}
 8002e1a:	b08f      	sub	sp, #60	; 0x3c
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8002e20:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8002e26:	2307      	movs	r3, #7
 8002e28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8002e38:	23ff      	movs	r3, #255	; 0xff
 8002e3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8002e3e:	2364      	movs	r3, #100	; 0x64
 8002e40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8002e44:	2308      	movs	r3, #8
 8002e46:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	f107 040c 	add.w	r4, r7, #12
 8002e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e58:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002e5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	373c      	adds	r7, #60	; 0x3c
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bcb0      	pop	{r4, r5, r7}
 8002e68:	4770      	bx	lr

08002e6a <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6898      	ldr	r0, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	899b      	ldrh	r3, [r3, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fe fa2f 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f7fd ffa0 	bl	8000dc8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6898      	ldr	r0, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	899b      	ldrh	r3, [r3, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fe fa24 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e98:	2064      	movs	r0, #100	; 0x64
 8002e9a:	f7fd ff95 	bl	8000dc8 <HAL_Delay>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f99e 	bl	80031f4 <LoRa_read>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73bb      	strb	r3, [r7, #14]
	data = read;
 8002ebc:	7bbb      	ldrb	r3, [r7, #14]
 8002ebe:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <LoRa_gotoMode+0x30>
		data = (read & 0xF0) | 0x00;
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	f023 030f 	bic.w	r3, r3, #15
 8002ecc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
 8002ed4:	e03e      	b.n	8002f54 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d10c      	bne.n	8002ef6 <LoRa_gotoMode+0x50>
		data = (read & 0xF0) | 0x01;
 8002edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ee0:	f023 030f 	bic.w	r3, r3, #15
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	b25b      	sxtb	r3, r3
 8002eec:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	61da      	str	r2, [r3, #28]
 8002ef4:	e02e      	b.n	8002f54 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d10c      	bne.n	8002f16 <LoRa_gotoMode+0x70>
		data = (read & 0xF0) | 0x03;
 8002efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f00:	f023 030f 	bic.w	r3, r3, #15
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	f043 0303 	orr.w	r3, r3, #3
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2203      	movs	r2, #3
 8002f12:	61da      	str	r2, [r3, #28]
 8002f14:	e01e      	b.n	8002f54 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <LoRa_gotoMode+0x90>
		data = (read & 0xF0) | 0x05;
 8002f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f20:	f023 030f 	bic.w	r3, r3, #15
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	f043 0305 	orr.w	r3, r3, #5
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2205      	movs	r2, #5
 8002f32:	61da      	str	r2, [r3, #28]
 8002f34:	e00e      	b.n	8002f54 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d10b      	bne.n	8002f54 <LoRa_gotoMode+0xae>
		data = (read & 0xF0) | 0x06;
 8002f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f40:	f023 030f 	bic.w	r3, r3, #15
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f043 0306 	orr.w	r3, r3, #6
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2206      	movs	r2, #6
 8002f52:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	461a      	mov	r2, r3
 8002f58:	2101      	movs	r1, #1
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f964 	bl	8003228 <LoRa_write>
	//HAL_Delay(10);
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	889b      	ldrh	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fe f9ac 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6998      	ldr	r0, [r3, #24]
 8002f8c:	88fa      	ldrh	r2, [r7, #6]
 8002f8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	f7ff fa2f 	bl	80023f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002f98:	bf00      	nop
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe34 	bl	8002c0c <HAL_SPI_GetState>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d1f7      	bne.n	8002f9a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6998      	ldr	r0, [r3, #24]
 8002fae:	8b3a      	ldrh	r2, [r7, #24]
 8002fb0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	f7ff fb61 	bl	800267c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002fba:	bf00      	nop
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fe23 	bl	8002c0c <HAL_SPI_GetState>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d1f7      	bne.n	8002fbc <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	889b      	ldrh	r3, [r3, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fe f982 	bl	80012e0 <HAL_GPIO_WritePin>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	889b      	ldrh	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fe f96e 	bl	80012e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6998      	ldr	r0, [r3, #24]
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	f7ff f9f1 	bl	80023f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003014:	bf00      	nop
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fdf6 	bl	8002c0c <HAL_SPI_GetState>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d1f7      	bne.n	8003016 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6998      	ldr	r0, [r3, #24]
 800302a:	8b3a      	ldrh	r2, [r7, #24]
 800302c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	f7ff f9e0 	bl	80023f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003036:	bf00      	nop
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fde5 	bl	8002c0c <HAL_SPI_GetState>
 8003042:	4603      	mov	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	d1f7      	bne.n	8003038 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	889b      	ldrh	r3, [r3, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	4619      	mov	r1, r3
 8003054:	f7fe f944 	bl	80012e0 <HAL_GPIO_WritePin>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	04db      	lsls	r3, r3, #19
 800306e:	115b      	asrs	r3, r3, #5
 8003070:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	461a      	mov	r2, r3
 800307c:	2106      	movs	r1, #6
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8d2 	bl	8003228 <LoRa_write>
	HAL_Delay(5);
 8003084:	2005      	movs	r0, #5
 8003086:	f7fd fe9f 	bl	8000dc8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8003090:	7afb      	ldrb	r3, [r7, #11]
 8003092:	461a      	mov	r2, r3
 8003094:	2107      	movs	r1, #7
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8c6 	bl	8003228 <LoRa_write>
	HAL_Delay(5);
 800309c:	2005      	movs	r0, #5
 800309e:	f7fd fe93 	bl	8000dc8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80030a6:	7afb      	ldrb	r3, [r7, #11]
 80030a8:	461a      	mov	r2, r3
 80030aa:	2108      	movs	r1, #8
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8bb 	bl	8003228 <LoRa_write>
	HAL_Delay(5);
 80030b2:	2005      	movs	r0, #5
 80030b4:	f7fd fe88 	bl	8000dc8 <HAL_Delay>
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	dd01      	ble.n	80030d4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80030d0:	230c      	movs	r3, #12
 80030d2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	dc01      	bgt.n	80030de <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80030da:	2307      	movs	r3, #7
 80030dc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80030de:	211e      	movs	r1, #30
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f887 	bl	80031f4 <LoRa_read>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80030ea:	200a      	movs	r0, #10
 80030ec:	f7fd fe6c 	bl	8000dc8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4413      	add	r3, r2
 8003102:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	461a      	mov	r2, r3
 8003108:	211e      	movs	r1, #30
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f88c 	bl	8003228 <LoRa_write>
	HAL_Delay(10);
 8003110:	200a      	movs	r0, #10
 8003112:	f7fd fe59 	bl	8000dc8 <HAL_Delay>
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	461a      	mov	r2, r3
 800312e:	2109      	movs	r1, #9
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f879 	bl	8003228 <LoRa_write>
	HAL_Delay(10);
 8003136:	200a      	movs	r0, #10
 8003138:	f7fd fe46 	bl	8000dc8 <HAL_Delay>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b2c      	cmp	r3, #44	; 0x2c
 8003158:	d801      	bhi.n	800315e <LoRa_setOCP+0x1a>
		current = 45;
 800315a:	232d      	movs	r3, #45	; 0x2d
 800315c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	2bf0      	cmp	r3, #240	; 0xf0
 8003162:	d901      	bls.n	8003168 <LoRa_setOCP+0x24>
		current = 240;
 8003164:	23f0      	movs	r3, #240	; 0xf0
 8003166:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2b78      	cmp	r3, #120	; 0x78
 800316c:	d809      	bhi.n	8003182 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	3b2d      	subs	r3, #45	; 0x2d
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <LoRa_setOCP+0x78>)
 8003174:	fb82 1203 	smull	r1, r2, r2, r3
 8003178:	1052      	asrs	r2, r2, #1
 800317a:	17db      	asrs	r3, r3, #31
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e00b      	b.n	800319a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	2bf0      	cmp	r3, #240	; 0xf0
 8003186:	d808      	bhi.n	800319a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	331e      	adds	r3, #30
 800318c:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <LoRa_setOCP+0x78>)
 800318e:	fb82 1203 	smull	r1, r2, r2, r3
 8003192:	1092      	asrs	r2, r2, #2
 8003194:	17db      	asrs	r3, r3, #31
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	3320      	adds	r3, #32
 800319e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	461a      	mov	r2, r3
 80031a4:	210b      	movs	r1, #11
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f83e 	bl	8003228 <LoRa_write>
	HAL_Delay(10);
 80031ac:	200a      	movs	r0, #10
 80031ae:	f7fd fe0b 	bl	8000dc8 <HAL_Delay>
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	66666667 	.word	0x66666667

080031c0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80031c8:	211e      	movs	r1, #30
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f812 	bl	80031f4 <LoRa_read>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	f043 0307 	orr.w	r3, r3, #7
 80031da:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, 0x70);
 80031dc:	2270      	movs	r2, #112	; 0x70
 80031de:	211e      	movs	r1, #30
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f821 	bl	8003228 <LoRa_write>
	HAL_Delay(10);
 80031e6:	200a      	movs	r0, #10
 80031e8:	f7fd fdee 	bl	8000dc8 <HAL_Delay>
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003206:	b2db      	uxtb	r3, r3
 8003208:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800320a:	f107 030f 	add.w	r3, r7, #15
 800320e:	f107 010e 	add.w	r1, r7, #14
 8003212:	2201      	movs	r2, #1
 8003214:	9200      	str	r2, [sp, #0]
 8003216:	2201      	movs	r2, #1
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fea5 	bl	8002f68 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
 8003234:	4613      	mov	r3, r2
 8003236:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800323e:	b2db      	uxtb	r3, r3
 8003240:	73bb      	strb	r3, [r7, #14]
	data = value;
 8003242:	78bb      	ldrb	r3, [r7, #2]
 8003244:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8003246:	f107 030f 	add.w	r3, r7, #15
 800324a:	f107 010e 	add.w	r1, r7, #14
 800324e:	2201      	movs	r2, #1
 8003250:	9200      	str	r2, [sp, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fec5 	bl	8002fe4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	461a      	mov	r2, r3
 800326e:	460b      	mov	r3, r1
 8003270:	72fb      	strb	r3, [r7, #11]
 8003272:	4613      	mov	r3, r2
 8003274:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800327c:	b2db      	uxtb	r3, r3
 800327e:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	889b      	ldrh	r3, [r3, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	4619      	mov	r1, r3
 800328c:	f7fe f828 	bl	80012e0 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6998      	ldr	r0, [r3, #24]
 8003294:	f107 0117 	add.w	r1, r7, #23
 8003298:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800329c:	2201      	movs	r2, #1
 800329e:	f7ff f8aa 	bl	80023f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80032a2:	bf00      	nop
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fcaf 	bl	8002c0c <HAL_SPI_GetState>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d1f7      	bne.n	80032a4 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6998      	ldr	r0, [r3, #24]
 80032b8:	7abb      	ldrb	r3, [r7, #10]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	f7ff f898 	bl	80023f6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80032c6:	bf00      	nop
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fc9d 	bl	8002c0c <HAL_SPI_GetState>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d1f7      	bne.n	80032c8 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	889b      	ldrh	r3, [r3, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4619      	mov	r1, r3
 80032e4:	f7fd fffc 	bl	80012e0 <HAL_GPIO_WritePin>
}
 80032e8:	bf00      	nop
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

	return 1;
 80032f8:	2301      	movs	r3, #1
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	460b      	mov	r3, r1
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	4613      	mov	r3, r2
 8003318:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8003320:	2101      	movs	r1, #1
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fdbf 	bl	8002ea6 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8003328:	210e      	movs	r1, #14
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ff62 	bl	80031f4 <LoRa_read>
 8003330:	4603      	mov	r3, r0
 8003332:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 8003334:	2200      	movs	r2, #0
 8003336:	210e      	movs	r1, #14
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff ff75 	bl	8003228 <LoRa_write>
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	461a      	mov	r2, r3
 8003342:	210d      	movs	r1, #13
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff6f 	bl	8003228 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	461a      	mov	r2, r3
 800334e:	2122      	movs	r1, #34	; 0x22
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff69 	bl	8003228 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	2100      	movs	r1, #0
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff ff80 	bl	8003262 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8003362:	2103      	movs	r1, #3
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7ff fd9e 	bl	8002ea6 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800336a:	2112      	movs	r1, #18
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7ff ff41 	bl	80031f4 <LoRa_read>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <LoRa_transmit+0x92>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	2112      	movs	r1, #18
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff ff4f 	bl	8003228 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800338a:	6979      	ldr	r1, [r7, #20]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fd8a 	bl	8002ea6 <LoRa_gotoMode>
			return 1;
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <LoRa_transmit+0xb2>
		}
		else{
			if(--timeout==0){
 8003396:	88bb      	ldrh	r3, [r7, #4]
 8003398:	3b01      	subs	r3, #1
 800339a:	80bb      	strh	r3, [r7, #4]
 800339c:	88bb      	ldrh	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <LoRa_transmit+0xaa>
				LoRa_gotoMode(_LoRa, mode);
 80033a2:	6979      	ldr	r1, [r7, #20]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fd7e 	bl	8002ea6 <LoRa_gotoMode>
				return 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e003      	b.n	80033b6 <LoRa_transmit+0xb2>
			}
		}
		HAL_Delay(1);
 80033ae:	2001      	movs	r0, #1
 80033b0:	f7fd fd0a 	bl	8000dc8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80033b4:	e7d9      	b.n	800336a <LoRa_transmit+0x66>
	}
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff92 	bl	80032f0 <LoRa_isvalid>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8098 	beq.w	8003504 <LoRa_init+0x146>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80033d4:	2100      	movs	r1, #0
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fd65 	bl	8002ea6 <LoRa_gotoMode>
			HAL_Delay(10);
 80033dc:	200a      	movs	r0, #10
 80033de:	f7fd fcf3 	bl	8000dc8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80033e2:	2101      	movs	r1, #1
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff05 	bl	80031f4 <LoRa_read>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80033ee:	200a      	movs	r0, #10
 80033f0:	f7fd fcea 	bl	8000dc8 <HAL_Delay>
			data = read | 0x80;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033fa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80033fc:	7bbb      	ldrb	r3, [r7, #14]
 80033fe:	461a      	mov	r2, r3
 8003400:	2101      	movs	r1, #1
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff10 	bl	8003228 <LoRa_write>
			HAL_Delay(100);
 8003408:	2064      	movs	r0, #100	; 0x64
 800340a:	f7fd fcdd 	bl	8000dc8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fe23 	bl	8003060 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fe7b 	bl	800311e <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800342e:	4619      	mov	r1, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fe87 	bl	8003144 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8003436:	2223      	movs	r2, #35	; 0x23
 8003438:	210c      	movs	r1, #12
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fef4 	bl	8003228 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff febd 	bl	80031c0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe36 	bl	80030c0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8003454:	22ff      	movs	r2, #255	; 0xff
 8003456:	211f      	movs	r1, #31
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fee5 	bl	8003228 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	4413      	add	r3, r2
 8003478:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	461a      	mov	r2, r3
 800347e:	211d      	movs	r1, #29
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fed1 	bl	8003228 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	b29b      	uxth	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	2120      	movs	r1, #32
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fec7 	bl	8003228 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	2121      	movs	r1, #33	; 0x21
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff febf 	bl	8003228 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80034aa:	2140      	movs	r1, #64	; 0x40
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fea1 	bl	80031f4 <LoRa_read>
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80034bc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80034be:	7bbb      	ldrb	r3, [r7, #14]
 80034c0:	461a      	mov	r2, r3
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff feaf 	bl	8003228 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80034ca:	2101      	movs	r1, #1
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fcea 	bl	8002ea6 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80034d8:	200a      	movs	r0, #10
 80034da:	f7fd fc75 	bl	8000dc8 <HAL_Delay>

			//init register
			LoRa_write(_LoRa, RegFiFoTxBaseAddr, 0x00);//
 80034de:	2200      	movs	r2, #0
 80034e0:	210e      	movs	r1, #14
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fea0 	bl	8003228 <LoRa_write>
			read = LoRa_read(_LoRa, RegVersion);
 80034e8:	2142      	movs	r1, #66	; 0x42
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff fe82 	bl	80031f4 <LoRa_read>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b12      	cmp	r3, #18
 80034f8:	d101      	bne.n	80034fe <LoRa_init+0x140>
				return LORA_OK;
 80034fa:	23c8      	movs	r3, #200	; 0xc8
 80034fc:	e004      	b.n	8003508 <LoRa_init+0x14a>
			else
				return LORA_NOT_FOUND;
 80034fe:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003502:	e001      	b.n	8003508 <LoRa_init+0x14a>
	}
	else {
		return LORA_UNAVAILABLE;
 8003504:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <std>:
 8003510:	2300      	movs	r3, #0
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
 8003516:	e9c0 3300 	strd	r3, r3, [r0]
 800351a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800351e:	6083      	str	r3, [r0, #8]
 8003520:	8181      	strh	r1, [r0, #12]
 8003522:	6643      	str	r3, [r0, #100]	; 0x64
 8003524:	81c2      	strh	r2, [r0, #14]
 8003526:	6183      	str	r3, [r0, #24]
 8003528:	4619      	mov	r1, r3
 800352a:	2208      	movs	r2, #8
 800352c:	305c      	adds	r0, #92	; 0x5c
 800352e:	f000 f9e5 	bl	80038fc <memset>
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <std+0x38>)
 8003534:	6224      	str	r4, [r4, #32]
 8003536:	6263      	str	r3, [r4, #36]	; 0x24
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <std+0x3c>)
 800353a:	62a3      	str	r3, [r4, #40]	; 0x28
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <std+0x40>)
 800353e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <std+0x44>)
 8003542:	6323      	str	r3, [r4, #48]	; 0x30
 8003544:	bd10      	pop	{r4, pc}
 8003546:	bf00      	nop
 8003548:	0800374d 	.word	0x0800374d
 800354c:	0800376f 	.word	0x0800376f
 8003550:	080037a7 	.word	0x080037a7
 8003554:	080037cb 	.word	0x080037cb

08003558 <stdio_exit_handler>:
 8003558:	4a02      	ldr	r2, [pc, #8]	; (8003564 <stdio_exit_handler+0xc>)
 800355a:	4903      	ldr	r1, [pc, #12]	; (8003568 <stdio_exit_handler+0x10>)
 800355c:	4803      	ldr	r0, [pc, #12]	; (800356c <stdio_exit_handler+0x14>)
 800355e:	f000 b869 	b.w	8003634 <_fwalk_sglue>
 8003562:	bf00      	nop
 8003564:	2000000c 	.word	0x2000000c
 8003568:	08004289 	.word	0x08004289
 800356c:	20000018 	.word	0x20000018

08003570 <cleanup_stdio>:
 8003570:	6841      	ldr	r1, [r0, #4]
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <cleanup_stdio+0x34>)
 8003574:	b510      	push	{r4, lr}
 8003576:	4299      	cmp	r1, r3
 8003578:	4604      	mov	r4, r0
 800357a:	d001      	beq.n	8003580 <cleanup_stdio+0x10>
 800357c:	f000 fe84 	bl	8004288 <_fflush_r>
 8003580:	68a1      	ldr	r1, [r4, #8]
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <cleanup_stdio+0x38>)
 8003584:	4299      	cmp	r1, r3
 8003586:	d002      	beq.n	800358e <cleanup_stdio+0x1e>
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fe7d 	bl	8004288 <_fflush_r>
 800358e:	68e1      	ldr	r1, [r4, #12]
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <cleanup_stdio+0x3c>)
 8003592:	4299      	cmp	r1, r3
 8003594:	d004      	beq.n	80035a0 <cleanup_stdio+0x30>
 8003596:	4620      	mov	r0, r4
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f000 be74 	b.w	8004288 <_fflush_r>
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	bf00      	nop
 80035a4:	200001f8 	.word	0x200001f8
 80035a8:	20000260 	.word	0x20000260
 80035ac:	200002c8 	.word	0x200002c8

080035b0 <global_stdio_init.part.0>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <global_stdio_init.part.0+0x30>)
 80035b4:	4c0b      	ldr	r4, [pc, #44]	; (80035e4 <global_stdio_init.part.0+0x34>)
 80035b6:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <global_stdio_init.part.0+0x38>)
 80035b8:	4620      	mov	r0, r4
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	2104      	movs	r1, #4
 80035be:	2200      	movs	r2, #0
 80035c0:	f7ff ffa6 	bl	8003510 <std>
 80035c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80035c8:	2201      	movs	r2, #1
 80035ca:	2109      	movs	r1, #9
 80035cc:	f7ff ffa0 	bl	8003510 <std>
 80035d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80035d4:	2202      	movs	r2, #2
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035da:	2112      	movs	r1, #18
 80035dc:	f7ff bf98 	b.w	8003510 <std>
 80035e0:	20000330 	.word	0x20000330
 80035e4:	200001f8 	.word	0x200001f8
 80035e8:	08003559 	.word	0x08003559

080035ec <__sfp_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__sfp_lock_acquire+0x8>)
 80035ee:	f000 b9fd 	b.w	80039ec <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	20000339 	.word	0x20000339

080035f8 <__sfp_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__sfp_lock_release+0x8>)
 80035fa:	f000 b9f8 	b.w	80039ee <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	20000339 	.word	0x20000339

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sfp_lock_acquire>
 800360c:	6a23      	ldr	r3, [r4, #32]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sfp_lock_release>
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <__sinit+0x28>)
 800361a:	6223      	str	r3, [r4, #32]
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__sinit+0x2c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f5      	bne.n	8003610 <__sinit+0xc>
 8003624:	f7ff ffc4 	bl	80035b0 <global_stdio_init.part.0>
 8003628:	e7f2      	b.n	8003610 <__sinit+0xc>
 800362a:	bf00      	nop
 800362c:	08003571 	.word	0x08003571
 8003630:	20000330 	.word	0x20000330

08003634 <_fwalk_sglue>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	4607      	mov	r7, r0
 800363a:	4688      	mov	r8, r1
 800363c:	4614      	mov	r4, r2
 800363e:	2600      	movs	r6, #0
 8003640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003644:	f1b9 0901 	subs.w	r9, r9, #1
 8003648:	d505      	bpl.n	8003656 <_fwalk_sglue+0x22>
 800364a:	6824      	ldr	r4, [r4, #0]
 800364c:	2c00      	cmp	r4, #0
 800364e:	d1f7      	bne.n	8003640 <_fwalk_sglue+0xc>
 8003650:	4630      	mov	r0, r6
 8003652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d907      	bls.n	800366c <_fwalk_sglue+0x38>
 800365c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003660:	3301      	adds	r3, #1
 8003662:	d003      	beq.n	800366c <_fwalk_sglue+0x38>
 8003664:	4629      	mov	r1, r5
 8003666:	4638      	mov	r0, r7
 8003668:	47c0      	blx	r8
 800366a:	4306      	orrs	r6, r0
 800366c:	3568      	adds	r5, #104	; 0x68
 800366e:	e7e9      	b.n	8003644 <_fwalk_sglue+0x10>

08003670 <iprintf>:
 8003670:	b40f      	push	{r0, r1, r2, r3}
 8003672:	b507      	push	{r0, r1, r2, lr}
 8003674:	4906      	ldr	r1, [pc, #24]	; (8003690 <iprintf+0x20>)
 8003676:	ab04      	add	r3, sp, #16
 8003678:	6808      	ldr	r0, [r1, #0]
 800367a:	f853 2b04 	ldr.w	r2, [r3], #4
 800367e:	6881      	ldr	r1, [r0, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	f000 fad1 	bl	8003c28 <_vfiprintf_r>
 8003686:	b003      	add	sp, #12
 8003688:	f85d eb04 	ldr.w	lr, [sp], #4
 800368c:	b004      	add	sp, #16
 800368e:	4770      	bx	lr
 8003690:	20000064 	.word	0x20000064

08003694 <_puts_r>:
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	4605      	mov	r5, r0
 800369a:	460e      	mov	r6, r1
 800369c:	6884      	ldr	r4, [r0, #8]
 800369e:	b90b      	cbnz	r3, 80036a4 <_puts_r+0x10>
 80036a0:	f7ff ffb0 	bl	8003604 <__sinit>
 80036a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_puts_r+0x22>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	0598      	lsls	r0, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_puts_r+0x22>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f000 f99b 	bl	80039ec <__retarget_lock_acquire_recursive>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	0719      	lsls	r1, r3, #28
 80036ba:	d513      	bpl.n	80036e4 <_puts_r+0x50>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	b18b      	cbz	r3, 80036e4 <_puts_r+0x50>
 80036c0:	3e01      	subs	r6, #1
 80036c2:	68a3      	ldr	r3, [r4, #8]
 80036c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60a3      	str	r3, [r4, #8]
 80036cc:	b9e9      	cbnz	r1, 800370a <_puts_r+0x76>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da2e      	bge.n	8003730 <_puts_r+0x9c>
 80036d2:	4622      	mov	r2, r4
 80036d4:	210a      	movs	r1, #10
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 f87b 	bl	80037d2 <__swbuf_r>
 80036dc:	3001      	adds	r0, #1
 80036de:	d007      	beq.n	80036f0 <_puts_r+0x5c>
 80036e0:	250a      	movs	r5, #10
 80036e2:	e007      	b.n	80036f4 <_puts_r+0x60>
 80036e4:	4621      	mov	r1, r4
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 f8b0 	bl	800384c <__swsetup_r>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d0e7      	beq.n	80036c0 <_puts_r+0x2c>
 80036f0:	f04f 35ff 	mov.w	r5, #4294967295
 80036f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f6:	07da      	lsls	r2, r3, #31
 80036f8:	d405      	bmi.n	8003706 <_puts_r+0x72>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d402      	bmi.n	8003706 <_puts_r+0x72>
 8003700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003702:	f000 f974 	bl	80039ee <__retarget_lock_release_recursive>
 8003706:	4628      	mov	r0, r5
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2b00      	cmp	r3, #0
 800370c:	da04      	bge.n	8003718 <_puts_r+0x84>
 800370e:	69a2      	ldr	r2, [r4, #24]
 8003710:	429a      	cmp	r2, r3
 8003712:	dc06      	bgt.n	8003722 <_puts_r+0x8e>
 8003714:	290a      	cmp	r1, #10
 8003716:	d004      	beq.n	8003722 <_puts_r+0x8e>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	7019      	strb	r1, [r3, #0]
 8003720:	e7cf      	b.n	80036c2 <_puts_r+0x2e>
 8003722:	4622      	mov	r2, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f000 f854 	bl	80037d2 <__swbuf_r>
 800372a:	3001      	adds	r0, #1
 800372c:	d1c9      	bne.n	80036c2 <_puts_r+0x2e>
 800372e:	e7df      	b.n	80036f0 <_puts_r+0x5c>
 8003730:	250a      	movs	r5, #10
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	6022      	str	r2, [r4, #0]
 8003738:	701d      	strb	r5, [r3, #0]
 800373a:	e7db      	b.n	80036f4 <_puts_r+0x60>

0800373c <puts>:
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <puts+0xc>)
 800373e:	4601      	mov	r1, r0
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	f7ff bfa7 	b.w	8003694 <_puts_r>
 8003746:	bf00      	nop
 8003748:	20000064 	.word	0x20000064

0800374c <__sread>:
 800374c:	b510      	push	{r4, lr}
 800374e:	460c      	mov	r4, r1
 8003750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003754:	f000 f8fc 	bl	8003950 <_read_r>
 8003758:	2800      	cmp	r0, #0
 800375a:	bfab      	itete	ge
 800375c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800375e:	89a3      	ldrhlt	r3, [r4, #12]
 8003760:	181b      	addge	r3, r3, r0
 8003762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003766:	bfac      	ite	ge
 8003768:	6563      	strge	r3, [r4, #84]	; 0x54
 800376a:	81a3      	strhlt	r3, [r4, #12]
 800376c:	bd10      	pop	{r4, pc}

0800376e <__swrite>:
 800376e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003772:	461f      	mov	r7, r3
 8003774:	898b      	ldrh	r3, [r1, #12]
 8003776:	4605      	mov	r5, r0
 8003778:	05db      	lsls	r3, r3, #23
 800377a:	460c      	mov	r4, r1
 800377c:	4616      	mov	r6, r2
 800377e:	d505      	bpl.n	800378c <__swrite+0x1e>
 8003780:	2302      	movs	r3, #2
 8003782:	2200      	movs	r2, #0
 8003784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003788:	f000 f8d0 	bl	800392c <_lseek_r>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	4632      	mov	r2, r6
 8003790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	4628      	mov	r0, r5
 8003798:	463b      	mov	r3, r7
 800379a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800379e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037a2:	f000 b8e7 	b.w	8003974 <_write_r>

080037a6 <__sseek>:
 80037a6:	b510      	push	{r4, lr}
 80037a8:	460c      	mov	r4, r1
 80037aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ae:	f000 f8bd 	bl	800392c <_lseek_r>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	bf15      	itete	ne
 80037b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80037ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037c2:	81a3      	strheq	r3, [r4, #12]
 80037c4:	bf18      	it	ne
 80037c6:	81a3      	strhne	r3, [r4, #12]
 80037c8:	bd10      	pop	{r4, pc}

080037ca <__sclose>:
 80037ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ce:	f000 b89d 	b.w	800390c <_close_r>

080037d2 <__swbuf_r>:
 80037d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d4:	460e      	mov	r6, r1
 80037d6:	4614      	mov	r4, r2
 80037d8:	4605      	mov	r5, r0
 80037da:	b118      	cbz	r0, 80037e4 <__swbuf_r+0x12>
 80037dc:	6a03      	ldr	r3, [r0, #32]
 80037de:	b90b      	cbnz	r3, 80037e4 <__swbuf_r+0x12>
 80037e0:	f7ff ff10 	bl	8003604 <__sinit>
 80037e4:	69a3      	ldr	r3, [r4, #24]
 80037e6:	60a3      	str	r3, [r4, #8]
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	071a      	lsls	r2, r3, #28
 80037ec:	d525      	bpl.n	800383a <__swbuf_r+0x68>
 80037ee:	6923      	ldr	r3, [r4, #16]
 80037f0:	b31b      	cbz	r3, 800383a <__swbuf_r+0x68>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	6922      	ldr	r2, [r4, #16]
 80037f6:	b2f6      	uxtb	r6, r6
 80037f8:	1a98      	subs	r0, r3, r2
 80037fa:	6963      	ldr	r3, [r4, #20]
 80037fc:	4637      	mov	r7, r6
 80037fe:	4283      	cmp	r3, r0
 8003800:	dc04      	bgt.n	800380c <__swbuf_r+0x3a>
 8003802:	4621      	mov	r1, r4
 8003804:	4628      	mov	r0, r5
 8003806:	f000 fd3f 	bl	8004288 <_fflush_r>
 800380a:	b9e0      	cbnz	r0, 8003846 <__swbuf_r+0x74>
 800380c:	68a3      	ldr	r3, [r4, #8]
 800380e:	3b01      	subs	r3, #1
 8003810:	60a3      	str	r3, [r4, #8]
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	6022      	str	r2, [r4, #0]
 8003818:	701e      	strb	r6, [r3, #0]
 800381a:	6962      	ldr	r2, [r4, #20]
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	429a      	cmp	r2, r3
 8003820:	d004      	beq.n	800382c <__swbuf_r+0x5a>
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	07db      	lsls	r3, r3, #31
 8003826:	d506      	bpl.n	8003836 <__swbuf_r+0x64>
 8003828:	2e0a      	cmp	r6, #10
 800382a:	d104      	bne.n	8003836 <__swbuf_r+0x64>
 800382c:	4621      	mov	r1, r4
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fd2a 	bl	8004288 <_fflush_r>
 8003834:	b938      	cbnz	r0, 8003846 <__swbuf_r+0x74>
 8003836:	4638      	mov	r0, r7
 8003838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383a:	4621      	mov	r1, r4
 800383c:	4628      	mov	r0, r5
 800383e:	f000 f805 	bl	800384c <__swsetup_r>
 8003842:	2800      	cmp	r0, #0
 8003844:	d0d5      	beq.n	80037f2 <__swbuf_r+0x20>
 8003846:	f04f 37ff 	mov.w	r7, #4294967295
 800384a:	e7f4      	b.n	8003836 <__swbuf_r+0x64>

0800384c <__swsetup_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <__swsetup_r+0xac>)
 8003850:	4605      	mov	r5, r0
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	460c      	mov	r4, r1
 8003856:	b118      	cbz	r0, 8003860 <__swsetup_r+0x14>
 8003858:	6a03      	ldr	r3, [r0, #32]
 800385a:	b90b      	cbnz	r3, 8003860 <__swsetup_r+0x14>
 800385c:	f7ff fed2 	bl	8003604 <__sinit>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003866:	0718      	lsls	r0, r3, #28
 8003868:	d422      	bmi.n	80038b0 <__swsetup_r+0x64>
 800386a:	06d9      	lsls	r1, r3, #27
 800386c:	d407      	bmi.n	800387e <__swsetup_r+0x32>
 800386e:	2309      	movs	r3, #9
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	e034      	b.n	80038e8 <__swsetup_r+0x9c>
 800387e:	0758      	lsls	r0, r3, #29
 8003880:	d512      	bpl.n	80038a8 <__swsetup_r+0x5c>
 8003882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003884:	b141      	cbz	r1, 8003898 <__swsetup_r+0x4c>
 8003886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800388a:	4299      	cmp	r1, r3
 800388c:	d002      	beq.n	8003894 <__swsetup_r+0x48>
 800388e:	4628      	mov	r0, r5
 8003890:	f000 f8ae 	bl	80039f0 <_free_r>
 8003894:	2300      	movs	r3, #0
 8003896:	6363      	str	r3, [r4, #52]	; 0x34
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	2300      	movs	r3, #0
 80038a2:	6063      	str	r3, [r4, #4]
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	f043 0308 	orr.w	r3, r3, #8
 80038ae:	81a3      	strh	r3, [r4, #12]
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	b94b      	cbnz	r3, 80038c8 <__swsetup_r+0x7c>
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038be:	d003      	beq.n	80038c8 <__swsetup_r+0x7c>
 80038c0:	4621      	mov	r1, r4
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 fd2d 	bl	8004322 <__smakebuf_r>
 80038c8:	89a0      	ldrh	r0, [r4, #12]
 80038ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038ce:	f010 0301 	ands.w	r3, r0, #1
 80038d2:	d00a      	beq.n	80038ea <__swsetup_r+0x9e>
 80038d4:	2300      	movs	r3, #0
 80038d6:	60a3      	str	r3, [r4, #8]
 80038d8:	6963      	ldr	r3, [r4, #20]
 80038da:	425b      	negs	r3, r3
 80038dc:	61a3      	str	r3, [r4, #24]
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	b943      	cbnz	r3, 80038f4 <__swsetup_r+0xa8>
 80038e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038e6:	d1c4      	bne.n	8003872 <__swsetup_r+0x26>
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
 80038ea:	0781      	lsls	r1, r0, #30
 80038ec:	bf58      	it	pl
 80038ee:	6963      	ldrpl	r3, [r4, #20]
 80038f0:	60a3      	str	r3, [r4, #8]
 80038f2:	e7f4      	b.n	80038de <__swsetup_r+0x92>
 80038f4:	2000      	movs	r0, #0
 80038f6:	e7f7      	b.n	80038e8 <__swsetup_r+0x9c>
 80038f8:	20000064 	.word	0x20000064

080038fc <memset>:
 80038fc:	4603      	mov	r3, r0
 80038fe:	4402      	add	r2, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	f803 1b01 	strb.w	r1, [r3], #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <_close_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	2300      	movs	r3, #0
 8003910:	4d05      	ldr	r5, [pc, #20]	; (8003928 <_close_r+0x1c>)
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fd f962 	bl	8000be0 <_close>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_close_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_close_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	20000334 	.word	0x20000334

0800392c <_lseek_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	2200      	movs	r2, #0
 8003936:	4d05      	ldr	r5, [pc, #20]	; (800394c <_lseek_r+0x20>)
 8003938:	602a      	str	r2, [r5, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f7fd f974 	bl	8000c28 <_lseek>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_lseek_r+0x1e>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_lseek_r+0x1e>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	20000334 	.word	0x20000334

08003950 <_read_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	2200      	movs	r2, #0
 800395a:	4d05      	ldr	r5, [pc, #20]	; (8003970 <_read_r+0x20>)
 800395c:	602a      	str	r2, [r5, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7fd f921 	bl	8000ba6 <_read>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_read_r+0x1e>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_read_r+0x1e>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	20000334 	.word	0x20000334

08003974 <_write_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	2200      	movs	r2, #0
 800397e:	4d05      	ldr	r5, [pc, #20]	; (8003994 <_write_r+0x20>)
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fc fc08 	bl	8000198 <_write>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_write_r+0x1e>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_write_r+0x1e>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	20000334 	.word	0x20000334

08003998 <__errno>:
 8003998:	4b01      	ldr	r3, [pc, #4]	; (80039a0 <__errno+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000064 	.word	0x20000064

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	2600      	movs	r6, #0
 80039a8:	4d0c      	ldr	r5, [pc, #48]	; (80039dc <__libc_init_array+0x38>)
 80039aa:	4c0d      	ldr	r4, [pc, #52]	; (80039e0 <__libc_init_array+0x3c>)
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	f000 fd32 	bl	800441c <_init>
 80039b8:	2600      	movs	r6, #0
 80039ba:	4d0a      	ldr	r5, [pc, #40]	; (80039e4 <__libc_init_array+0x40>)
 80039bc:	4c0a      	ldr	r4, [pc, #40]	; (80039e8 <__libc_init_array+0x44>)
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	10a4      	asrs	r4, r4, #2
 80039c2:	42a6      	cmp	r6, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039cc:	4798      	blx	r3
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d6:	4798      	blx	r3
 80039d8:	3601      	adds	r6, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	08004674 	.word	0x08004674
 80039e0:	08004674 	.word	0x08004674
 80039e4:	08004674 	.word	0x08004674
 80039e8:	08004678 	.word	0x08004678

080039ec <__retarget_lock_acquire_recursive>:
 80039ec:	4770      	bx	lr

080039ee <__retarget_lock_release_recursive>:
 80039ee:	4770      	bx	lr

080039f0 <_free_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4605      	mov	r5, r0
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d040      	beq.n	8003a7a <_free_r+0x8a>
 80039f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039fc:	1f0c      	subs	r4, r1, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bfb8      	it	lt
 8003a02:	18e4      	addlt	r4, r4, r3
 8003a04:	f000 f8dc 	bl	8003bc0 <__malloc_lock>
 8003a08:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <_free_r+0x8c>)
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	b933      	cbnz	r3, 8003a1c <_free_r+0x2c>
 8003a0e:	6063      	str	r3, [r4, #4]
 8003a10:	6014      	str	r4, [r2, #0]
 8003a12:	4628      	mov	r0, r5
 8003a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a18:	f000 b8d8 	b.w	8003bcc <__malloc_unlock>
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	d908      	bls.n	8003a32 <_free_r+0x42>
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	1821      	adds	r1, r4, r0
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf01      	itttt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	1809      	addeq	r1, r1, r0
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	e7ed      	b.n	8003a0e <_free_r+0x1e>
 8003a32:	461a      	mov	r2, r3
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	b10b      	cbz	r3, 8003a3c <_free_r+0x4c>
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d9fa      	bls.n	8003a32 <_free_r+0x42>
 8003a3c:	6811      	ldr	r1, [r2, #0]
 8003a3e:	1850      	adds	r0, r2, r1
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d10b      	bne.n	8003a5c <_free_r+0x6c>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	4401      	add	r1, r0
 8003a48:	1850      	adds	r0, r2, r1
 8003a4a:	4283      	cmp	r3, r0
 8003a4c:	6011      	str	r1, [r2, #0]
 8003a4e:	d1e0      	bne.n	8003a12 <_free_r+0x22>
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4408      	add	r0, r1
 8003a56:	6010      	str	r0, [r2, #0]
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	e7da      	b.n	8003a12 <_free_r+0x22>
 8003a5c:	d902      	bls.n	8003a64 <_free_r+0x74>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	e7d6      	b.n	8003a12 <_free_r+0x22>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	1821      	adds	r1, r4, r0
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	bf01      	itttt	eq
 8003a6c:	6819      	ldreq	r1, [r3, #0]
 8003a6e:	685b      	ldreq	r3, [r3, #4]
 8003a70:	1809      	addeq	r1, r1, r0
 8003a72:	6021      	streq	r1, [r4, #0]
 8003a74:	6063      	str	r3, [r4, #4]
 8003a76:	6054      	str	r4, [r2, #4]
 8003a78:	e7cb      	b.n	8003a12 <_free_r+0x22>
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	2000033c 	.word	0x2000033c

08003a80 <sbrk_aligned>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4e0e      	ldr	r6, [pc, #56]	; (8003abc <sbrk_aligned+0x3c>)
 8003a84:	460c      	mov	r4, r1
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	4605      	mov	r5, r0
 8003a8a:	b911      	cbnz	r1, 8003a92 <sbrk_aligned+0x12>
 8003a8c:	f000 fca8 	bl	80043e0 <_sbrk_r>
 8003a90:	6030      	str	r0, [r6, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fca3 	bl	80043e0 <_sbrk_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d00a      	beq.n	8003ab4 <sbrk_aligned+0x34>
 8003a9e:	1cc4      	adds	r4, r0, #3
 8003aa0:	f024 0403 	bic.w	r4, r4, #3
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d007      	beq.n	8003ab8 <sbrk_aligned+0x38>
 8003aa8:	1a21      	subs	r1, r4, r0
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fc98 	bl	80043e0 <_sbrk_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d101      	bne.n	8003ab8 <sbrk_aligned+0x38>
 8003ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	20000340 	.word	0x20000340

08003ac0 <_malloc_r>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	1ccd      	adds	r5, r1, #3
 8003ac6:	f025 0503 	bic.w	r5, r5, #3
 8003aca:	3508      	adds	r5, #8
 8003acc:	2d0c      	cmp	r5, #12
 8003ace:	bf38      	it	cc
 8003ad0:	250c      	movcc	r5, #12
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	db01      	blt.n	8003adc <_malloc_r+0x1c>
 8003ad8:	42a9      	cmp	r1, r5
 8003ada:	d905      	bls.n	8003ae8 <_malloc_r+0x28>
 8003adc:	230c      	movs	r3, #12
 8003ade:	2600      	movs	r6, #0
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bbc <_malloc_r+0xfc>
 8003aec:	f000 f868 	bl	8003bc0 <__malloc_lock>
 8003af0:	f8d8 3000 	ldr.w	r3, [r8]
 8003af4:	461c      	mov	r4, r3
 8003af6:	bb5c      	cbnz	r4, 8003b50 <_malloc_r+0x90>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ffc0 	bl	8003a80 <sbrk_aligned>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	4604      	mov	r4, r0
 8003b04:	d155      	bne.n	8003bb2 <_malloc_r+0xf2>
 8003b06:	f8d8 4000 	ldr.w	r4, [r8]
 8003b0a:	4626      	mov	r6, r4
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d145      	bne.n	8003b9c <_malloc_r+0xdc>
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d048      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4631      	mov	r1, r6
 8003b18:	4638      	mov	r0, r7
 8003b1a:	eb04 0903 	add.w	r9, r4, r3
 8003b1e:	f000 fc5f 	bl	80043e0 <_sbrk_r>
 8003b22:	4581      	cmp	r9, r0
 8003b24:	d13f      	bne.n	8003ba6 <_malloc_r+0xe6>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	4638      	mov	r0, r7
 8003b2a:	1a6d      	subs	r5, r5, r1
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7ff ffa7 	bl	8003a80 <sbrk_aligned>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d037      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	442b      	add	r3, r5
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d038      	beq.n	8003bb6 <_malloc_r+0xf6>
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	42a2      	cmp	r2, r4
 8003b48:	d12b      	bne.n	8003ba2 <_malloc_r+0xe2>
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xb0>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d41f      	bmi.n	8003b96 <_malloc_r+0xd6>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xca>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4638      	mov	r0, r7
 8003b72:	f104 060b 	add.w	r6, r4, #11
 8003b76:	f000 f829 	bl	8003bcc <__malloc_unlock>
 8003b7a:	f026 0607 	bic.w	r6, r6, #7
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	1af2      	subs	r2, r6, r3
 8003b82:	d0ae      	beq.n	8003ae2 <_malloc_r+0x22>
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	50a3      	str	r3, [r4, r2]
 8003b88:	e7ab      	b.n	8003ae2 <_malloc_r+0x22>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x8c>
 8003b90:	f8c8 2000 	str.w	r2, [r8]
 8003b94:	e7ec      	b.n	8003b70 <_malloc_r+0xb0>
 8003b96:	4623      	mov	r3, r4
 8003b98:	6864      	ldr	r4, [r4, #4]
 8003b9a:	e7ac      	b.n	8003af6 <_malloc_r+0x36>
 8003b9c:	4634      	mov	r4, r6
 8003b9e:	6876      	ldr	r6, [r6, #4]
 8003ba0:	e7b4      	b.n	8003b0c <_malloc_r+0x4c>
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	e7cc      	b.n	8003b40 <_malloc_r+0x80>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	4638      	mov	r0, r7
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	f000 f80e 	bl	8003bcc <__malloc_unlock>
 8003bb0:	e797      	b.n	8003ae2 <_malloc_r+0x22>
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	e7dc      	b.n	8003b70 <_malloc_r+0xb0>
 8003bb6:	605b      	str	r3, [r3, #4]
 8003bb8:	deff      	udf	#255	; 0xff
 8003bba:	bf00      	nop
 8003bbc:	2000033c 	.word	0x2000033c

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bf13 	b.w	80039ec <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20000338 	.word	0x20000338

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bf0e 	b.w	80039ee <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20000338 	.word	0x20000338

08003bd8 <__sfputc_r>:
 8003bd8:	6893      	ldr	r3, [r2, #8]
 8003bda:	b410      	push	{r4}
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	6093      	str	r3, [r2, #8]
 8003be2:	da07      	bge.n	8003bf4 <__sfputc_r+0x1c>
 8003be4:	6994      	ldr	r4, [r2, #24]
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	db01      	blt.n	8003bee <__sfputc_r+0x16>
 8003bea:	290a      	cmp	r1, #10
 8003bec:	d102      	bne.n	8003bf4 <__sfputc_r+0x1c>
 8003bee:	bc10      	pop	{r4}
 8003bf0:	f7ff bdef 	b.w	80037d2 <__swbuf_r>
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	1c58      	adds	r0, r3, #1
 8003bf8:	6010      	str	r0, [r2, #0]
 8003bfa:	7019      	strb	r1, [r3, #0]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	bc10      	pop	{r4}
 8003c00:	4770      	bx	lr

08003c02 <__sfputs_r>:
 8003c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c04:	4606      	mov	r6, r0
 8003c06:	460f      	mov	r7, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	18d5      	adds	r5, r2, r3
 8003c0c:	42ac      	cmp	r4, r5
 8003c0e:	d101      	bne.n	8003c14 <__sfputs_r+0x12>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e007      	b.n	8003c24 <__sfputs_r+0x22>
 8003c14:	463a      	mov	r2, r7
 8003c16:	4630      	mov	r0, r6
 8003c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1c:	f7ff ffdc 	bl	8003bd8 <__sfputc_r>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d1f3      	bne.n	8003c0c <__sfputs_r+0xa>
 8003c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c28 <_vfiprintf_r>:
 8003c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	460d      	mov	r5, r1
 8003c2e:	4614      	mov	r4, r2
 8003c30:	4698      	mov	r8, r3
 8003c32:	4606      	mov	r6, r0
 8003c34:	b09d      	sub	sp, #116	; 0x74
 8003c36:	b118      	cbz	r0, 8003c40 <_vfiprintf_r+0x18>
 8003c38:	6a03      	ldr	r3, [r0, #32]
 8003c3a:	b90b      	cbnz	r3, 8003c40 <_vfiprintf_r+0x18>
 8003c3c:	f7ff fce2 	bl	8003604 <__sinit>
 8003c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c42:	07d9      	lsls	r1, r3, #31
 8003c44:	d405      	bmi.n	8003c52 <_vfiprintf_r+0x2a>
 8003c46:	89ab      	ldrh	r3, [r5, #12]
 8003c48:	059a      	lsls	r2, r3, #22
 8003c4a:	d402      	bmi.n	8003c52 <_vfiprintf_r+0x2a>
 8003c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c4e:	f7ff fecd 	bl	80039ec <__retarget_lock_acquire_recursive>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	d501      	bpl.n	8003c5c <_vfiprintf_r+0x34>
 8003c58:	692b      	ldr	r3, [r5, #16]
 8003c5a:	b99b      	cbnz	r3, 8003c84 <_vfiprintf_r+0x5c>
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f7ff fdf4 	bl	800384c <__swsetup_r>
 8003c64:	b170      	cbz	r0, 8003c84 <_vfiprintf_r+0x5c>
 8003c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c68:	07dc      	lsls	r4, r3, #31
 8003c6a:	d504      	bpl.n	8003c76 <_vfiprintf_r+0x4e>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	b01d      	add	sp, #116	; 0x74
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	89ab      	ldrh	r3, [r5, #12]
 8003c78:	0598      	lsls	r0, r3, #22
 8003c7a:	d4f7      	bmi.n	8003c6c <_vfiprintf_r+0x44>
 8003c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c7e:	f7ff feb6 	bl	80039ee <__retarget_lock_release_recursive>
 8003c82:	e7f3      	b.n	8003c6c <_vfiprintf_r+0x44>
 8003c84:	2300      	movs	r3, #0
 8003c86:	9309      	str	r3, [sp, #36]	; 0x24
 8003c88:	2320      	movs	r3, #32
 8003c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c8e:	2330      	movs	r3, #48	; 0x30
 8003c90:	f04f 0901 	mov.w	r9, #1
 8003c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003e48 <_vfiprintf_r+0x220>
 8003c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ca0:	4623      	mov	r3, r4
 8003ca2:	469a      	mov	sl, r3
 8003ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca8:	b10a      	cbz	r2, 8003cae <_vfiprintf_r+0x86>
 8003caa:	2a25      	cmp	r2, #37	; 0x25
 8003cac:	d1f9      	bne.n	8003ca2 <_vfiprintf_r+0x7a>
 8003cae:	ebba 0b04 	subs.w	fp, sl, r4
 8003cb2:	d00b      	beq.n	8003ccc <_vfiprintf_r+0xa4>
 8003cb4:	465b      	mov	r3, fp
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7ff ffa1 	bl	8003c02 <__sfputs_r>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f000 80a9 	beq.w	8003e18 <_vfiprintf_r+0x1f0>
 8003cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cc8:	445a      	add	r2, fp
 8003cca:	9209      	str	r2, [sp, #36]	; 0x24
 8003ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80a1 	beq.w	8003e18 <_vfiprintf_r+0x1f0>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ce0:	f10a 0a01 	add.w	sl, sl, #1
 8003ce4:	9304      	str	r3, [sp, #16]
 8003ce6:	9307      	str	r3, [sp, #28]
 8003ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cec:	931a      	str	r3, [sp, #104]	; 0x68
 8003cee:	4654      	mov	r4, sl
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf6:	4854      	ldr	r0, [pc, #336]	; (8003e48 <_vfiprintf_r+0x220>)
 8003cf8:	f000 fb82 	bl	8004400 <memchr>
 8003cfc:	9a04      	ldr	r2, [sp, #16]
 8003cfe:	b9d8      	cbnz	r0, 8003d38 <_vfiprintf_r+0x110>
 8003d00:	06d1      	lsls	r1, r2, #27
 8003d02:	bf44      	itt	mi
 8003d04:	2320      	movmi	r3, #32
 8003d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d0a:	0713      	lsls	r3, r2, #28
 8003d0c:	bf44      	itt	mi
 8003d0e:	232b      	movmi	r3, #43	; 0x2b
 8003d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d14:	f89a 3000 	ldrb.w	r3, [sl]
 8003d18:	2b2a      	cmp	r3, #42	; 0x2a
 8003d1a:	d015      	beq.n	8003d48 <_vfiprintf_r+0x120>
 8003d1c:	4654      	mov	r4, sl
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f04f 0c0a 	mov.w	ip, #10
 8003d24:	9a07      	ldr	r2, [sp, #28]
 8003d26:	4621      	mov	r1, r4
 8003d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d2c:	3b30      	subs	r3, #48	; 0x30
 8003d2e:	2b09      	cmp	r3, #9
 8003d30:	d94d      	bls.n	8003dce <_vfiprintf_r+0x1a6>
 8003d32:	b1b0      	cbz	r0, 8003d62 <_vfiprintf_r+0x13a>
 8003d34:	9207      	str	r2, [sp, #28]
 8003d36:	e014      	b.n	8003d62 <_vfiprintf_r+0x13a>
 8003d38:	eba0 0308 	sub.w	r3, r0, r8
 8003d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	46a2      	mov	sl, r4
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	e7d2      	b.n	8003cee <_vfiprintf_r+0xc6>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	1d19      	adds	r1, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	9103      	str	r1, [sp, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bfbb      	ittet	lt
 8003d54:	425b      	neglt	r3, r3
 8003d56:	f042 0202 	orrlt.w	r2, r2, #2
 8003d5a:	9307      	strge	r3, [sp, #28]
 8003d5c:	9307      	strlt	r3, [sp, #28]
 8003d5e:	bfb8      	it	lt
 8003d60:	9204      	strlt	r2, [sp, #16]
 8003d62:	7823      	ldrb	r3, [r4, #0]
 8003d64:	2b2e      	cmp	r3, #46	; 0x2e
 8003d66:	d10c      	bne.n	8003d82 <_vfiprintf_r+0x15a>
 8003d68:	7863      	ldrb	r3, [r4, #1]
 8003d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6c:	d134      	bne.n	8003dd8 <_vfiprintf_r+0x1b0>
 8003d6e:	9b03      	ldr	r3, [sp, #12]
 8003d70:	3402      	adds	r4, #2
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	9203      	str	r2, [sp, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bfb8      	it	lt
 8003d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d80:	9305      	str	r3, [sp, #20]
 8003d82:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e4c <_vfiprintf_r+0x224>
 8003d86:	2203      	movs	r2, #3
 8003d88:	4650      	mov	r0, sl
 8003d8a:	7821      	ldrb	r1, [r4, #0]
 8003d8c:	f000 fb38 	bl	8004400 <memchr>
 8003d90:	b138      	cbz	r0, 8003da2 <_vfiprintf_r+0x17a>
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	9b04      	ldr	r3, [sp, #16]
 8003d96:	eba0 000a 	sub.w	r0, r0, sl
 8003d9a:	4082      	lsls	r2, r0
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	3401      	adds	r4, #1
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da6:	2206      	movs	r2, #6
 8003da8:	4829      	ldr	r0, [pc, #164]	; (8003e50 <_vfiprintf_r+0x228>)
 8003daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dae:	f000 fb27 	bl	8004400 <memchr>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d03f      	beq.n	8003e36 <_vfiprintf_r+0x20e>
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <_vfiprintf_r+0x22c>)
 8003db8:	bb1b      	cbnz	r3, 8003e02 <_vfiprintf_r+0x1da>
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	3307      	adds	r3, #7
 8003dbe:	f023 0307 	bic.w	r3, r3, #7
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	9303      	str	r3, [sp, #12]
 8003dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc8:	443b      	add	r3, r7
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
 8003dcc:	e768      	b.n	8003ca0 <_vfiprintf_r+0x78>
 8003dce:	460c      	mov	r4, r1
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd6:	e7a6      	b.n	8003d26 <_vfiprintf_r+0xfe>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f04f 0c0a 	mov.w	ip, #10
 8003dde:	4619      	mov	r1, r3
 8003de0:	3401      	adds	r4, #1
 8003de2:	9305      	str	r3, [sp, #20]
 8003de4:	4620      	mov	r0, r4
 8003de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dea:	3a30      	subs	r2, #48	; 0x30
 8003dec:	2a09      	cmp	r2, #9
 8003dee:	d903      	bls.n	8003df8 <_vfiprintf_r+0x1d0>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0c6      	beq.n	8003d82 <_vfiprintf_r+0x15a>
 8003df4:	9105      	str	r1, [sp, #20]
 8003df6:	e7c4      	b.n	8003d82 <_vfiprintf_r+0x15a>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e00:	e7f0      	b.n	8003de4 <_vfiprintf_r+0x1bc>
 8003e02:	ab03      	add	r3, sp, #12
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	462a      	mov	r2, r5
 8003e08:	4630      	mov	r0, r6
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <_vfiprintf_r+0x230>)
 8003e0c:	a904      	add	r1, sp, #16
 8003e0e:	f3af 8000 	nop.w
 8003e12:	4607      	mov	r7, r0
 8003e14:	1c78      	adds	r0, r7, #1
 8003e16:	d1d6      	bne.n	8003dc6 <_vfiprintf_r+0x19e>
 8003e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e1a:	07d9      	lsls	r1, r3, #31
 8003e1c:	d405      	bmi.n	8003e2a <_vfiprintf_r+0x202>
 8003e1e:	89ab      	ldrh	r3, [r5, #12]
 8003e20:	059a      	lsls	r2, r3, #22
 8003e22:	d402      	bmi.n	8003e2a <_vfiprintf_r+0x202>
 8003e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e26:	f7ff fde2 	bl	80039ee <__retarget_lock_release_recursive>
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	065b      	lsls	r3, r3, #25
 8003e2e:	f53f af1d 	bmi.w	8003c6c <_vfiprintf_r+0x44>
 8003e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e34:	e71c      	b.n	8003c70 <_vfiprintf_r+0x48>
 8003e36:	ab03      	add	r3, sp, #12
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	462a      	mov	r2, r5
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <_vfiprintf_r+0x230>)
 8003e40:	a904      	add	r1, sp, #16
 8003e42:	f000 f87d 	bl	8003f40 <_printf_i>
 8003e46:	e7e4      	b.n	8003e12 <_vfiprintf_r+0x1ea>
 8003e48:	0800463e 	.word	0x0800463e
 8003e4c:	08004644 	.word	0x08004644
 8003e50:	08004648 	.word	0x08004648
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08003c03 	.word	0x08003c03

08003e5c <_printf_common>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	4616      	mov	r6, r2
 8003e62:	4699      	mov	r9, r3
 8003e64:	688a      	ldr	r2, [r1, #8]
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	4607      	mov	r7, r0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bfb8      	it	lt
 8003e6e:	4613      	movlt	r3, r2
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e76:	460c      	mov	r4, r1
 8003e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e7c:	b10a      	cbz	r2, 8003e82 <_printf_common+0x26>
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	bf42      	ittt	mi
 8003e88:	6833      	ldrmi	r3, [r6, #0]
 8003e8a:	3302      	addmi	r3, #2
 8003e8c:	6033      	strmi	r3, [r6, #0]
 8003e8e:	6825      	ldr	r5, [r4, #0]
 8003e90:	f015 0506 	ands.w	r5, r5, #6
 8003e94:	d106      	bne.n	8003ea4 <_printf_common+0x48>
 8003e96:	f104 0a19 	add.w	sl, r4, #25
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	6832      	ldr	r2, [r6, #0]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dc2b      	bgt.n	8003efc <_printf_common+0xa0>
 8003ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea8:	1e13      	subs	r3, r2, #0
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	bf18      	it	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	0692      	lsls	r2, r2, #26
 8003eb2:	d430      	bmi.n	8003f16 <_printf_common+0xba>
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ebc:	47c0      	blx	r8
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d023      	beq.n	8003f0a <_printf_common+0xae>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	6922      	ldr	r2, [r4, #16]
 8003ec6:	f003 0306 	and.w	r3, r3, #6
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf14      	ite	ne
 8003ece:	2500      	movne	r5, #0
 8003ed0:	6833      	ldreq	r3, [r6, #0]
 8003ed2:	f04f 0600 	mov.w	r6, #0
 8003ed6:	bf08      	it	eq
 8003ed8:	68e5      	ldreq	r5, [r4, #12]
 8003eda:	f104 041a 	add.w	r4, r4, #26
 8003ede:	bf08      	it	eq
 8003ee0:	1aed      	subeq	r5, r5, r3
 8003ee2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ee6:	bf08      	it	eq
 8003ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfc4      	itt	gt
 8003ef0:	1a9b      	subgt	r3, r3, r2
 8003ef2:	18ed      	addgt	r5, r5, r3
 8003ef4:	42b5      	cmp	r5, r6
 8003ef6:	d11a      	bne.n	8003f2e <_printf_common+0xd2>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e008      	b.n	8003f0e <_printf_common+0xb2>
 8003efc:	2301      	movs	r3, #1
 8003efe:	4652      	mov	r2, sl
 8003f00:	4649      	mov	r1, r9
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c0      	blx	r8
 8003f06:	3001      	adds	r0, #1
 8003f08:	d103      	bne.n	8003f12 <_printf_common+0xb6>
 8003f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	3501      	adds	r5, #1
 8003f14:	e7c1      	b.n	8003e9a <_printf_common+0x3e>
 8003f16:	2030      	movs	r0, #48	; 0x30
 8003f18:	18e1      	adds	r1, r4, r3
 8003f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f24:	4422      	add	r2, r4
 8003f26:	3302      	adds	r3, #2
 8003f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f2c:	e7c2      	b.n	8003eb4 <_printf_common+0x58>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4622      	mov	r2, r4
 8003f32:	4649      	mov	r1, r9
 8003f34:	4638      	mov	r0, r7
 8003f36:	47c0      	blx	r8
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0e6      	beq.n	8003f0a <_printf_common+0xae>
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	e7d9      	b.n	8003ef4 <_printf_common+0x98>

08003f40 <_printf_i>:
 8003f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	7e0f      	ldrb	r7, [r1, #24]
 8003f46:	4691      	mov	r9, r2
 8003f48:	2f78      	cmp	r7, #120	; 0x78
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	469a      	mov	sl, r3
 8003f50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f56:	d807      	bhi.n	8003f68 <_printf_i+0x28>
 8003f58:	2f62      	cmp	r7, #98	; 0x62
 8003f5a:	d80a      	bhi.n	8003f72 <_printf_i+0x32>
 8003f5c:	2f00      	cmp	r7, #0
 8003f5e:	f000 80d5 	beq.w	800410c <_printf_i+0x1cc>
 8003f62:	2f58      	cmp	r7, #88	; 0x58
 8003f64:	f000 80c1 	beq.w	80040ea <_printf_i+0x1aa>
 8003f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f70:	e03a      	b.n	8003fe8 <_printf_i+0xa8>
 8003f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f76:	2b15      	cmp	r3, #21
 8003f78:	d8f6      	bhi.n	8003f68 <_printf_i+0x28>
 8003f7a:	a101      	add	r1, pc, #4	; (adr r1, 8003f80 <_printf_i+0x40>)
 8003f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fed 	.word	0x08003fed
 8003f88:	08003f69 	.word	0x08003f69
 8003f8c:	08003f69 	.word	0x08003f69
 8003f90:	08003f69 	.word	0x08003f69
 8003f94:	08003f69 	.word	0x08003f69
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08003f69 	.word	0x08003f69
 8003fa0:	08003f69 	.word	0x08003f69
 8003fa4:	08003f69 	.word	0x08003f69
 8003fa8:	08003f69 	.word	0x08003f69
 8003fac:	080040f3 	.word	0x080040f3
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	080040ad 	.word	0x080040ad
 8003fb8:	08003f69 	.word	0x08003f69
 8003fbc:	08003f69 	.word	0x08003f69
 8003fc0:	08004115 	.word	0x08004115
 8003fc4:	08003f69 	.word	0x08003f69
 8003fc8:	08004019 	.word	0x08004019
 8003fcc:	08003f69 	.word	0x08003f69
 8003fd0:	08003f69 	.word	0x08003f69
 8003fd4:	080040b5 	.word	0x080040b5
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	602a      	str	r2, [r5, #0]
 8003fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0a0      	b.n	800412e <_printf_i+0x1ee>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	682b      	ldr	r3, [r5, #0]
 8003ff0:	0607      	lsls	r7, r0, #24
 8003ff2:	f103 0104 	add.w	r1, r3, #4
 8003ff6:	6029      	str	r1, [r5, #0]
 8003ff8:	d501      	bpl.n	8003ffe <_printf_i+0xbe>
 8003ffa:	681e      	ldr	r6, [r3, #0]
 8003ffc:	e003      	b.n	8004006 <_printf_i+0xc6>
 8003ffe:	0646      	lsls	r6, r0, #25
 8004000:	d5fb      	bpl.n	8003ffa <_printf_i+0xba>
 8004002:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004006:	2e00      	cmp	r6, #0
 8004008:	da03      	bge.n	8004012 <_printf_i+0xd2>
 800400a:	232d      	movs	r3, #45	; 0x2d
 800400c:	4276      	negs	r6, r6
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004012:	230a      	movs	r3, #10
 8004014:	4859      	ldr	r0, [pc, #356]	; (800417c <_printf_i+0x23c>)
 8004016:	e012      	b.n	800403e <_printf_i+0xfe>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6029      	str	r1, [r5, #0]
 8004020:	0605      	lsls	r5, r0, #24
 8004022:	d501      	bpl.n	8004028 <_printf_i+0xe8>
 8004024:	681e      	ldr	r6, [r3, #0]
 8004026:	e002      	b.n	800402e <_printf_i+0xee>
 8004028:	0641      	lsls	r1, r0, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0xe4>
 800402c:	881e      	ldrh	r6, [r3, #0]
 800402e:	2f6f      	cmp	r7, #111	; 0x6f
 8004030:	bf0c      	ite	eq
 8004032:	2308      	moveq	r3, #8
 8004034:	230a      	movne	r3, #10
 8004036:	4851      	ldr	r0, [pc, #324]	; (800417c <_printf_i+0x23c>)
 8004038:	2100      	movs	r1, #0
 800403a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800403e:	6865      	ldr	r5, [r4, #4]
 8004040:	2d00      	cmp	r5, #0
 8004042:	bfa8      	it	ge
 8004044:	6821      	ldrge	r1, [r4, #0]
 8004046:	60a5      	str	r5, [r4, #8]
 8004048:	bfa4      	itt	ge
 800404a:	f021 0104 	bicge.w	r1, r1, #4
 800404e:	6021      	strge	r1, [r4, #0]
 8004050:	b90e      	cbnz	r6, 8004056 <_printf_i+0x116>
 8004052:	2d00      	cmp	r5, #0
 8004054:	d04b      	beq.n	80040ee <_printf_i+0x1ae>
 8004056:	4615      	mov	r5, r2
 8004058:	fbb6 f1f3 	udiv	r1, r6, r3
 800405c:	fb03 6711 	mls	r7, r3, r1, r6
 8004060:	5dc7      	ldrb	r7, [r0, r7]
 8004062:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004066:	4637      	mov	r7, r6
 8004068:	42bb      	cmp	r3, r7
 800406a:	460e      	mov	r6, r1
 800406c:	d9f4      	bls.n	8004058 <_printf_i+0x118>
 800406e:	2b08      	cmp	r3, #8
 8004070:	d10b      	bne.n	800408a <_printf_i+0x14a>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	07de      	lsls	r6, r3, #31
 8004076:	d508      	bpl.n	800408a <_printf_i+0x14a>
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	6861      	ldr	r1, [r4, #4]
 800407c:	4299      	cmp	r1, r3
 800407e:	bfde      	ittt	le
 8004080:	2330      	movle	r3, #48	; 0x30
 8004082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800408a:	1b52      	subs	r2, r2, r5
 800408c:	6122      	str	r2, [r4, #16]
 800408e:	464b      	mov	r3, r9
 8004090:	4621      	mov	r1, r4
 8004092:	4640      	mov	r0, r8
 8004094:	f8cd a000 	str.w	sl, [sp]
 8004098:	aa03      	add	r2, sp, #12
 800409a:	f7ff fedf 	bl	8003e5c <_printf_common>
 800409e:	3001      	adds	r0, #1
 80040a0:	d14a      	bne.n	8004138 <_printf_i+0x1f8>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	b004      	add	sp, #16
 80040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	f043 0320 	orr.w	r3, r3, #32
 80040b2:	6023      	str	r3, [r4, #0]
 80040b4:	2778      	movs	r7, #120	; 0x78
 80040b6:	4832      	ldr	r0, [pc, #200]	; (8004180 <_printf_i+0x240>)
 80040b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	6829      	ldr	r1, [r5, #0]
 80040c0:	061f      	lsls	r7, r3, #24
 80040c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80040c6:	d402      	bmi.n	80040ce <_printf_i+0x18e>
 80040c8:	065f      	lsls	r7, r3, #25
 80040ca:	bf48      	it	mi
 80040cc:	b2b6      	uxthmi	r6, r6
 80040ce:	07df      	lsls	r7, r3, #31
 80040d0:	bf48      	it	mi
 80040d2:	f043 0320 	orrmi.w	r3, r3, #32
 80040d6:	6029      	str	r1, [r5, #0]
 80040d8:	bf48      	it	mi
 80040da:	6023      	strmi	r3, [r4, #0]
 80040dc:	b91e      	cbnz	r6, 80040e6 <_printf_i+0x1a6>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f023 0320 	bic.w	r3, r3, #32
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	2310      	movs	r3, #16
 80040e8:	e7a6      	b.n	8004038 <_printf_i+0xf8>
 80040ea:	4824      	ldr	r0, [pc, #144]	; (800417c <_printf_i+0x23c>)
 80040ec:	e7e4      	b.n	80040b8 <_printf_i+0x178>
 80040ee:	4615      	mov	r5, r2
 80040f0:	e7bd      	b.n	800406e <_printf_i+0x12e>
 80040f2:	682b      	ldr	r3, [r5, #0]
 80040f4:	6826      	ldr	r6, [r4, #0]
 80040f6:	1d18      	adds	r0, r3, #4
 80040f8:	6961      	ldr	r1, [r4, #20]
 80040fa:	6028      	str	r0, [r5, #0]
 80040fc:	0635      	lsls	r5, r6, #24
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	d501      	bpl.n	8004106 <_printf_i+0x1c6>
 8004102:	6019      	str	r1, [r3, #0]
 8004104:	e002      	b.n	800410c <_printf_i+0x1cc>
 8004106:	0670      	lsls	r0, r6, #25
 8004108:	d5fb      	bpl.n	8004102 <_printf_i+0x1c2>
 800410a:	8019      	strh	r1, [r3, #0]
 800410c:	2300      	movs	r3, #0
 800410e:	4615      	mov	r5, r2
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	e7bc      	b.n	800408e <_printf_i+0x14e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	2100      	movs	r1, #0
 8004118:	1d1a      	adds	r2, r3, #4
 800411a:	602a      	str	r2, [r5, #0]
 800411c:	681d      	ldr	r5, [r3, #0]
 800411e:	6862      	ldr	r2, [r4, #4]
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f96d 	bl	8004400 <memchr>
 8004126:	b108      	cbz	r0, 800412c <_printf_i+0x1ec>
 8004128:	1b40      	subs	r0, r0, r5
 800412a:	6060      	str	r0, [r4, #4]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	6123      	str	r3, [r4, #16]
 8004130:	2300      	movs	r3, #0
 8004132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004136:	e7aa      	b.n	800408e <_printf_i+0x14e>
 8004138:	462a      	mov	r2, r5
 800413a:	4649      	mov	r1, r9
 800413c:	4640      	mov	r0, r8
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	47d0      	blx	sl
 8004142:	3001      	adds	r0, #1
 8004144:	d0ad      	beq.n	80040a2 <_printf_i+0x162>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	079b      	lsls	r3, r3, #30
 800414a:	d413      	bmi.n	8004174 <_printf_i+0x234>
 800414c:	68e0      	ldr	r0, [r4, #12]
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	4298      	cmp	r0, r3
 8004152:	bfb8      	it	lt
 8004154:	4618      	movlt	r0, r3
 8004156:	e7a6      	b.n	80040a6 <_printf_i+0x166>
 8004158:	2301      	movs	r3, #1
 800415a:	4632      	mov	r2, r6
 800415c:	4649      	mov	r1, r9
 800415e:	4640      	mov	r0, r8
 8004160:	47d0      	blx	sl
 8004162:	3001      	adds	r0, #1
 8004164:	d09d      	beq.n	80040a2 <_printf_i+0x162>
 8004166:	3501      	adds	r5, #1
 8004168:	68e3      	ldr	r3, [r4, #12]
 800416a:	9903      	ldr	r1, [sp, #12]
 800416c:	1a5b      	subs	r3, r3, r1
 800416e:	42ab      	cmp	r3, r5
 8004170:	dcf2      	bgt.n	8004158 <_printf_i+0x218>
 8004172:	e7eb      	b.n	800414c <_printf_i+0x20c>
 8004174:	2500      	movs	r5, #0
 8004176:	f104 0619 	add.w	r6, r4, #25
 800417a:	e7f5      	b.n	8004168 <_printf_i+0x228>
 800417c:	0800464f 	.word	0x0800464f
 8004180:	08004660 	.word	0x08004660

08004184 <__sflush_r>:
 8004184:	898a      	ldrh	r2, [r1, #12]
 8004186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004188:	4605      	mov	r5, r0
 800418a:	0710      	lsls	r0, r2, #28
 800418c:	460c      	mov	r4, r1
 800418e:	d457      	bmi.n	8004240 <__sflush_r+0xbc>
 8004190:	684b      	ldr	r3, [r1, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	dc04      	bgt.n	80041a0 <__sflush_r+0x1c>
 8004196:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	dc01      	bgt.n	80041a0 <__sflush_r+0x1c>
 800419c:	2000      	movs	r0, #0
 800419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041a2:	2e00      	cmp	r6, #0
 80041a4:	d0fa      	beq.n	800419c <__sflush_r+0x18>
 80041a6:	2300      	movs	r3, #0
 80041a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041ac:	682f      	ldr	r7, [r5, #0]
 80041ae:	6a21      	ldr	r1, [r4, #32]
 80041b0:	602b      	str	r3, [r5, #0]
 80041b2:	d032      	beq.n	800421a <__sflush_r+0x96>
 80041b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	075a      	lsls	r2, r3, #29
 80041ba:	d505      	bpl.n	80041c8 <__sflush_r+0x44>
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	1ac0      	subs	r0, r0, r3
 80041c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041c2:	b10b      	cbz	r3, 80041c8 <__sflush_r+0x44>
 80041c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041c6:	1ac0      	subs	r0, r0, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	4602      	mov	r2, r0
 80041cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ce:	4628      	mov	r0, r5
 80041d0:	6a21      	ldr	r1, [r4, #32]
 80041d2:	47b0      	blx	r6
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	d106      	bne.n	80041e8 <__sflush_r+0x64>
 80041da:	6829      	ldr	r1, [r5, #0]
 80041dc:	291d      	cmp	r1, #29
 80041de:	d82b      	bhi.n	8004238 <__sflush_r+0xb4>
 80041e0:	4a28      	ldr	r2, [pc, #160]	; (8004284 <__sflush_r+0x100>)
 80041e2:	410a      	asrs	r2, r1
 80041e4:	07d6      	lsls	r6, r2, #31
 80041e6:	d427      	bmi.n	8004238 <__sflush_r+0xb4>
 80041e8:	2200      	movs	r2, #0
 80041ea:	6062      	str	r2, [r4, #4]
 80041ec:	6922      	ldr	r2, [r4, #16]
 80041ee:	04d9      	lsls	r1, r3, #19
 80041f0:	6022      	str	r2, [r4, #0]
 80041f2:	d504      	bpl.n	80041fe <__sflush_r+0x7a>
 80041f4:	1c42      	adds	r2, r0, #1
 80041f6:	d101      	bne.n	80041fc <__sflush_r+0x78>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b903      	cbnz	r3, 80041fe <__sflush_r+0x7a>
 80041fc:	6560      	str	r0, [r4, #84]	; 0x54
 80041fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004200:	602f      	str	r7, [r5, #0]
 8004202:	2900      	cmp	r1, #0
 8004204:	d0ca      	beq.n	800419c <__sflush_r+0x18>
 8004206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800420a:	4299      	cmp	r1, r3
 800420c:	d002      	beq.n	8004214 <__sflush_r+0x90>
 800420e:	4628      	mov	r0, r5
 8004210:	f7ff fbee 	bl	80039f0 <_free_r>
 8004214:	2000      	movs	r0, #0
 8004216:	6360      	str	r0, [r4, #52]	; 0x34
 8004218:	e7c1      	b.n	800419e <__sflush_r+0x1a>
 800421a:	2301      	movs	r3, #1
 800421c:	4628      	mov	r0, r5
 800421e:	47b0      	blx	r6
 8004220:	1c41      	adds	r1, r0, #1
 8004222:	d1c8      	bne.n	80041b6 <__sflush_r+0x32>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0c5      	beq.n	80041b6 <__sflush_r+0x32>
 800422a:	2b1d      	cmp	r3, #29
 800422c:	d001      	beq.n	8004232 <__sflush_r+0xae>
 800422e:	2b16      	cmp	r3, #22
 8004230:	d101      	bne.n	8004236 <__sflush_r+0xb2>
 8004232:	602f      	str	r7, [r5, #0]
 8004234:	e7b2      	b.n	800419c <__sflush_r+0x18>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	e7ae      	b.n	800419e <__sflush_r+0x1a>
 8004240:	690f      	ldr	r7, [r1, #16]
 8004242:	2f00      	cmp	r7, #0
 8004244:	d0aa      	beq.n	800419c <__sflush_r+0x18>
 8004246:	0793      	lsls	r3, r2, #30
 8004248:	bf18      	it	ne
 800424a:	2300      	movne	r3, #0
 800424c:	680e      	ldr	r6, [r1, #0]
 800424e:	bf08      	it	eq
 8004250:	694b      	ldreq	r3, [r1, #20]
 8004252:	1bf6      	subs	r6, r6, r7
 8004254:	600f      	str	r7, [r1, #0]
 8004256:	608b      	str	r3, [r1, #8]
 8004258:	2e00      	cmp	r6, #0
 800425a:	dd9f      	ble.n	800419c <__sflush_r+0x18>
 800425c:	4633      	mov	r3, r6
 800425e:	463a      	mov	r2, r7
 8004260:	4628      	mov	r0, r5
 8004262:	6a21      	ldr	r1, [r4, #32]
 8004264:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004268:	47e0      	blx	ip
 800426a:	2800      	cmp	r0, #0
 800426c:	dc06      	bgt.n	800427c <__sflush_r+0xf8>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	e790      	b.n	800419e <__sflush_r+0x1a>
 800427c:	4407      	add	r7, r0
 800427e:	1a36      	subs	r6, r6, r0
 8004280:	e7ea      	b.n	8004258 <__sflush_r+0xd4>
 8004282:	bf00      	nop
 8004284:	dfbffffe 	.word	0xdfbffffe

08004288 <_fflush_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	690b      	ldr	r3, [r1, #16]
 800428c:	4605      	mov	r5, r0
 800428e:	460c      	mov	r4, r1
 8004290:	b913      	cbnz	r3, 8004298 <_fflush_r+0x10>
 8004292:	2500      	movs	r5, #0
 8004294:	4628      	mov	r0, r5
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	b118      	cbz	r0, 80042a2 <_fflush_r+0x1a>
 800429a:	6a03      	ldr	r3, [r0, #32]
 800429c:	b90b      	cbnz	r3, 80042a2 <_fflush_r+0x1a>
 800429e:	f7ff f9b1 	bl	8003604 <__sinit>
 80042a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f3      	beq.n	8004292 <_fflush_r+0xa>
 80042aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042ac:	07d0      	lsls	r0, r2, #31
 80042ae:	d404      	bmi.n	80042ba <_fflush_r+0x32>
 80042b0:	0599      	lsls	r1, r3, #22
 80042b2:	d402      	bmi.n	80042ba <_fflush_r+0x32>
 80042b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042b6:	f7ff fb99 	bl	80039ec <__retarget_lock_acquire_recursive>
 80042ba:	4628      	mov	r0, r5
 80042bc:	4621      	mov	r1, r4
 80042be:	f7ff ff61 	bl	8004184 <__sflush_r>
 80042c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042c4:	4605      	mov	r5, r0
 80042c6:	07da      	lsls	r2, r3, #31
 80042c8:	d4e4      	bmi.n	8004294 <_fflush_r+0xc>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	059b      	lsls	r3, r3, #22
 80042ce:	d4e1      	bmi.n	8004294 <_fflush_r+0xc>
 80042d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042d2:	f7ff fb8c 	bl	80039ee <__retarget_lock_release_recursive>
 80042d6:	e7dd      	b.n	8004294 <_fflush_r+0xc>

080042d8 <__swhatbuf_r>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	460c      	mov	r4, r1
 80042dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e0:	4615      	mov	r5, r2
 80042e2:	2900      	cmp	r1, #0
 80042e4:	461e      	mov	r6, r3
 80042e6:	b096      	sub	sp, #88	; 0x58
 80042e8:	da0c      	bge.n	8004304 <__swhatbuf_r+0x2c>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	2100      	movs	r1, #0
 80042ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042f2:	bf0c      	ite	eq
 80042f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042f8:	2340      	movne	r3, #64	; 0x40
 80042fa:	2000      	movs	r0, #0
 80042fc:	6031      	str	r1, [r6, #0]
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	b016      	add	sp, #88	; 0x58
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	466a      	mov	r2, sp
 8004306:	f000 f849 	bl	800439c <_fstat_r>
 800430a:	2800      	cmp	r0, #0
 800430c:	dbed      	blt.n	80042ea <__swhatbuf_r+0x12>
 800430e:	9901      	ldr	r1, [sp, #4]
 8004310:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004314:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004318:	4259      	negs	r1, r3
 800431a:	4159      	adcs	r1, r3
 800431c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004320:	e7eb      	b.n	80042fa <__swhatbuf_r+0x22>

08004322 <__smakebuf_r>:
 8004322:	898b      	ldrh	r3, [r1, #12]
 8004324:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004326:	079d      	lsls	r5, r3, #30
 8004328:	4606      	mov	r6, r0
 800432a:	460c      	mov	r4, r1
 800432c:	d507      	bpl.n	800433e <__smakebuf_r+0x1c>
 800432e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	2301      	movs	r3, #1
 8004338:	6163      	str	r3, [r4, #20]
 800433a:	b002      	add	sp, #8
 800433c:	bd70      	pop	{r4, r5, r6, pc}
 800433e:	466a      	mov	r2, sp
 8004340:	ab01      	add	r3, sp, #4
 8004342:	f7ff ffc9 	bl	80042d8 <__swhatbuf_r>
 8004346:	9900      	ldr	r1, [sp, #0]
 8004348:	4605      	mov	r5, r0
 800434a:	4630      	mov	r0, r6
 800434c:	f7ff fbb8 	bl	8003ac0 <_malloc_r>
 8004350:	b948      	cbnz	r0, 8004366 <__smakebuf_r+0x44>
 8004352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004356:	059a      	lsls	r2, r3, #22
 8004358:	d4ef      	bmi.n	800433a <__smakebuf_r+0x18>
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	e7e3      	b.n	800432e <__smakebuf_r+0xc>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	6020      	str	r0, [r4, #0]
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	81a3      	strh	r3, [r4, #12]
 8004370:	9b00      	ldr	r3, [sp, #0]
 8004372:	6120      	str	r0, [r4, #16]
 8004374:	6163      	str	r3, [r4, #20]
 8004376:	9b01      	ldr	r3, [sp, #4]
 8004378:	b15b      	cbz	r3, 8004392 <__smakebuf_r+0x70>
 800437a:	4630      	mov	r0, r6
 800437c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004380:	f000 f81e 	bl	80043c0 <_isatty_r>
 8004384:	b128      	cbz	r0, 8004392 <__smakebuf_r+0x70>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	431d      	orrs	r5, r3
 8004396:	81a5      	strh	r5, [r4, #12]
 8004398:	e7cf      	b.n	800433a <__smakebuf_r+0x18>
	...

0800439c <_fstat_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	2300      	movs	r3, #0
 80043a0:	4d06      	ldr	r5, [pc, #24]	; (80043bc <_fstat_r+0x20>)
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	602b      	str	r3, [r5, #0]
 80043aa:	f7fc fc24 	bl	8000bf6 <_fstat>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d102      	bne.n	80043b8 <_fstat_r+0x1c>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	b103      	cbz	r3, 80043b8 <_fstat_r+0x1c>
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	bd38      	pop	{r3, r4, r5, pc}
 80043ba:	bf00      	nop
 80043bc:	20000334 	.word	0x20000334

080043c0 <_isatty_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	2300      	movs	r3, #0
 80043c4:	4d05      	ldr	r5, [pc, #20]	; (80043dc <_isatty_r+0x1c>)
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc fc22 	bl	8000c14 <_isatty>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_isatty_r+0x1a>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_isatty_r+0x1a>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20000334 	.word	0x20000334

080043e0 <_sbrk_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	2300      	movs	r3, #0
 80043e4:	4d05      	ldr	r5, [pc, #20]	; (80043fc <_sbrk_r+0x1c>)
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc fc28 	bl	8000c40 <_sbrk>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_sbrk_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_sbrk_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000334 	.word	0x20000334

08004400 <memchr>:
 8004400:	4603      	mov	r3, r0
 8004402:	b510      	push	{r4, lr}
 8004404:	b2c9      	uxtb	r1, r1
 8004406:	4402      	add	r2, r0
 8004408:	4293      	cmp	r3, r2
 800440a:	4618      	mov	r0, r3
 800440c:	d101      	bne.n	8004412 <memchr+0x12>
 800440e:	2000      	movs	r0, #0
 8004410:	e003      	b.n	800441a <memchr+0x1a>
 8004412:	7804      	ldrb	r4, [r0, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	428c      	cmp	r4, r1
 8004418:	d1f6      	bne.n	8004408 <memchr+0x8>
 800441a:	bd10      	pop	{r4, pc}

0800441c <_init>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr

08004428 <_fini>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	bf00      	nop
 800442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442e:	bc08      	pop	{r3}
 8004430:	469e      	mov	lr, r3
 8004432:	4770      	bx	lr
