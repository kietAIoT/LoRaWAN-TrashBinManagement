
BIN_System_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002d5c  08002d5c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d5c  08002d5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08002dcc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08002dcc  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008892  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019af  00000000  00000000  00028966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000077a  00000000  00000000  0002ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fc8  00000000  00000000  0002b45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c00d  00000000  00000000  00043422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000874da  00000000  00000000  0004f42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f44  00000000  00000000  000d690c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d9850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bac 	.word	0x08002bac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002bac 	.word	0x08002bac

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
void KIET_reset_rtc_register();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("MAIN==>RUNNIG\n");
 80001d4:	480e      	ldr	r0, [pc, #56]	; (8000210 <main+0x40>)
 80001d6:	f001 fe79 	bl	8001ecc <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fbc7 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f81d 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8dd 	bl	80003a0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001e6:	f000 f877 	bl	80002d8 <MX_I2C2_Init>
//  MX_RTC_Init();
  MX_SPI1_Init();
 80001ea:	f000 f8a3 	bl	8000334 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  KIET_RTC_Init();
 80001ee:	f000 f92f 	bl	8000450 <KIET_RTC_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  KIET_ToggleLED();
 80001f2:	f000 fa17 	bl	8000624 <KIET_ToggleLED>
	  HAL_Delay(100);
 80001f6:	2064      	movs	r0, #100	; 0x64
 80001f8:	f000 fc1a 	bl	8000a30 <HAL_Delay>
	  printf("CHEKC RTC_ DIVH %d, and DIVL: %d\n ", RTC->DIVH ,RTC->DIVL);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <main+0x44>)
 80001fe:	691b      	ldr	r3, [r3, #16]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <main+0x44>)
 8000202:	6952      	ldr	r2, [r2, #20]
 8000204:	4619      	mov	r1, r3
 8000206:	4804      	ldr	r0, [pc, #16]	; (8000218 <main+0x48>)
 8000208:	f001 fdfa 	bl	8001e00 <iprintf>
	  KIET_ToggleLED();
 800020c:	e7f1      	b.n	80001f2 <main+0x22>
 800020e:	bf00      	nop
 8000210:	08002bc4 	.word	0x08002bc4
 8000214:	40002800 	.word	0x40002800
 8000218:	08002bd4 	.word	0x08002bd4

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b094      	sub	sp, #80	; 0x50
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 ff2e 	bl	800208c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800024c:	2309      	movs	r3, #9
 800024e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	4618      	mov	r0, r3
 8000278:	f000 ffdc 	bl	8001234 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000282:	f000 f9db 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fa48 	bl	8001738 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ae:	f000 f9c5 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80002b2:	2301      	movs	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002ba:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fbb4 	bl	8001a2c <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002ca:	f000 f9b7 	bl	800063c <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3750      	adds	r7, #80	; 0x50
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <MX_I2C2_Init+0x50>)
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <MX_I2C2_Init+0x54>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_I2C2_Init+0x50>)
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_I2C2_Init+0x58>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_I2C2_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_I2C2_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_I2C2_Init+0x50>)
 80002f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <MX_I2C2_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_I2C2_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <MX_I2C2_Init+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_I2C2_Init+0x50>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <MX_I2C2_Init+0x50>)
 8000316:	f000 fe49 	bl	8000fac <HAL_I2C_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000320:	f000 f98c 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000084 	.word	0x20000084
 800032c:	40005800 	.word	0x40005800
 8000330:	000186a0 	.word	0x000186a0

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_SPI1_Init+0x64>)
 800033a:	4a18      	ldr	r2, [pc, #96]	; (800039c <MX_SPI1_Init+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_SPI1_Init+0x64>)
 8000360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_SPI1_Init+0x64>)
 8000368:	2210      	movs	r2, #16
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_SPI1_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_SPI1_Init+0x64>)
 8000386:	f001 fc07 	bl	8001b98 <HAL_SPI_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000390:	f000 f954 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000d8 	.word	0x200000d8
 800039c:	40013000 	.word	0x40013000

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a23      	ldr	r2, [pc, #140]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b21      	ldr	r3, [pc, #132]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a1d      	ldr	r2, [pc, #116]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0320 	and.w	r3, r3, #32
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a17      	ldr	r2, [pc, #92]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a11      	ldr	r2, [pc, #68]	; (8000448 <MX_GPIO_Init+0xa8>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_GPIO_Init+0xa8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041a:	480c      	ldr	r0, [pc, #48]	; (800044c <MX_GPIO_Init+0xac>)
 800041c:	f000 fd94 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <MX_GPIO_Init+0xac>)
 800043a:	f000 fc01 	bl	8000c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043e:	bf00      	nop
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40010c00 	.word	0x40010c00

08000450 <KIET_RTC_Init>:

/* USER CODE BEGIN 4 */

void KIET_RTC_Init(){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	/** @note */

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000456:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <KIET_RTC_Init+0xa8>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a27      	ldr	r2, [pc, #156]	; (80004f8 <KIET_RTC_Init+0xa8>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <KIET_RTC_Init+0xa8>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a24      	ldr	r2, [pc, #144]	; (80004f8 <KIET_RTC_Init+0xa8>)
 8000468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800046c:	61d3      	str	r3, [r2, #28]

	SET_BIT(PWR->CR, PWR_CR_DBP);
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <KIET_RTC_Init+0xac>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a22      	ldr	r2, [pc, #136]	; (80004fc <KIET_RTC_Init+0xac>)
 8000474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000478:	6013      	str	r3, [r2, #0]

	printf("CHEKC POINT -1: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY));
 800047a:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <KIET_RTC_Init+0xa8>)
 800047c:	6a1b      	ldr	r3, [r3, #32]
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	4619      	mov	r1, r3
 8000484:	481e      	ldr	r0, [pc, #120]	; (8000500 <KIET_RTC_Init+0xb0>)
 8000486:	f001 fcbb 	bl	8001e00 <iprintf>
	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <KIET_RTC_Init+0xa8>)
 800048c:	6a1b      	ldr	r3, [r3, #32]
 800048e:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <KIET_RTC_Init+0xa8>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6213      	str	r3, [r2, #32]
	uint8_t count = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	71fb      	strb	r3, [r7, #7]

	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 800049a:	e009      	b.n	80004b0 <KIET_RTC_Init+0x60>
		count++;
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	3301      	adds	r3, #1
 80004a0:	71fb      	strb	r3, [r7, #7]
		if (count>100) {
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b64      	cmp	r3, #100	; 0x64
 80004a6:	d903      	bls.n	80004b0 <KIET_RTC_Init+0x60>
			printf("Have a problem for connecting the External Crystal Clock!");
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <KIET_RTC_Init+0xb4>)
 80004aa:	f001 fca9 	bl	8001e00 <iprintf>
			break;
 80004ae:	e005      	b.n	80004bc <KIET_RTC_Init+0x6c>
	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0ef      	beq.n	800049c <KIET_RTC_Init+0x4c>
		} else;
	}

	SET_BIT(RCC->BDCR, 9);
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004c2:	f043 0309 	orr.w	r3, r3, #9
 80004c6:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(RCC->BDCR, 8);
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004ce:	f023 0308 	bic.w	r3, r3, #8
 80004d2:	6213      	str	r3, [r2, #32]
	SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004de:	6213      	str	r3, [r2, #32]
	printf("CHEKC POINT -1: %d\n", RCC->BDCR);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <KIET_RTC_Init+0xa8>)
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <KIET_RTC_Init+0xb0>)
 80004e8:	f001 fc8a 	bl	8001e00 <iprintf>
	 * 10: LSI oscillator clock used as RTC clock
	 * 11: HSE oscillator clock divided by 128 used as RTC clock*/



	KIET_configure_rtc_register();
 80004ec:	f000 f80c 	bl	8000508 <KIET_configure_rtc_register>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40007000 	.word	0x40007000
 8000500:	08002bf8 	.word	0x08002bf8
 8000504:	08002c0c 	.word	0x08002c0c

08000508 <KIET_configure_rtc_register>:



void KIET_configure_rtc_register() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	/* 1. Poll RTOFF, wait until its value goes to ‘1
	 * 2. Set the CNF bit to enter configuration mode
	 * 3. Write to one or more RTC registers
	 * 4. Clear the CNF bit to exit configuration mode
	 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
	printf("CHEKC POINT 0: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)); //OKEE ==> VẤn đ�? ở CLOK chưa được kết nối vào
 800050c:	4b3b      	ldr	r3, [pc, #236]	; (80005fc <KIET_configure_rtc_register+0xf4>)
 800050e:	6a1b      	ldr	r3, [r3, #32]
 8000510:	f003 0302 	and.w	r3, r3, #2
 8000514:	4619      	mov	r1, r3
 8000516:	483a      	ldr	r0, [pc, #232]	; (8000600 <KIET_configure_rtc_register+0xf8>)
 8000518:	f001 fc72 	bl	8001e00 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 800051c:	e002      	b.n	8000524 <KIET_configure_rtc_register+0x1c>
 800051e:	4839      	ldr	r0, [pc, #228]	; (8000604 <KIET_configure_rtc_register+0xfc>)
 8000520:	f001 fcd4 	bl	8001ecc <puts>
 8000524:	4b38      	ldr	r3, [pc, #224]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 0320 	and.w	r3, r3, #32
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f6      	beq.n	800051e <KIET_configure_rtc_register+0x16>
	SET_BIT(RTC->CRL, RTC_CRL_CNF);
 8000530:	4b35      	ldr	r3, [pc, #212]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	4a34      	ldr	r2, [pc, #208]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 1: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800053c:	4b32      	ldr	r3, [pc, #200]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	4619      	mov	r1, r3
 8000546:	4831      	ldr	r0, [pc, #196]	; (800060c <KIET_configure_rtc_register+0x104>)
 8000548:	f001 fc5a 	bl	8001e00 <iprintf>
	/*Begin for writing to RTC Register - Write one or more RTC register*/
	RTC->PRLH = 0U;
 800054c:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 0x7FFFU;
 8000552:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000554:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000558:	60da      	str	r2, [r3, #12]
	printf("CHEKC POINT 2: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	4619      	mov	r1, r3
 8000564:	482a      	ldr	r0, [pc, #168]	; (8000610 <KIET_configure_rtc_register+0x108>)
 8000566:	f001 fc4b 	bl	8001e00 <iprintf>
	RTC->DIVH = 0x0000U;
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
	RTC->DIVL = 0x8000U;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000572:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000576:	615a      	str	r2, [r3, #20]
	printf("CHEKC POINT 3: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f003 0320 	and.w	r3, r3, #32
 8000580:	4619      	mov	r1, r3
 8000582:	4824      	ldr	r0, [pc, #144]	; (8000614 <KIET_configure_rtc_register+0x10c>)
 8000584:	f001 fc3c 	bl	8001e00 <iprintf>
	RTC->CNTH = 0x0000U;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
	RTC->CNTL = 0x0000U;
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000590:	2200      	movs	r2, #0
 8000592:	61da      	str	r2, [r3, #28]

	RTC->ALRH = 0x0000U;
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <KIET_configure_rtc_register+0x100>)
 8000596:	2200      	movs	r2, #0
 8000598:	621a      	str	r2, [r3, #32]
	RTC->ALRL = 0x0004U;
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <KIET_configure_rtc_register+0x100>)
 800059c:	2204      	movs	r2, #4
 800059e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6013      	str	r3, [r2, #0]
	SET_BIT(RTC->CRH, RTC_CRH_OWIE);
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6013      	str	r3, [r2, #0]
	//	SET_BIT(RTC->CRH, RTC_CRH_SECIE);
	/*End of writing to RTC register*/
	CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005be:	f023 0310 	bic.w	r3, r3, #16
 80005c2:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 4: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	4619      	mov	r1, r3
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <KIET_configure_rtc_register+0x110>)
 80005d0:	f001 fc16 	bl	8001e00 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 80005d4:	e007      	b.n	80005e6 <KIET_configure_rtc_register+0xde>
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	4619      	mov	r1, r3
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <KIET_configure_rtc_register+0x114>)
 80005e2:	f001 fc0d 	bl	8001e00 <iprintf>
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <KIET_configure_rtc_register+0x100>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f1      	beq.n	80005d6 <KIET_configure_rtc_register+0xce>
	printf("Done configuration RTC\n");
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <KIET_configure_rtc_register+0x118>)
 80005f4:	f001 fc6a 	bl	8001ecc <puts>

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	08002c48 	.word	0x08002c48
 8000604:	08002c5c 	.word	0x08002c5c
 8000608:	40002800 	.word	0x40002800
 800060c:	08002c70 	.word	0x08002c70
 8000610:	08002c84 	.word	0x08002c84
 8000614:	08002c98 	.word	0x08002c98
 8000618:	08002cac 	.word	0x08002cac
 800061c:	08002cc0 	.word	0x08002cc0
 8000620:	08002ce4 	.word	0x08002ce4

08000624 <KIET_ToggleLED>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
}

void KIET_ToggleLED() {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <KIET_ToggleLED+0x14>)
 800062e:	f000 fca3 	bl	8000f78 <HAL_GPIO_TogglePin>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010c00 	.word	0x40010c00

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_MspInit+0x5c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HAL_MspInit+0x5c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_MspInit+0x5c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x5c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_MspInit+0x5c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x5c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_MspInit+0x60>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_MspInit+0x60>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <HAL_I2C_MspInit+0x74>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d124      	bne.n	8000716 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_I2C_MspInit+0x78>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_I2C_MspInit+0x78>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_I2C_MspInit+0x78>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ea:	2312      	movs	r3, #18
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_I2C_MspInit+0x7c>)
 80006fa:	f000 faa1 	bl	8000c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_I2C_MspInit+0x78>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_I2C_MspInit+0x78>)
 8000704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_I2C_MspInit+0x78>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40005800 	.word	0x40005800
 8000724:	40021000 	.word	0x40021000
 8000728:	40010c00 	.word	0x40010c00

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_SPI_MspInit+0x88>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d12f      	bne.n	80007ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_SPI_MspInit+0x90>)
 8000790:	f000 fa56 	bl	8000c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_SPI_MspInit+0x90>)
 80007a8:	f000 fa4a 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40013000 	.word	0x40013000
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f8f7 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e00a      	b.n	8000836 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000820:	f3af 8000 	nop.w
 8000824:	4601      	mov	r1, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	60ba      	str	r2, [r7, #8]
 800082c:	b2ca      	uxtb	r2, r1
 800082e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3301      	adds	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	429a      	cmp	r2, r3
 800083c:	dbf0      	blt.n	8000820 <_read+0x12>
  }

  return len;
 800083e:	687b      	ldr	r3, [r7, #4]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086e:	605a      	str	r2, [r3, #4]
  return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <_isatty>:

int _isatty(int file)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <_sbrk+0x5c>)
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <_sbrk+0x60>)
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <_sbrk+0x64>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <_sbrk+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d207      	bcs.n	80008e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d8:	f001 fc26 	bl	8002128 <__errno>
 80008dc:	4603      	mov	r3, r0
 80008de:	220c      	movs	r2, #12
 80008e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e009      	b.n	80008fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <_sbrk+0x64>)
 80008f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20005000 	.word	0x20005000
 8000908:	00000400 	.word	0x00000400
 800090c:	20000130 	.word	0x20000130
 8000910:	20000288 	.word	0x20000288

08000914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000920:	f7ff fff8 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000926:	490c      	ldr	r1, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <LoopFillZerobss+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800093c:	4c09      	ldr	r4, [pc, #36]	; (8000964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f001 fbf3 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fc3f 	bl	80001d0 <main>
  bx lr
 8000952:	4770      	bx	lr
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800095c:	08002d64 	.word	0x08002d64
  ldr r2, =_sbss
 8000960:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000964:	20000284 	.word	0x20000284

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_Init+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_Init+0x28>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f92b 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff fe5e 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f935 	bl	8000c26 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f90b 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000134 	.word	0x20000134

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000134 	.word	0x20000134

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff fff0 	bl	8000a1c <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffe0 	bl	8000a1c <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <__NVIC_SetPriorityGrouping>:
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_SetPriority>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff49 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e169      	b.n	8000f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8158 	bne.w	8000f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a9a      	ldr	r2, [pc, #616]	; (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d05e      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c7c:	4a98      	ldr	r2, [pc, #608]	; (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d875      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c82:	4a98      	ldr	r2, [pc, #608]	; (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d058      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c88:	4a96      	ldr	r2, [pc, #600]	; (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d86f      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c8e:	4a96      	ldr	r2, [pc, #600]	; (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d052      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c94:	4a94      	ldr	r2, [pc, #592]	; (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d869      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c9a:	4a94      	ldr	r2, [pc, #592]	; (8000eec <HAL_GPIO_Init+0x2ac>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d04c      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000ca0:	4a92      	ldr	r2, [pc, #584]	; (8000eec <HAL_GPIO_Init+0x2ac>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d863      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000ca6:	4a92      	ldr	r2, [pc, #584]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d046      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000cac:	4a90      	ldr	r2, [pc, #576]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d85d      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d82a      	bhi.n	8000d0c <HAL_GPIO_Init+0xcc>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d859      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <HAL_GPIO_Init+0x80>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d15 	.word	0x08000d15
 8000cc8:	08000d27 	.word	0x08000d27
 8000ccc:	08000d69 	.word	0x08000d69
 8000cd0:	08000d6f 	.word	0x08000d6f
 8000cd4:	08000d6f 	.word	0x08000d6f
 8000cd8:	08000d6f 	.word	0x08000d6f
 8000cdc:	08000d6f 	.word	0x08000d6f
 8000ce0:	08000d6f 	.word	0x08000d6f
 8000ce4:	08000d6f 	.word	0x08000d6f
 8000ce8:	08000d6f 	.word	0x08000d6f
 8000cec:	08000d6f 	.word	0x08000d6f
 8000cf0:	08000d6f 	.word	0x08000d6f
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d6f 	.word	0x08000d6f
 8000cfc:	08000d6f 	.word	0x08000d6f
 8000d00:	08000d6f 	.word	0x08000d6f
 8000d04:	08000d1d 	.word	0x08000d1d
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	4a79      	ldr	r2, [pc, #484]	; (8000ef4 <HAL_GPIO_Init+0x2b4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d12:	e02c      	b.n	8000d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e029      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	3304      	adds	r3, #4
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e024      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e01f      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	330c      	adds	r3, #12
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e01a      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d42:	2304      	movs	r3, #4
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e013      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d50:	2308      	movs	r3, #8
 8000d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	611a      	str	r2, [r3, #16]
          break;
 8000d5a:	e009      	b.n	8000d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	615a      	str	r2, [r3, #20]
          break;
 8000d66:	e003      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          break;
 8000d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2bff      	cmp	r3, #255	; 0xff
 8000d74:	d801      	bhi.n	8000d7a <HAL_GPIO_Init+0x13a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <HAL_GPIO_Init+0x13e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d802      	bhi.n	8000d8c <HAL_GPIO_Init+0x14c>
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x152>
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80b1 	beq.w	8000f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_GPIO_Init+0x2bc>)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a40      	ldr	r2, [pc, #256]	; (8000f00 <HAL_GPIO_Init+0x2c0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3e      	ldr	r2, [pc, #248]	; (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3d      	ldr	r2, [pc, #244]	; (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2bc>)
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	492c      	ldr	r1, [pc, #176]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	608b      	str	r3, [r1, #8]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4928      	ldr	r1, [pc, #160]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	4922      	ldr	r1, [pc, #136]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60cb      	str	r3, [r1, #12]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	491e      	ldr	r1, [pc, #120]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4918      	ldr	r1, [pc, #96]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4914      	ldr	r1, [pc, #80]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d021      	beq.n	8000f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	490e      	ldr	r1, [pc, #56]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e021      	b.n	8000f22 <HAL_GPIO_Init+0x2e2>
 8000ede:	bf00      	nop
 8000ee0:	10320000 	.word	0x10320000
 8000ee4:	10310000 	.word	0x10310000
 8000ee8:	10220000 	.word	0x10220000
 8000eec:	10210000 	.word	0x10210000
 8000ef0:	10120000 	.word	0x10120000
 8000ef4:	10110000 	.word	0x10110000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40011400 	.word	0x40011400
 8000f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_GPIO_Init+0x304>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <HAL_GPIO_Init+0x304>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	3301      	adds	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f47f ae8e 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	372c      	adds	r7, #44	; 0x2c
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43d9      	mvns	r1, r3
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	400b      	ands	r3, r1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	611a      	str	r2, [r3, #16]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e12b      	b.n	8001216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d106      	bne.n	8000fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fb6a 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0201 	bic.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800100e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001010:	f000 fcda 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4a81      	ldr	r2, [pc, #516]	; (8001220 <HAL_I2C_Init+0x274>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d807      	bhi.n	8001030 <HAL_I2C_Init+0x84>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a80      	ldr	r2, [pc, #512]	; (8001224 <HAL_I2C_Init+0x278>)
 8001024:	4293      	cmp	r3, r2
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	e006      	b.n	800103e <HAL_I2C_Init+0x92>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4a7d      	ldr	r2, [pc, #500]	; (8001228 <HAL_I2C_Init+0x27c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	bf94      	ite	ls
 8001038:	2301      	movls	r3, #1
 800103a:	2300      	movhi	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0e7      	b.n	8001216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4a78      	ldr	r2, [pc, #480]	; (800122c <HAL_I2C_Init+0x280>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	430a      	orrs	r2, r1
 8001064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a6a      	ldr	r2, [pc, #424]	; (8001220 <HAL_I2C_Init+0x274>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d802      	bhi.n	8001080 <HAL_I2C_Init+0xd4>
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	e009      	b.n	8001094 <HAL_I2C_Init+0xe8>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4a69      	ldr	r2, [pc, #420]	; (8001230 <HAL_I2C_Init+0x284>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	099b      	lsrs	r3, r3, #6
 8001092:	3301      	adds	r3, #1
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	430b      	orrs	r3, r1
 800109a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	495c      	ldr	r1, [pc, #368]	; (8001220 <HAL_I2C_Init+0x274>)
 80010b0:	428b      	cmp	r3, r1
 80010b2:	d819      	bhi.n	80010e8 <HAL_I2C_Init+0x13c>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1e59      	subs	r1, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010c8:	400b      	ands	r3, r1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <HAL_I2C_Init+0x138>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1e59      	subs	r1, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e2:	e051      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e04f      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d111      	bne.n	8001114 <HAL_I2C_Init+0x168>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	1e58      	subs	r0, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	440b      	add	r3, r1
 80010fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001102:	3301      	adds	r3, #1
 8001104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e012      	b.n	800113a <HAL_I2C_Init+0x18e>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	0099      	lsls	r1, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	fbb0 f3f3 	udiv	r3, r0, r3
 800112a:	3301      	adds	r3, #1
 800112c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_I2C_Init+0x196>
 800113e:	2301      	movs	r3, #1
 8001140:	e022      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10e      	bne.n	8001168 <HAL_I2C_Init+0x1bc>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1e58      	subs	r0, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6859      	ldr	r1, [r3, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	440b      	add	r3, r1
 8001158:	fbb0 f3f3 	udiv	r3, r0, r3
 800115c:	3301      	adds	r3, #1
 800115e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001166:	e00f      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e58      	subs	r0, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6859      	ldr	r1, [r3, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	0099      	lsls	r1, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	6809      	ldr	r1, [r1, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69da      	ldr	r2, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6911      	ldr	r1, [r2, #16]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68d2      	ldr	r2, [r2, #12]
 80011c2:	4311      	orrs	r1, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	000186a0 	.word	0x000186a0
 8001224:	001e847f 	.word	0x001e847f
 8001228:	003d08ff 	.word	0x003d08ff
 800122c:	431bde83 	.word	0x431bde83
 8001230:	10624dd3 	.word	0x10624dd3

08001234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e272      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8087 	beq.w	8001362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	d00c      	beq.n	800127a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001260:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d112      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
 800126c:	4b8c      	ldr	r3, [pc, #560]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d10b      	bne.n	8001292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d06c      	beq.n	8001360 <HAL_RCC_OscConfig+0x12c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d168      	bne.n	8001360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e24c      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x76>
 800129c:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a7f      	ldr	r2, [pc, #508]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e02e      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7a      	ldr	r2, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a77      	ldr	r2, [pc, #476]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e01d      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0xbc>
 80012d6:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a71      	ldr	r2, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a6e      	ldr	r2, [pc, #440]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xd4>
 80012f0:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6a      	ldr	r2, [pc, #424]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a67      	ldr	r2, [pc, #412]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fb84 	bl	8000a1c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fb80 	bl	8000a1c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e200      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0xe4>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fb70 	bl	8000a1c <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fb6c 	bl	8000a1c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1ec      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x10c>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d063      	beq.n	8001436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b08      	cmp	r3, #8
 8001384:	d11c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x18c>
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d116      	bne.n	80013c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e1c0      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4939      	ldr	r1, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	e03a      	b.n	8001436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb25 	bl	8000a1c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fb21 	bl	8000a1c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1a1      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fb04 	bl	8000a1c <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fb00 	bl	8000a1c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e180      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d03a      	beq.n	80014b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d019      	beq.n	800147e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fae4 	bl	8000a1c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fae0 	bl	8000a1c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e160      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 faba 	bl	80019f0 <RCC_Delay>
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff faca 	bl	8000a1c <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148a:	e00f      	b.n	80014ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fac6 	bl	8000a1c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d908      	bls.n	80014ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e146      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	42420000 	.word	0x42420000
 80014a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e9      	bne.n	800148c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a6 	beq.w	8001612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b8b      	ldr	r3, [pc, #556]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10d      	bne.n	80014f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b82      	ldr	r3, [pc, #520]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b7f      	ldr	r3, [pc, #508]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7e      	ldr	r2, [pc, #504]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff fa87 	bl	8000a1c <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7ff fa83 	bl	8000a1c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e103      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b75      	ldr	r3, [pc, #468]	; (80016fc <HAL_RCC_OscConfig+0x4c8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x312>
 8001538:	4b6f      	ldr	r3, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a6e      	ldr	r2, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e02d      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x334>
 800154e:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a69      	ldr	r2, [pc, #420]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	e01c      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x356>
 8001570:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a60      	ldr	r2, [pc, #384]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	e00b      	b.n	80015a2 <HAL_RCC_OscConfig+0x36e>
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a5a      	ldr	r2, [pc, #360]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6213      	str	r3, [r2, #32]
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d015      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa37 	bl	8000a1c <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fa33 	bl	8000a1c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0b1      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ee      	beq.n	80015b2 <HAL_RCC_OscConfig+0x37e>
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa21 	bl	8000a1c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fa1d 	bl	8000a1c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e09b      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ee      	bne.n	80015de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a3b      	ldr	r2, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8087 	beq.w	800172a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d061      	beq.n	80016ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d146      	bne.n	80016be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_RCC_OscConfig+0x4cc>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff f9f1 	bl	8000a1c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff f9ed 	bl	8000a1c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e06d      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4921      	ldr	r1, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a19      	ldr	r1, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	430b      	orrs	r3, r1
 800168a:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x4cc>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff f9c1 	bl	8000a1c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff f9bd 	bl	8000a1c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x46a>
 80016bc:	e035      	b.n	800172a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x4cc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff f9aa 	bl	8000a1c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f9a6 	bl	8000a1c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e026      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x498>
 80016ea:	e01e      	b.n	800172a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e019      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
 8001700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x500>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	429a      	cmp	r2, r3
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0d0      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4965      	ldr	r1, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800179e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d040      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d115      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e073      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06b      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4936      	ldr	r1, [pc, #216]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff f8f8 	bl	8000a1c <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff f8f4 	bl	8000a1c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e053      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d210      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0207 	bic.w	r2, r3, #7
 800186e:	4922      	ldr	r1, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1cc>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1d0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f856 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
 8001900:	08002cfc 	.word	0x08002cfc
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b04      	cmp	r3, #4
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x30>
 8001936:	2b08      	cmp	r3, #8
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x36>
 800193a:	e027      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800193e:	613b      	str	r3, [r7, #16]
      break;
 8001940:	e027      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d010      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	0c5b      	lsrs	r3, r3, #17
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	4a11      	ldr	r2, [pc, #68]	; (80019ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800196e:	fb03 f202 	mul.w	r2, r3, r2
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e004      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	613b      	str	r3, [r7, #16]
      break;
 800198a:	e002      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800198e:	613b      	str	r3, [r7, #16]
      break;
 8001990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001992:	693b      	ldr	r3, [r7, #16]
}
 8001994:	4618      	mov	r0, r3
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	007a1200 	.word	0x007a1200
 80019a8:	08002d14 	.word	0x08002d14
 80019ac:	08002d24 	.word	0x08002d24
 80019b0:	003d0900 	.word	0x003d0900

080019b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff2 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08002d0c 	.word	0x08002d0c

080019f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <RCC_Delay+0x34>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <RCC_Delay+0x38>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0a5b      	lsrs	r3, r3, #9
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a0c:	bf00      	nop
  }
  while (Delay --);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	60fa      	str	r2, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f9      	bne.n	8001a0c <RCC_Delay+0x1c>
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000000 	.word	0x20000000
 8001a28:	10624dd3 	.word	0x10624dd3

08001a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d07d      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	4b4c      	ldr	r3, [pc, #304]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a62:	61d3      	str	r3, [r2, #28]
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d118      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a80:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8c:	f7fe ffc6 	bl	8000a1c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	e008      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a94:	f7fe ffc2 	bl	8000a1c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e06d      	b.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d02e      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d027      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ae6:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d014      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe ff91 	bl	8000a1c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7fe ff8d 	bl	8000a1c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e036      	b.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ee      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4917      	ldr	r1, [pc, #92]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	490b      	ldr	r1, [pc, #44]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	4904      	ldr	r1, [pc, #16]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40007000 	.word	0x40007000
 8001b94:	42420440 	.word	0x42420440

08001b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e076      	b.n	8001c98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bba:	d009      	beq.n	8001bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
 8001bc2:	e005      	b.n	8001bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7fe fd9e 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	ea42 0103 	orr.w	r1, r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	0c1a      	lsrs	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f002 0204 	and.w	r2, r2, #4
 8001c76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <std>:
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8001caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cae:	6083      	str	r3, [r0, #8]
 8001cb0:	8181      	strh	r1, [r0, #12]
 8001cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8001cb4:	81c2      	strh	r2, [r0, #14]
 8001cb6:	6183      	str	r3, [r0, #24]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	2208      	movs	r2, #8
 8001cbc:	305c      	adds	r0, #92	; 0x5c
 8001cbe:	f000 f9e5 	bl	800208c <memset>
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <std+0x38>)
 8001cc4:	6224      	str	r4, [r4, #32]
 8001cc6:	6263      	str	r3, [r4, #36]	; 0x24
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <std+0x3c>)
 8001cca:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <std+0x40>)
 8001cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <std+0x44>)
 8001cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08001edd 	.word	0x08001edd
 8001cdc:	08001eff 	.word	0x08001eff
 8001ce0:	08001f37 	.word	0x08001f37
 8001ce4:	08001f5b 	.word	0x08001f5b

08001ce8 <stdio_exit_handler>:
 8001ce8:	4a02      	ldr	r2, [pc, #8]	; (8001cf4 <stdio_exit_handler+0xc>)
 8001cea:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <stdio_exit_handler+0x10>)
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <stdio_exit_handler+0x14>)
 8001cee:	f000 b869 	b.w	8001dc4 <_fwalk_sglue>
 8001cf2:	bf00      	nop
 8001cf4:	2000000c 	.word	0x2000000c
 8001cf8:	08002a19 	.word	0x08002a19
 8001cfc:	20000018 	.word	0x20000018

08001d00 <cleanup_stdio>:
 8001d00:	6841      	ldr	r1, [r0, #4]
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <cleanup_stdio+0x34>)
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4299      	cmp	r1, r3
 8001d08:	4604      	mov	r4, r0
 8001d0a:	d001      	beq.n	8001d10 <cleanup_stdio+0x10>
 8001d0c:	f000 fe84 	bl	8002a18 <_fflush_r>
 8001d10:	68a1      	ldr	r1, [r4, #8]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <cleanup_stdio+0x38>)
 8001d14:	4299      	cmp	r1, r3
 8001d16:	d002      	beq.n	8001d1e <cleanup_stdio+0x1e>
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f000 fe7d 	bl	8002a18 <_fflush_r>
 8001d1e:	68e1      	ldr	r1, [r4, #12]
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <cleanup_stdio+0x3c>)
 8001d22:	4299      	cmp	r1, r3
 8001d24:	d004      	beq.n	8001d30 <cleanup_stdio+0x30>
 8001d26:	4620      	mov	r0, r4
 8001d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d2c:	f000 be74 	b.w	8002a18 <_fflush_r>
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	bf00      	nop
 8001d34:	20000138 	.word	0x20000138
 8001d38:	200001a0 	.word	0x200001a0
 8001d3c:	20000208 	.word	0x20000208

08001d40 <global_stdio_init.part.0>:
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <global_stdio_init.part.0+0x30>)
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <global_stdio_init.part.0+0x34>)
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <global_stdio_init.part.0+0x38>)
 8001d48:	4620      	mov	r0, r4
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f7ff ffa6 	bl	8001ca0 <std>
 8001d54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2109      	movs	r1, #9
 8001d5c:	f7ff ffa0 	bl	8001ca0 <std>
 8001d60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001d64:	2202      	movs	r2, #2
 8001d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d6a:	2112      	movs	r1, #18
 8001d6c:	f7ff bf98 	b.w	8001ca0 <std>
 8001d70:	20000270 	.word	0x20000270
 8001d74:	20000138 	.word	0x20000138
 8001d78:	08001ce9 	.word	0x08001ce9

08001d7c <__sfp_lock_acquire>:
 8001d7c:	4801      	ldr	r0, [pc, #4]	; (8001d84 <__sfp_lock_acquire+0x8>)
 8001d7e:	f000 b9fd 	b.w	800217c <__retarget_lock_acquire_recursive>
 8001d82:	bf00      	nop
 8001d84:	20000279 	.word	0x20000279

08001d88 <__sfp_lock_release>:
 8001d88:	4801      	ldr	r0, [pc, #4]	; (8001d90 <__sfp_lock_release+0x8>)
 8001d8a:	f000 b9f8 	b.w	800217e <__retarget_lock_release_recursive>
 8001d8e:	bf00      	nop
 8001d90:	20000279 	.word	0x20000279

08001d94 <__sinit>:
 8001d94:	b510      	push	{r4, lr}
 8001d96:	4604      	mov	r4, r0
 8001d98:	f7ff fff0 	bl	8001d7c <__sfp_lock_acquire>
 8001d9c:	6a23      	ldr	r3, [r4, #32]
 8001d9e:	b11b      	cbz	r3, 8001da8 <__sinit+0x14>
 8001da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001da4:	f7ff bff0 	b.w	8001d88 <__sfp_lock_release>
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__sinit+0x28>)
 8001daa:	6223      	str	r3, [r4, #32]
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__sinit+0x2c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f5      	bne.n	8001da0 <__sinit+0xc>
 8001db4:	f7ff ffc4 	bl	8001d40 <global_stdio_init.part.0>
 8001db8:	e7f2      	b.n	8001da0 <__sinit+0xc>
 8001dba:	bf00      	nop
 8001dbc:	08001d01 	.word	0x08001d01
 8001dc0:	20000270 	.word	0x20000270

08001dc4 <_fwalk_sglue>:
 8001dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc8:	4607      	mov	r7, r0
 8001dca:	4688      	mov	r8, r1
 8001dcc:	4614      	mov	r4, r2
 8001dce:	2600      	movs	r6, #0
 8001dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8001dd8:	d505      	bpl.n	8001de6 <_fwalk_sglue+0x22>
 8001dda:	6824      	ldr	r4, [r4, #0]
 8001ddc:	2c00      	cmp	r4, #0
 8001dde:	d1f7      	bne.n	8001dd0 <_fwalk_sglue+0xc>
 8001de0:	4630      	mov	r0, r6
 8001de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001de6:	89ab      	ldrh	r3, [r5, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d907      	bls.n	8001dfc <_fwalk_sglue+0x38>
 8001dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001df0:	3301      	adds	r3, #1
 8001df2:	d003      	beq.n	8001dfc <_fwalk_sglue+0x38>
 8001df4:	4629      	mov	r1, r5
 8001df6:	4638      	mov	r0, r7
 8001df8:	47c0      	blx	r8
 8001dfa:	4306      	orrs	r6, r0
 8001dfc:	3568      	adds	r5, #104	; 0x68
 8001dfe:	e7e9      	b.n	8001dd4 <_fwalk_sglue+0x10>

08001e00 <iprintf>:
 8001e00:	b40f      	push	{r0, r1, r2, r3}
 8001e02:	b507      	push	{r0, r1, r2, lr}
 8001e04:	4906      	ldr	r1, [pc, #24]	; (8001e20 <iprintf+0x20>)
 8001e06:	ab04      	add	r3, sp, #16
 8001e08:	6808      	ldr	r0, [r1, #0]
 8001e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e0e:	6881      	ldr	r1, [r0, #8]
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	f000 fad1 	bl	80023b8 <_vfiprintf_r>
 8001e16:	b003      	add	sp, #12
 8001e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e1c:	b004      	add	sp, #16
 8001e1e:	4770      	bx	lr
 8001e20:	20000064 	.word	0x20000064

08001e24 <_puts_r>:
 8001e24:	6a03      	ldr	r3, [r0, #32]
 8001e26:	b570      	push	{r4, r5, r6, lr}
 8001e28:	4605      	mov	r5, r0
 8001e2a:	460e      	mov	r6, r1
 8001e2c:	6884      	ldr	r4, [r0, #8]
 8001e2e:	b90b      	cbnz	r3, 8001e34 <_puts_r+0x10>
 8001e30:	f7ff ffb0 	bl	8001d94 <__sinit>
 8001e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e36:	07db      	lsls	r3, r3, #31
 8001e38:	d405      	bmi.n	8001e46 <_puts_r+0x22>
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	0598      	lsls	r0, r3, #22
 8001e3e:	d402      	bmi.n	8001e46 <_puts_r+0x22>
 8001e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e42:	f000 f99b 	bl	800217c <__retarget_lock_acquire_recursive>
 8001e46:	89a3      	ldrh	r3, [r4, #12]
 8001e48:	0719      	lsls	r1, r3, #28
 8001e4a:	d513      	bpl.n	8001e74 <_puts_r+0x50>
 8001e4c:	6923      	ldr	r3, [r4, #16]
 8001e4e:	b18b      	cbz	r3, 8001e74 <_puts_r+0x50>
 8001e50:	3e01      	subs	r6, #1
 8001e52:	68a3      	ldr	r3, [r4, #8]
 8001e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60a3      	str	r3, [r4, #8]
 8001e5c:	b9e9      	cbnz	r1, 8001e9a <_puts_r+0x76>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da2e      	bge.n	8001ec0 <_puts_r+0x9c>
 8001e62:	4622      	mov	r2, r4
 8001e64:	210a      	movs	r1, #10
 8001e66:	4628      	mov	r0, r5
 8001e68:	f000 f87b 	bl	8001f62 <__swbuf_r>
 8001e6c:	3001      	adds	r0, #1
 8001e6e:	d007      	beq.n	8001e80 <_puts_r+0x5c>
 8001e70:	250a      	movs	r5, #10
 8001e72:	e007      	b.n	8001e84 <_puts_r+0x60>
 8001e74:	4621      	mov	r1, r4
 8001e76:	4628      	mov	r0, r5
 8001e78:	f000 f8b0 	bl	8001fdc <__swsetup_r>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d0e7      	beq.n	8001e50 <_puts_r+0x2c>
 8001e80:	f04f 35ff 	mov.w	r5, #4294967295
 8001e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e86:	07da      	lsls	r2, r3, #31
 8001e88:	d405      	bmi.n	8001e96 <_puts_r+0x72>
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	059b      	lsls	r3, r3, #22
 8001e8e:	d402      	bmi.n	8001e96 <_puts_r+0x72>
 8001e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e92:	f000 f974 	bl	800217e <__retarget_lock_release_recursive>
 8001e96:	4628      	mov	r0, r5
 8001e98:	bd70      	pop	{r4, r5, r6, pc}
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da04      	bge.n	8001ea8 <_puts_r+0x84>
 8001e9e:	69a2      	ldr	r2, [r4, #24]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dc06      	bgt.n	8001eb2 <_puts_r+0x8e>
 8001ea4:	290a      	cmp	r1, #10
 8001ea6:	d004      	beq.n	8001eb2 <_puts_r+0x8e>
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	6022      	str	r2, [r4, #0]
 8001eae:	7019      	strb	r1, [r3, #0]
 8001eb0:	e7cf      	b.n	8001e52 <_puts_r+0x2e>
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f000 f854 	bl	8001f62 <__swbuf_r>
 8001eba:	3001      	adds	r0, #1
 8001ebc:	d1c9      	bne.n	8001e52 <_puts_r+0x2e>
 8001ebe:	e7df      	b.n	8001e80 <_puts_r+0x5c>
 8001ec0:	250a      	movs	r5, #10
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	6022      	str	r2, [r4, #0]
 8001ec8:	701d      	strb	r5, [r3, #0]
 8001eca:	e7db      	b.n	8001e84 <_puts_r+0x60>

08001ecc <puts>:
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <puts+0xc>)
 8001ece:	4601      	mov	r1, r0
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f7ff bfa7 	b.w	8001e24 <_puts_r>
 8001ed6:	bf00      	nop
 8001ed8:	20000064 	.word	0x20000064

08001edc <__sread>:
 8001edc:	b510      	push	{r4, lr}
 8001ede:	460c      	mov	r4, r1
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	f000 f8fc 	bl	80020e0 <_read_r>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	bfab      	itete	ge
 8001eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eee:	89a3      	ldrhlt	r3, [r4, #12]
 8001ef0:	181b      	addge	r3, r3, r0
 8001ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ef6:	bfac      	ite	ge
 8001ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001efa:	81a3      	strhlt	r3, [r4, #12]
 8001efc:	bd10      	pop	{r4, pc}

08001efe <__swrite>:
 8001efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f02:	461f      	mov	r7, r3
 8001f04:	898b      	ldrh	r3, [r1, #12]
 8001f06:	4605      	mov	r5, r0
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4616      	mov	r6, r2
 8001f0e:	d505      	bpl.n	8001f1c <__swrite+0x1e>
 8001f10:	2302      	movs	r3, #2
 8001f12:	2200      	movs	r2, #0
 8001f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f18:	f000 f8d0 	bl	80020bc <_lseek_r>
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	4632      	mov	r2, r6
 8001f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f24:	81a3      	strh	r3, [r4, #12]
 8001f26:	4628      	mov	r0, r5
 8001f28:	463b      	mov	r3, r7
 8001f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	f000 b8e7 	b.w	8002104 <_write_r>

08001f36 <__sseek>:
 8001f36:	b510      	push	{r4, lr}
 8001f38:	460c      	mov	r4, r1
 8001f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3e:	f000 f8bd 	bl	80020bc <_lseek_r>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	bf15      	itete	ne
 8001f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f52:	81a3      	strheq	r3, [r4, #12]
 8001f54:	bf18      	it	ne
 8001f56:	81a3      	strhne	r3, [r4, #12]
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <__sclose>:
 8001f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5e:	f000 b89d 	b.w	800209c <_close_r>

08001f62 <__swbuf_r>:
 8001f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f64:	460e      	mov	r6, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	4605      	mov	r5, r0
 8001f6a:	b118      	cbz	r0, 8001f74 <__swbuf_r+0x12>
 8001f6c:	6a03      	ldr	r3, [r0, #32]
 8001f6e:	b90b      	cbnz	r3, 8001f74 <__swbuf_r+0x12>
 8001f70:	f7ff ff10 	bl	8001d94 <__sinit>
 8001f74:	69a3      	ldr	r3, [r4, #24]
 8001f76:	60a3      	str	r3, [r4, #8]
 8001f78:	89a3      	ldrh	r3, [r4, #12]
 8001f7a:	071a      	lsls	r2, r3, #28
 8001f7c:	d525      	bpl.n	8001fca <__swbuf_r+0x68>
 8001f7e:	6923      	ldr	r3, [r4, #16]
 8001f80:	b31b      	cbz	r3, 8001fca <__swbuf_r+0x68>
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	6922      	ldr	r2, [r4, #16]
 8001f86:	b2f6      	uxtb	r6, r6
 8001f88:	1a98      	subs	r0, r3, r2
 8001f8a:	6963      	ldr	r3, [r4, #20]
 8001f8c:	4637      	mov	r7, r6
 8001f8e:	4283      	cmp	r3, r0
 8001f90:	dc04      	bgt.n	8001f9c <__swbuf_r+0x3a>
 8001f92:	4621      	mov	r1, r4
 8001f94:	4628      	mov	r0, r5
 8001f96:	f000 fd3f 	bl	8002a18 <_fflush_r>
 8001f9a:	b9e0      	cbnz	r0, 8001fd6 <__swbuf_r+0x74>
 8001f9c:	68a3      	ldr	r3, [r4, #8]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60a3      	str	r3, [r4, #8]
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	6022      	str	r2, [r4, #0]
 8001fa8:	701e      	strb	r6, [r3, #0]
 8001faa:	6962      	ldr	r2, [r4, #20]
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d004      	beq.n	8001fbc <__swbuf_r+0x5a>
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	07db      	lsls	r3, r3, #31
 8001fb6:	d506      	bpl.n	8001fc6 <__swbuf_r+0x64>
 8001fb8:	2e0a      	cmp	r6, #10
 8001fba:	d104      	bne.n	8001fc6 <__swbuf_r+0x64>
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	f000 fd2a 	bl	8002a18 <_fflush_r>
 8001fc4:	b938      	cbnz	r0, 8001fd6 <__swbuf_r+0x74>
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fca:	4621      	mov	r1, r4
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f000 f805 	bl	8001fdc <__swsetup_r>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d0d5      	beq.n	8001f82 <__swbuf_r+0x20>
 8001fd6:	f04f 37ff 	mov.w	r7, #4294967295
 8001fda:	e7f4      	b.n	8001fc6 <__swbuf_r+0x64>

08001fdc <__swsetup_r>:
 8001fdc:	b538      	push	{r3, r4, r5, lr}
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <__swsetup_r+0xac>)
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	b118      	cbz	r0, 8001ff0 <__swsetup_r+0x14>
 8001fe8:	6a03      	ldr	r3, [r0, #32]
 8001fea:	b90b      	cbnz	r3, 8001ff0 <__swsetup_r+0x14>
 8001fec:	f7ff fed2 	bl	8001d94 <__sinit>
 8001ff0:	89a3      	ldrh	r3, [r4, #12]
 8001ff2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ff6:	0718      	lsls	r0, r3, #28
 8001ff8:	d422      	bmi.n	8002040 <__swsetup_r+0x64>
 8001ffa:	06d9      	lsls	r1, r3, #27
 8001ffc:	d407      	bmi.n	800200e <__swsetup_r+0x32>
 8001ffe:	2309      	movs	r3, #9
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002006:	f04f 30ff 	mov.w	r0, #4294967295
 800200a:	81a3      	strh	r3, [r4, #12]
 800200c:	e034      	b.n	8002078 <__swsetup_r+0x9c>
 800200e:	0758      	lsls	r0, r3, #29
 8002010:	d512      	bpl.n	8002038 <__swsetup_r+0x5c>
 8002012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002014:	b141      	cbz	r1, 8002028 <__swsetup_r+0x4c>
 8002016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800201a:	4299      	cmp	r1, r3
 800201c:	d002      	beq.n	8002024 <__swsetup_r+0x48>
 800201e:	4628      	mov	r0, r5
 8002020:	f000 f8ae 	bl	8002180 <_free_r>
 8002024:	2300      	movs	r3, #0
 8002026:	6363      	str	r3, [r4, #52]	; 0x34
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	2300      	movs	r3, #0
 8002032:	6063      	str	r3, [r4, #4]
 8002034:	6923      	ldr	r3, [r4, #16]
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	89a3      	ldrh	r3, [r4, #12]
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	81a3      	strh	r3, [r4, #12]
 8002040:	6923      	ldr	r3, [r4, #16]
 8002042:	b94b      	cbnz	r3, 8002058 <__swsetup_r+0x7c>
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800204a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800204e:	d003      	beq.n	8002058 <__swsetup_r+0x7c>
 8002050:	4621      	mov	r1, r4
 8002052:	4628      	mov	r0, r5
 8002054:	f000 fd2d 	bl	8002ab2 <__smakebuf_r>
 8002058:	89a0      	ldrh	r0, [r4, #12]
 800205a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800205e:	f010 0301 	ands.w	r3, r0, #1
 8002062:	d00a      	beq.n	800207a <__swsetup_r+0x9e>
 8002064:	2300      	movs	r3, #0
 8002066:	60a3      	str	r3, [r4, #8]
 8002068:	6963      	ldr	r3, [r4, #20]
 800206a:	425b      	negs	r3, r3
 800206c:	61a3      	str	r3, [r4, #24]
 800206e:	6923      	ldr	r3, [r4, #16]
 8002070:	b943      	cbnz	r3, 8002084 <__swsetup_r+0xa8>
 8002072:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002076:	d1c4      	bne.n	8002002 <__swsetup_r+0x26>
 8002078:	bd38      	pop	{r3, r4, r5, pc}
 800207a:	0781      	lsls	r1, r0, #30
 800207c:	bf58      	it	pl
 800207e:	6963      	ldrpl	r3, [r4, #20]
 8002080:	60a3      	str	r3, [r4, #8]
 8002082:	e7f4      	b.n	800206e <__swsetup_r+0x92>
 8002084:	2000      	movs	r0, #0
 8002086:	e7f7      	b.n	8002078 <__swsetup_r+0x9c>
 8002088:	20000064 	.word	0x20000064

0800208c <memset>:
 800208c:	4603      	mov	r3, r0
 800208e:	4402      	add	r2, r0
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <memset+0xa>
 8002094:	4770      	bx	lr
 8002096:	f803 1b01 	strb.w	r1, [r3], #1
 800209a:	e7f9      	b.n	8002090 <memset+0x4>

0800209c <_close_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	2300      	movs	r3, #0
 80020a0:	4d05      	ldr	r5, [pc, #20]	; (80020b8 <_close_r+0x1c>)
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	f7fe fbce 	bl	8000848 <_close>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_close_r+0x1a>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_close_r+0x1a>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	20000274 	.word	0x20000274

080020bc <_lseek_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	2200      	movs	r2, #0
 80020c6:	4d05      	ldr	r5, [pc, #20]	; (80020dc <_lseek_r+0x20>)
 80020c8:	602a      	str	r2, [r5, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7fe fbe0 	bl	8000890 <_lseek>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d102      	bne.n	80020da <_lseek_r+0x1e>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	b103      	cbz	r3, 80020da <_lseek_r+0x1e>
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	20000274 	.word	0x20000274

080020e0 <_read_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	4d05      	ldr	r5, [pc, #20]	; (8002100 <_read_r+0x20>)
 80020ec:	602a      	str	r2, [r5, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7fe fb8d 	bl	800080e <_read>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_read_r+0x1e>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_read_r+0x1e>
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	20000274 	.word	0x20000274

08002104 <_write_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	2200      	movs	r2, #0
 800210e:	4d05      	ldr	r5, [pc, #20]	; (8002124 <_write_r+0x20>)
 8002110:	602a      	str	r2, [r5, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f7fe f840 	bl	8000198 <_write>
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	d102      	bne.n	8002122 <_write_r+0x1e>
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	b103      	cbz	r3, 8002122 <_write_r+0x1e>
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	20000274 	.word	0x20000274

08002128 <__errno>:
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <__errno+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000064 	.word	0x20000064

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	2600      	movs	r6, #0
 8002138:	4d0c      	ldr	r5, [pc, #48]	; (800216c <__libc_init_array+0x38>)
 800213a:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <__libc_init_array+0x3c>)
 800213c:	1b64      	subs	r4, r4, r5
 800213e:	10a4      	asrs	r4, r4, #2
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	f000 fd32 	bl	8002bac <_init>
 8002148:	2600      	movs	r6, #0
 800214a:	4d0a      	ldr	r5, [pc, #40]	; (8002174 <__libc_init_array+0x40>)
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <__libc_init_array+0x44>)
 800214e:	1b64      	subs	r4, r4, r5
 8002150:	10a4      	asrs	r4, r4, #2
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	08002d5c 	.word	0x08002d5c
 8002170:	08002d5c 	.word	0x08002d5c
 8002174:	08002d5c 	.word	0x08002d5c
 8002178:	08002d60 	.word	0x08002d60

0800217c <__retarget_lock_acquire_recursive>:
 800217c:	4770      	bx	lr

0800217e <__retarget_lock_release_recursive>:
 800217e:	4770      	bx	lr

08002180 <_free_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4605      	mov	r5, r0
 8002184:	2900      	cmp	r1, #0
 8002186:	d040      	beq.n	800220a <_free_r+0x8a>
 8002188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800218c:	1f0c      	subs	r4, r1, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfb8      	it	lt
 8002192:	18e4      	addlt	r4, r4, r3
 8002194:	f000 f8dc 	bl	8002350 <__malloc_lock>
 8002198:	4a1c      	ldr	r2, [pc, #112]	; (800220c <_free_r+0x8c>)
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	b933      	cbnz	r3, 80021ac <_free_r+0x2c>
 800219e:	6063      	str	r3, [r4, #4]
 80021a0:	6014      	str	r4, [r2, #0]
 80021a2:	4628      	mov	r0, r5
 80021a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021a8:	f000 b8d8 	b.w	800235c <__malloc_unlock>
 80021ac:	42a3      	cmp	r3, r4
 80021ae:	d908      	bls.n	80021c2 <_free_r+0x42>
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	1821      	adds	r1, r4, r0
 80021b4:	428b      	cmp	r3, r1
 80021b6:	bf01      	itttt	eq
 80021b8:	6819      	ldreq	r1, [r3, #0]
 80021ba:	685b      	ldreq	r3, [r3, #4]
 80021bc:	1809      	addeq	r1, r1, r0
 80021be:	6021      	streq	r1, [r4, #0]
 80021c0:	e7ed      	b.n	800219e <_free_r+0x1e>
 80021c2:	461a      	mov	r2, r3
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	b10b      	cbz	r3, 80021cc <_free_r+0x4c>
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	d9fa      	bls.n	80021c2 <_free_r+0x42>
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	1850      	adds	r0, r2, r1
 80021d0:	42a0      	cmp	r0, r4
 80021d2:	d10b      	bne.n	80021ec <_free_r+0x6c>
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	4401      	add	r1, r0
 80021d8:	1850      	adds	r0, r2, r1
 80021da:	4283      	cmp	r3, r0
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	d1e0      	bne.n	80021a2 <_free_r+0x22>
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4408      	add	r0, r1
 80021e6:	6010      	str	r0, [r2, #0]
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	e7da      	b.n	80021a2 <_free_r+0x22>
 80021ec:	d902      	bls.n	80021f4 <_free_r+0x74>
 80021ee:	230c      	movs	r3, #12
 80021f0:	602b      	str	r3, [r5, #0]
 80021f2:	e7d6      	b.n	80021a2 <_free_r+0x22>
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	1821      	adds	r1, r4, r0
 80021f8:	428b      	cmp	r3, r1
 80021fa:	bf01      	itttt	eq
 80021fc:	6819      	ldreq	r1, [r3, #0]
 80021fe:	685b      	ldreq	r3, [r3, #4]
 8002200:	1809      	addeq	r1, r1, r0
 8002202:	6021      	streq	r1, [r4, #0]
 8002204:	6063      	str	r3, [r4, #4]
 8002206:	6054      	str	r4, [r2, #4]
 8002208:	e7cb      	b.n	80021a2 <_free_r+0x22>
 800220a:	bd38      	pop	{r3, r4, r5, pc}
 800220c:	2000027c 	.word	0x2000027c

08002210 <sbrk_aligned>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	4e0e      	ldr	r6, [pc, #56]	; (800224c <sbrk_aligned+0x3c>)
 8002214:	460c      	mov	r4, r1
 8002216:	6831      	ldr	r1, [r6, #0]
 8002218:	4605      	mov	r5, r0
 800221a:	b911      	cbnz	r1, 8002222 <sbrk_aligned+0x12>
 800221c:	f000 fca8 	bl	8002b70 <_sbrk_r>
 8002220:	6030      	str	r0, [r6, #0]
 8002222:	4621      	mov	r1, r4
 8002224:	4628      	mov	r0, r5
 8002226:	f000 fca3 	bl	8002b70 <_sbrk_r>
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	d00a      	beq.n	8002244 <sbrk_aligned+0x34>
 800222e:	1cc4      	adds	r4, r0, #3
 8002230:	f024 0403 	bic.w	r4, r4, #3
 8002234:	42a0      	cmp	r0, r4
 8002236:	d007      	beq.n	8002248 <sbrk_aligned+0x38>
 8002238:	1a21      	subs	r1, r4, r0
 800223a:	4628      	mov	r0, r5
 800223c:	f000 fc98 	bl	8002b70 <_sbrk_r>
 8002240:	3001      	adds	r0, #1
 8002242:	d101      	bne.n	8002248 <sbrk_aligned+0x38>
 8002244:	f04f 34ff 	mov.w	r4, #4294967295
 8002248:	4620      	mov	r0, r4
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	20000280 	.word	0x20000280

08002250 <_malloc_r>:
 8002250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002254:	1ccd      	adds	r5, r1, #3
 8002256:	f025 0503 	bic.w	r5, r5, #3
 800225a:	3508      	adds	r5, #8
 800225c:	2d0c      	cmp	r5, #12
 800225e:	bf38      	it	cc
 8002260:	250c      	movcc	r5, #12
 8002262:	2d00      	cmp	r5, #0
 8002264:	4607      	mov	r7, r0
 8002266:	db01      	blt.n	800226c <_malloc_r+0x1c>
 8002268:	42a9      	cmp	r1, r5
 800226a:	d905      	bls.n	8002278 <_malloc_r+0x28>
 800226c:	230c      	movs	r3, #12
 800226e:	2600      	movs	r6, #0
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4630      	mov	r0, r6
 8002274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002278:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800234c <_malloc_r+0xfc>
 800227c:	f000 f868 	bl	8002350 <__malloc_lock>
 8002280:	f8d8 3000 	ldr.w	r3, [r8]
 8002284:	461c      	mov	r4, r3
 8002286:	bb5c      	cbnz	r4, 80022e0 <_malloc_r+0x90>
 8002288:	4629      	mov	r1, r5
 800228a:	4638      	mov	r0, r7
 800228c:	f7ff ffc0 	bl	8002210 <sbrk_aligned>
 8002290:	1c43      	adds	r3, r0, #1
 8002292:	4604      	mov	r4, r0
 8002294:	d155      	bne.n	8002342 <_malloc_r+0xf2>
 8002296:	f8d8 4000 	ldr.w	r4, [r8]
 800229a:	4626      	mov	r6, r4
 800229c:	2e00      	cmp	r6, #0
 800229e:	d145      	bne.n	800232c <_malloc_r+0xdc>
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	d048      	beq.n	8002336 <_malloc_r+0xe6>
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	4631      	mov	r1, r6
 80022a8:	4638      	mov	r0, r7
 80022aa:	eb04 0903 	add.w	r9, r4, r3
 80022ae:	f000 fc5f 	bl	8002b70 <_sbrk_r>
 80022b2:	4581      	cmp	r9, r0
 80022b4:	d13f      	bne.n	8002336 <_malloc_r+0xe6>
 80022b6:	6821      	ldr	r1, [r4, #0]
 80022b8:	4638      	mov	r0, r7
 80022ba:	1a6d      	subs	r5, r5, r1
 80022bc:	4629      	mov	r1, r5
 80022be:	f7ff ffa7 	bl	8002210 <sbrk_aligned>
 80022c2:	3001      	adds	r0, #1
 80022c4:	d037      	beq.n	8002336 <_malloc_r+0xe6>
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	442b      	add	r3, r5
 80022ca:	6023      	str	r3, [r4, #0]
 80022cc:	f8d8 3000 	ldr.w	r3, [r8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d038      	beq.n	8002346 <_malloc_r+0xf6>
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	42a2      	cmp	r2, r4
 80022d8:	d12b      	bne.n	8002332 <_malloc_r+0xe2>
 80022da:	2200      	movs	r2, #0
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	e00f      	b.n	8002300 <_malloc_r+0xb0>
 80022e0:	6822      	ldr	r2, [r4, #0]
 80022e2:	1b52      	subs	r2, r2, r5
 80022e4:	d41f      	bmi.n	8002326 <_malloc_r+0xd6>
 80022e6:	2a0b      	cmp	r2, #11
 80022e8:	d917      	bls.n	800231a <_malloc_r+0xca>
 80022ea:	1961      	adds	r1, r4, r5
 80022ec:	42a3      	cmp	r3, r4
 80022ee:	6025      	str	r5, [r4, #0]
 80022f0:	bf18      	it	ne
 80022f2:	6059      	strne	r1, [r3, #4]
 80022f4:	6863      	ldr	r3, [r4, #4]
 80022f6:	bf08      	it	eq
 80022f8:	f8c8 1000 	streq.w	r1, [r8]
 80022fc:	5162      	str	r2, [r4, r5]
 80022fe:	604b      	str	r3, [r1, #4]
 8002300:	4638      	mov	r0, r7
 8002302:	f104 060b 	add.w	r6, r4, #11
 8002306:	f000 f829 	bl	800235c <__malloc_unlock>
 800230a:	f026 0607 	bic.w	r6, r6, #7
 800230e:	1d23      	adds	r3, r4, #4
 8002310:	1af2      	subs	r2, r6, r3
 8002312:	d0ae      	beq.n	8002272 <_malloc_r+0x22>
 8002314:	1b9b      	subs	r3, r3, r6
 8002316:	50a3      	str	r3, [r4, r2]
 8002318:	e7ab      	b.n	8002272 <_malloc_r+0x22>
 800231a:	42a3      	cmp	r3, r4
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	d1dd      	bne.n	80022dc <_malloc_r+0x8c>
 8002320:	f8c8 2000 	str.w	r2, [r8]
 8002324:	e7ec      	b.n	8002300 <_malloc_r+0xb0>
 8002326:	4623      	mov	r3, r4
 8002328:	6864      	ldr	r4, [r4, #4]
 800232a:	e7ac      	b.n	8002286 <_malloc_r+0x36>
 800232c:	4634      	mov	r4, r6
 800232e:	6876      	ldr	r6, [r6, #4]
 8002330:	e7b4      	b.n	800229c <_malloc_r+0x4c>
 8002332:	4613      	mov	r3, r2
 8002334:	e7cc      	b.n	80022d0 <_malloc_r+0x80>
 8002336:	230c      	movs	r3, #12
 8002338:	4638      	mov	r0, r7
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	f000 f80e 	bl	800235c <__malloc_unlock>
 8002340:	e797      	b.n	8002272 <_malloc_r+0x22>
 8002342:	6025      	str	r5, [r4, #0]
 8002344:	e7dc      	b.n	8002300 <_malloc_r+0xb0>
 8002346:	605b      	str	r3, [r3, #4]
 8002348:	deff      	udf	#255	; 0xff
 800234a:	bf00      	nop
 800234c:	2000027c 	.word	0x2000027c

08002350 <__malloc_lock>:
 8002350:	4801      	ldr	r0, [pc, #4]	; (8002358 <__malloc_lock+0x8>)
 8002352:	f7ff bf13 	b.w	800217c <__retarget_lock_acquire_recursive>
 8002356:	bf00      	nop
 8002358:	20000278 	.word	0x20000278

0800235c <__malloc_unlock>:
 800235c:	4801      	ldr	r0, [pc, #4]	; (8002364 <__malloc_unlock+0x8>)
 800235e:	f7ff bf0e 	b.w	800217e <__retarget_lock_release_recursive>
 8002362:	bf00      	nop
 8002364:	20000278 	.word	0x20000278

08002368 <__sfputc_r>:
 8002368:	6893      	ldr	r3, [r2, #8]
 800236a:	b410      	push	{r4}
 800236c:	3b01      	subs	r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	6093      	str	r3, [r2, #8]
 8002372:	da07      	bge.n	8002384 <__sfputc_r+0x1c>
 8002374:	6994      	ldr	r4, [r2, #24]
 8002376:	42a3      	cmp	r3, r4
 8002378:	db01      	blt.n	800237e <__sfputc_r+0x16>
 800237a:	290a      	cmp	r1, #10
 800237c:	d102      	bne.n	8002384 <__sfputc_r+0x1c>
 800237e:	bc10      	pop	{r4}
 8002380:	f7ff bdef 	b.w	8001f62 <__swbuf_r>
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	1c58      	adds	r0, r3, #1
 8002388:	6010      	str	r0, [r2, #0]
 800238a:	7019      	strb	r1, [r3, #0]
 800238c:	4608      	mov	r0, r1
 800238e:	bc10      	pop	{r4}
 8002390:	4770      	bx	lr

08002392 <__sfputs_r>:
 8002392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002394:	4606      	mov	r6, r0
 8002396:	460f      	mov	r7, r1
 8002398:	4614      	mov	r4, r2
 800239a:	18d5      	adds	r5, r2, r3
 800239c:	42ac      	cmp	r4, r5
 800239e:	d101      	bne.n	80023a4 <__sfputs_r+0x12>
 80023a0:	2000      	movs	r0, #0
 80023a2:	e007      	b.n	80023b4 <__sfputs_r+0x22>
 80023a4:	463a      	mov	r2, r7
 80023a6:	4630      	mov	r0, r6
 80023a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ac:	f7ff ffdc 	bl	8002368 <__sfputc_r>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d1f3      	bne.n	800239c <__sfputs_r+0xa>
 80023b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023b8 <_vfiprintf_r>:
 80023b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023bc:	460d      	mov	r5, r1
 80023be:	4614      	mov	r4, r2
 80023c0:	4698      	mov	r8, r3
 80023c2:	4606      	mov	r6, r0
 80023c4:	b09d      	sub	sp, #116	; 0x74
 80023c6:	b118      	cbz	r0, 80023d0 <_vfiprintf_r+0x18>
 80023c8:	6a03      	ldr	r3, [r0, #32]
 80023ca:	b90b      	cbnz	r3, 80023d0 <_vfiprintf_r+0x18>
 80023cc:	f7ff fce2 	bl	8001d94 <__sinit>
 80023d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023d2:	07d9      	lsls	r1, r3, #31
 80023d4:	d405      	bmi.n	80023e2 <_vfiprintf_r+0x2a>
 80023d6:	89ab      	ldrh	r3, [r5, #12]
 80023d8:	059a      	lsls	r2, r3, #22
 80023da:	d402      	bmi.n	80023e2 <_vfiprintf_r+0x2a>
 80023dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023de:	f7ff fecd 	bl	800217c <__retarget_lock_acquire_recursive>
 80023e2:	89ab      	ldrh	r3, [r5, #12]
 80023e4:	071b      	lsls	r3, r3, #28
 80023e6:	d501      	bpl.n	80023ec <_vfiprintf_r+0x34>
 80023e8:	692b      	ldr	r3, [r5, #16]
 80023ea:	b99b      	cbnz	r3, 8002414 <_vfiprintf_r+0x5c>
 80023ec:	4629      	mov	r1, r5
 80023ee:	4630      	mov	r0, r6
 80023f0:	f7ff fdf4 	bl	8001fdc <__swsetup_r>
 80023f4:	b170      	cbz	r0, 8002414 <_vfiprintf_r+0x5c>
 80023f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023f8:	07dc      	lsls	r4, r3, #31
 80023fa:	d504      	bpl.n	8002406 <_vfiprintf_r+0x4e>
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	b01d      	add	sp, #116	; 0x74
 8002402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002406:	89ab      	ldrh	r3, [r5, #12]
 8002408:	0598      	lsls	r0, r3, #22
 800240a:	d4f7      	bmi.n	80023fc <_vfiprintf_r+0x44>
 800240c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800240e:	f7ff feb6 	bl	800217e <__retarget_lock_release_recursive>
 8002412:	e7f3      	b.n	80023fc <_vfiprintf_r+0x44>
 8002414:	2300      	movs	r3, #0
 8002416:	9309      	str	r3, [sp, #36]	; 0x24
 8002418:	2320      	movs	r3, #32
 800241a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800241e:	2330      	movs	r3, #48	; 0x30
 8002420:	f04f 0901 	mov.w	r9, #1
 8002424:	f8cd 800c 	str.w	r8, [sp, #12]
 8002428:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80025d8 <_vfiprintf_r+0x220>
 800242c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002430:	4623      	mov	r3, r4
 8002432:	469a      	mov	sl, r3
 8002434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002438:	b10a      	cbz	r2, 800243e <_vfiprintf_r+0x86>
 800243a:	2a25      	cmp	r2, #37	; 0x25
 800243c:	d1f9      	bne.n	8002432 <_vfiprintf_r+0x7a>
 800243e:	ebba 0b04 	subs.w	fp, sl, r4
 8002442:	d00b      	beq.n	800245c <_vfiprintf_r+0xa4>
 8002444:	465b      	mov	r3, fp
 8002446:	4622      	mov	r2, r4
 8002448:	4629      	mov	r1, r5
 800244a:	4630      	mov	r0, r6
 800244c:	f7ff ffa1 	bl	8002392 <__sfputs_r>
 8002450:	3001      	adds	r0, #1
 8002452:	f000 80a9 	beq.w	80025a8 <_vfiprintf_r+0x1f0>
 8002456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002458:	445a      	add	r2, fp
 800245a:	9209      	str	r2, [sp, #36]	; 0x24
 800245c:	f89a 3000 	ldrb.w	r3, [sl]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a1 	beq.w	80025a8 <_vfiprintf_r+0x1f0>
 8002466:	2300      	movs	r3, #0
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002470:	f10a 0a01 	add.w	sl, sl, #1
 8002474:	9304      	str	r3, [sp, #16]
 8002476:	9307      	str	r3, [sp, #28]
 8002478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800247c:	931a      	str	r3, [sp, #104]	; 0x68
 800247e:	4654      	mov	r4, sl
 8002480:	2205      	movs	r2, #5
 8002482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002486:	4854      	ldr	r0, [pc, #336]	; (80025d8 <_vfiprintf_r+0x220>)
 8002488:	f000 fb82 	bl	8002b90 <memchr>
 800248c:	9a04      	ldr	r2, [sp, #16]
 800248e:	b9d8      	cbnz	r0, 80024c8 <_vfiprintf_r+0x110>
 8002490:	06d1      	lsls	r1, r2, #27
 8002492:	bf44      	itt	mi
 8002494:	2320      	movmi	r3, #32
 8002496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800249a:	0713      	lsls	r3, r2, #28
 800249c:	bf44      	itt	mi
 800249e:	232b      	movmi	r3, #43	; 0x2b
 80024a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024a4:	f89a 3000 	ldrb.w	r3, [sl]
 80024a8:	2b2a      	cmp	r3, #42	; 0x2a
 80024aa:	d015      	beq.n	80024d8 <_vfiprintf_r+0x120>
 80024ac:	4654      	mov	r4, sl
 80024ae:	2000      	movs	r0, #0
 80024b0:	f04f 0c0a 	mov.w	ip, #10
 80024b4:	9a07      	ldr	r2, [sp, #28]
 80024b6:	4621      	mov	r1, r4
 80024b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024bc:	3b30      	subs	r3, #48	; 0x30
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d94d      	bls.n	800255e <_vfiprintf_r+0x1a6>
 80024c2:	b1b0      	cbz	r0, 80024f2 <_vfiprintf_r+0x13a>
 80024c4:	9207      	str	r2, [sp, #28]
 80024c6:	e014      	b.n	80024f2 <_vfiprintf_r+0x13a>
 80024c8:	eba0 0308 	sub.w	r3, r0, r8
 80024cc:	fa09 f303 	lsl.w	r3, r9, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	46a2      	mov	sl, r4
 80024d4:	9304      	str	r3, [sp, #16]
 80024d6:	e7d2      	b.n	800247e <_vfiprintf_r+0xc6>
 80024d8:	9b03      	ldr	r3, [sp, #12]
 80024da:	1d19      	adds	r1, r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	9103      	str	r1, [sp, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bfbb      	ittet	lt
 80024e4:	425b      	neglt	r3, r3
 80024e6:	f042 0202 	orrlt.w	r2, r2, #2
 80024ea:	9307      	strge	r3, [sp, #28]
 80024ec:	9307      	strlt	r3, [sp, #28]
 80024ee:	bfb8      	it	lt
 80024f0:	9204      	strlt	r2, [sp, #16]
 80024f2:	7823      	ldrb	r3, [r4, #0]
 80024f4:	2b2e      	cmp	r3, #46	; 0x2e
 80024f6:	d10c      	bne.n	8002512 <_vfiprintf_r+0x15a>
 80024f8:	7863      	ldrb	r3, [r4, #1]
 80024fa:	2b2a      	cmp	r3, #42	; 0x2a
 80024fc:	d134      	bne.n	8002568 <_vfiprintf_r+0x1b0>
 80024fe:	9b03      	ldr	r3, [sp, #12]
 8002500:	3402      	adds	r4, #2
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	9203      	str	r2, [sp, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	bfb8      	it	lt
 800250c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002510:	9305      	str	r3, [sp, #20]
 8002512:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80025dc <_vfiprintf_r+0x224>
 8002516:	2203      	movs	r2, #3
 8002518:	4650      	mov	r0, sl
 800251a:	7821      	ldrb	r1, [r4, #0]
 800251c:	f000 fb38 	bl	8002b90 <memchr>
 8002520:	b138      	cbz	r0, 8002532 <_vfiprintf_r+0x17a>
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	9b04      	ldr	r3, [sp, #16]
 8002526:	eba0 000a 	sub.w	r0, r0, sl
 800252a:	4082      	lsls	r2, r0
 800252c:	4313      	orrs	r3, r2
 800252e:	3401      	adds	r4, #1
 8002530:	9304      	str	r3, [sp, #16]
 8002532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002536:	2206      	movs	r2, #6
 8002538:	4829      	ldr	r0, [pc, #164]	; (80025e0 <_vfiprintf_r+0x228>)
 800253a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800253e:	f000 fb27 	bl	8002b90 <memchr>
 8002542:	2800      	cmp	r0, #0
 8002544:	d03f      	beq.n	80025c6 <_vfiprintf_r+0x20e>
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <_vfiprintf_r+0x22c>)
 8002548:	bb1b      	cbnz	r3, 8002592 <_vfiprintf_r+0x1da>
 800254a:	9b03      	ldr	r3, [sp, #12]
 800254c:	3307      	adds	r3, #7
 800254e:	f023 0307 	bic.w	r3, r3, #7
 8002552:	3308      	adds	r3, #8
 8002554:	9303      	str	r3, [sp, #12]
 8002556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002558:	443b      	add	r3, r7
 800255a:	9309      	str	r3, [sp, #36]	; 0x24
 800255c:	e768      	b.n	8002430 <_vfiprintf_r+0x78>
 800255e:	460c      	mov	r4, r1
 8002560:	2001      	movs	r0, #1
 8002562:	fb0c 3202 	mla	r2, ip, r2, r3
 8002566:	e7a6      	b.n	80024b6 <_vfiprintf_r+0xfe>
 8002568:	2300      	movs	r3, #0
 800256a:	f04f 0c0a 	mov.w	ip, #10
 800256e:	4619      	mov	r1, r3
 8002570:	3401      	adds	r4, #1
 8002572:	9305      	str	r3, [sp, #20]
 8002574:	4620      	mov	r0, r4
 8002576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800257a:	3a30      	subs	r2, #48	; 0x30
 800257c:	2a09      	cmp	r2, #9
 800257e:	d903      	bls.n	8002588 <_vfiprintf_r+0x1d0>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0c6      	beq.n	8002512 <_vfiprintf_r+0x15a>
 8002584:	9105      	str	r1, [sp, #20]
 8002586:	e7c4      	b.n	8002512 <_vfiprintf_r+0x15a>
 8002588:	4604      	mov	r4, r0
 800258a:	2301      	movs	r3, #1
 800258c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002590:	e7f0      	b.n	8002574 <_vfiprintf_r+0x1bc>
 8002592:	ab03      	add	r3, sp, #12
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	462a      	mov	r2, r5
 8002598:	4630      	mov	r0, r6
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <_vfiprintf_r+0x230>)
 800259c:	a904      	add	r1, sp, #16
 800259e:	f3af 8000 	nop.w
 80025a2:	4607      	mov	r7, r0
 80025a4:	1c78      	adds	r0, r7, #1
 80025a6:	d1d6      	bne.n	8002556 <_vfiprintf_r+0x19e>
 80025a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025aa:	07d9      	lsls	r1, r3, #31
 80025ac:	d405      	bmi.n	80025ba <_vfiprintf_r+0x202>
 80025ae:	89ab      	ldrh	r3, [r5, #12]
 80025b0:	059a      	lsls	r2, r3, #22
 80025b2:	d402      	bmi.n	80025ba <_vfiprintf_r+0x202>
 80025b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025b6:	f7ff fde2 	bl	800217e <__retarget_lock_release_recursive>
 80025ba:	89ab      	ldrh	r3, [r5, #12]
 80025bc:	065b      	lsls	r3, r3, #25
 80025be:	f53f af1d 	bmi.w	80023fc <_vfiprintf_r+0x44>
 80025c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025c4:	e71c      	b.n	8002400 <_vfiprintf_r+0x48>
 80025c6:	ab03      	add	r3, sp, #12
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	462a      	mov	r2, r5
 80025cc:	4630      	mov	r0, r6
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <_vfiprintf_r+0x230>)
 80025d0:	a904      	add	r1, sp, #16
 80025d2:	f000 f87d 	bl	80026d0 <_printf_i>
 80025d6:	e7e4      	b.n	80025a2 <_vfiprintf_r+0x1ea>
 80025d8:	08002d26 	.word	0x08002d26
 80025dc:	08002d2c 	.word	0x08002d2c
 80025e0:	08002d30 	.word	0x08002d30
 80025e4:	00000000 	.word	0x00000000
 80025e8:	08002393 	.word	0x08002393

080025ec <_printf_common>:
 80025ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f0:	4616      	mov	r6, r2
 80025f2:	4699      	mov	r9, r3
 80025f4:	688a      	ldr	r2, [r1, #8]
 80025f6:	690b      	ldr	r3, [r1, #16]
 80025f8:	4607      	mov	r7, r0
 80025fa:	4293      	cmp	r3, r2
 80025fc:	bfb8      	it	lt
 80025fe:	4613      	movlt	r3, r2
 8002600:	6033      	str	r3, [r6, #0]
 8002602:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002606:	460c      	mov	r4, r1
 8002608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800260c:	b10a      	cbz	r2, 8002612 <_printf_common+0x26>
 800260e:	3301      	adds	r3, #1
 8002610:	6033      	str	r3, [r6, #0]
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	0699      	lsls	r1, r3, #26
 8002616:	bf42      	ittt	mi
 8002618:	6833      	ldrmi	r3, [r6, #0]
 800261a:	3302      	addmi	r3, #2
 800261c:	6033      	strmi	r3, [r6, #0]
 800261e:	6825      	ldr	r5, [r4, #0]
 8002620:	f015 0506 	ands.w	r5, r5, #6
 8002624:	d106      	bne.n	8002634 <_printf_common+0x48>
 8002626:	f104 0a19 	add.w	sl, r4, #25
 800262a:	68e3      	ldr	r3, [r4, #12]
 800262c:	6832      	ldr	r2, [r6, #0]
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	42ab      	cmp	r3, r5
 8002632:	dc2b      	bgt.n	800268c <_printf_common+0xa0>
 8002634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002638:	1e13      	subs	r3, r2, #0
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	bf18      	it	ne
 800263e:	2301      	movne	r3, #1
 8002640:	0692      	lsls	r2, r2, #26
 8002642:	d430      	bmi.n	80026a6 <_printf_common+0xba>
 8002644:	4649      	mov	r1, r9
 8002646:	4638      	mov	r0, r7
 8002648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800264c:	47c0      	blx	r8
 800264e:	3001      	adds	r0, #1
 8002650:	d023      	beq.n	800269a <_printf_common+0xae>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	f003 0306 	and.w	r3, r3, #6
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf14      	ite	ne
 800265e:	2500      	movne	r5, #0
 8002660:	6833      	ldreq	r3, [r6, #0]
 8002662:	f04f 0600 	mov.w	r6, #0
 8002666:	bf08      	it	eq
 8002668:	68e5      	ldreq	r5, [r4, #12]
 800266a:	f104 041a 	add.w	r4, r4, #26
 800266e:	bf08      	it	eq
 8002670:	1aed      	subeq	r5, r5, r3
 8002672:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002676:	bf08      	it	eq
 8002678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800267c:	4293      	cmp	r3, r2
 800267e:	bfc4      	itt	gt
 8002680:	1a9b      	subgt	r3, r3, r2
 8002682:	18ed      	addgt	r5, r5, r3
 8002684:	42b5      	cmp	r5, r6
 8002686:	d11a      	bne.n	80026be <_printf_common+0xd2>
 8002688:	2000      	movs	r0, #0
 800268a:	e008      	b.n	800269e <_printf_common+0xb2>
 800268c:	2301      	movs	r3, #1
 800268e:	4652      	mov	r2, sl
 8002690:	4649      	mov	r1, r9
 8002692:	4638      	mov	r0, r7
 8002694:	47c0      	blx	r8
 8002696:	3001      	adds	r0, #1
 8002698:	d103      	bne.n	80026a2 <_printf_common+0xb6>
 800269a:	f04f 30ff 	mov.w	r0, #4294967295
 800269e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a2:	3501      	adds	r5, #1
 80026a4:	e7c1      	b.n	800262a <_printf_common+0x3e>
 80026a6:	2030      	movs	r0, #48	; 0x30
 80026a8:	18e1      	adds	r1, r4, r3
 80026aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026b4:	4422      	add	r2, r4
 80026b6:	3302      	adds	r3, #2
 80026b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026bc:	e7c2      	b.n	8002644 <_printf_common+0x58>
 80026be:	2301      	movs	r3, #1
 80026c0:	4622      	mov	r2, r4
 80026c2:	4649      	mov	r1, r9
 80026c4:	4638      	mov	r0, r7
 80026c6:	47c0      	blx	r8
 80026c8:	3001      	adds	r0, #1
 80026ca:	d0e6      	beq.n	800269a <_printf_common+0xae>
 80026cc:	3601      	adds	r6, #1
 80026ce:	e7d9      	b.n	8002684 <_printf_common+0x98>

080026d0 <_printf_i>:
 80026d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026d4:	7e0f      	ldrb	r7, [r1, #24]
 80026d6:	4691      	mov	r9, r2
 80026d8:	2f78      	cmp	r7, #120	; 0x78
 80026da:	4680      	mov	r8, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	469a      	mov	sl, r3
 80026e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026e6:	d807      	bhi.n	80026f8 <_printf_i+0x28>
 80026e8:	2f62      	cmp	r7, #98	; 0x62
 80026ea:	d80a      	bhi.n	8002702 <_printf_i+0x32>
 80026ec:	2f00      	cmp	r7, #0
 80026ee:	f000 80d5 	beq.w	800289c <_printf_i+0x1cc>
 80026f2:	2f58      	cmp	r7, #88	; 0x58
 80026f4:	f000 80c1 	beq.w	800287a <_printf_i+0x1aa>
 80026f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002700:	e03a      	b.n	8002778 <_printf_i+0xa8>
 8002702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002706:	2b15      	cmp	r3, #21
 8002708:	d8f6      	bhi.n	80026f8 <_printf_i+0x28>
 800270a:	a101      	add	r1, pc, #4	; (adr r1, 8002710 <_printf_i+0x40>)
 800270c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002710:	08002769 	.word	0x08002769
 8002714:	0800277d 	.word	0x0800277d
 8002718:	080026f9 	.word	0x080026f9
 800271c:	080026f9 	.word	0x080026f9
 8002720:	080026f9 	.word	0x080026f9
 8002724:	080026f9 	.word	0x080026f9
 8002728:	0800277d 	.word	0x0800277d
 800272c:	080026f9 	.word	0x080026f9
 8002730:	080026f9 	.word	0x080026f9
 8002734:	080026f9 	.word	0x080026f9
 8002738:	080026f9 	.word	0x080026f9
 800273c:	08002883 	.word	0x08002883
 8002740:	080027a9 	.word	0x080027a9
 8002744:	0800283d 	.word	0x0800283d
 8002748:	080026f9 	.word	0x080026f9
 800274c:	080026f9 	.word	0x080026f9
 8002750:	080028a5 	.word	0x080028a5
 8002754:	080026f9 	.word	0x080026f9
 8002758:	080027a9 	.word	0x080027a9
 800275c:	080026f9 	.word	0x080026f9
 8002760:	080026f9 	.word	0x080026f9
 8002764:	08002845 	.word	0x08002845
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	1d1a      	adds	r2, r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	602a      	str	r2, [r5, #0]
 8002770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002778:	2301      	movs	r3, #1
 800277a:	e0a0      	b.n	80028be <_printf_i+0x1ee>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	0607      	lsls	r7, r0, #24
 8002782:	f103 0104 	add.w	r1, r3, #4
 8002786:	6029      	str	r1, [r5, #0]
 8002788:	d501      	bpl.n	800278e <_printf_i+0xbe>
 800278a:	681e      	ldr	r6, [r3, #0]
 800278c:	e003      	b.n	8002796 <_printf_i+0xc6>
 800278e:	0646      	lsls	r6, r0, #25
 8002790:	d5fb      	bpl.n	800278a <_printf_i+0xba>
 8002792:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002796:	2e00      	cmp	r6, #0
 8002798:	da03      	bge.n	80027a2 <_printf_i+0xd2>
 800279a:	232d      	movs	r3, #45	; 0x2d
 800279c:	4276      	negs	r6, r6
 800279e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027a2:	230a      	movs	r3, #10
 80027a4:	4859      	ldr	r0, [pc, #356]	; (800290c <_printf_i+0x23c>)
 80027a6:	e012      	b.n	80027ce <_printf_i+0xfe>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	1d19      	adds	r1, r3, #4
 80027ae:	6029      	str	r1, [r5, #0]
 80027b0:	0605      	lsls	r5, r0, #24
 80027b2:	d501      	bpl.n	80027b8 <_printf_i+0xe8>
 80027b4:	681e      	ldr	r6, [r3, #0]
 80027b6:	e002      	b.n	80027be <_printf_i+0xee>
 80027b8:	0641      	lsls	r1, r0, #25
 80027ba:	d5fb      	bpl.n	80027b4 <_printf_i+0xe4>
 80027bc:	881e      	ldrh	r6, [r3, #0]
 80027be:	2f6f      	cmp	r7, #111	; 0x6f
 80027c0:	bf0c      	ite	eq
 80027c2:	2308      	moveq	r3, #8
 80027c4:	230a      	movne	r3, #10
 80027c6:	4851      	ldr	r0, [pc, #324]	; (800290c <_printf_i+0x23c>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027ce:	6865      	ldr	r5, [r4, #4]
 80027d0:	2d00      	cmp	r5, #0
 80027d2:	bfa8      	it	ge
 80027d4:	6821      	ldrge	r1, [r4, #0]
 80027d6:	60a5      	str	r5, [r4, #8]
 80027d8:	bfa4      	itt	ge
 80027da:	f021 0104 	bicge.w	r1, r1, #4
 80027de:	6021      	strge	r1, [r4, #0]
 80027e0:	b90e      	cbnz	r6, 80027e6 <_printf_i+0x116>
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d04b      	beq.n	800287e <_printf_i+0x1ae>
 80027e6:	4615      	mov	r5, r2
 80027e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80027ec:	fb03 6711 	mls	r7, r3, r1, r6
 80027f0:	5dc7      	ldrb	r7, [r0, r7]
 80027f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027f6:	4637      	mov	r7, r6
 80027f8:	42bb      	cmp	r3, r7
 80027fa:	460e      	mov	r6, r1
 80027fc:	d9f4      	bls.n	80027e8 <_printf_i+0x118>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d10b      	bne.n	800281a <_printf_i+0x14a>
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	07de      	lsls	r6, r3, #31
 8002806:	d508      	bpl.n	800281a <_printf_i+0x14a>
 8002808:	6923      	ldr	r3, [r4, #16]
 800280a:	6861      	ldr	r1, [r4, #4]
 800280c:	4299      	cmp	r1, r3
 800280e:	bfde      	ittt	le
 8002810:	2330      	movle	r3, #48	; 0x30
 8002812:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002816:	f105 35ff 	addle.w	r5, r5, #4294967295
 800281a:	1b52      	subs	r2, r2, r5
 800281c:	6122      	str	r2, [r4, #16]
 800281e:	464b      	mov	r3, r9
 8002820:	4621      	mov	r1, r4
 8002822:	4640      	mov	r0, r8
 8002824:	f8cd a000 	str.w	sl, [sp]
 8002828:	aa03      	add	r2, sp, #12
 800282a:	f7ff fedf 	bl	80025ec <_printf_common>
 800282e:	3001      	adds	r0, #1
 8002830:	d14a      	bne.n	80028c8 <_printf_i+0x1f8>
 8002832:	f04f 30ff 	mov.w	r0, #4294967295
 8002836:	b004      	add	sp, #16
 8002838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	f043 0320 	orr.w	r3, r3, #32
 8002842:	6023      	str	r3, [r4, #0]
 8002844:	2778      	movs	r7, #120	; 0x78
 8002846:	4832      	ldr	r0, [pc, #200]	; (8002910 <_printf_i+0x240>)
 8002848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	6829      	ldr	r1, [r5, #0]
 8002850:	061f      	lsls	r7, r3, #24
 8002852:	f851 6b04 	ldr.w	r6, [r1], #4
 8002856:	d402      	bmi.n	800285e <_printf_i+0x18e>
 8002858:	065f      	lsls	r7, r3, #25
 800285a:	bf48      	it	mi
 800285c:	b2b6      	uxthmi	r6, r6
 800285e:	07df      	lsls	r7, r3, #31
 8002860:	bf48      	it	mi
 8002862:	f043 0320 	orrmi.w	r3, r3, #32
 8002866:	6029      	str	r1, [r5, #0]
 8002868:	bf48      	it	mi
 800286a:	6023      	strmi	r3, [r4, #0]
 800286c:	b91e      	cbnz	r6, 8002876 <_printf_i+0x1a6>
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	f023 0320 	bic.w	r3, r3, #32
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	2310      	movs	r3, #16
 8002878:	e7a6      	b.n	80027c8 <_printf_i+0xf8>
 800287a:	4824      	ldr	r0, [pc, #144]	; (800290c <_printf_i+0x23c>)
 800287c:	e7e4      	b.n	8002848 <_printf_i+0x178>
 800287e:	4615      	mov	r5, r2
 8002880:	e7bd      	b.n	80027fe <_printf_i+0x12e>
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	6826      	ldr	r6, [r4, #0]
 8002886:	1d18      	adds	r0, r3, #4
 8002888:	6961      	ldr	r1, [r4, #20]
 800288a:	6028      	str	r0, [r5, #0]
 800288c:	0635      	lsls	r5, r6, #24
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	d501      	bpl.n	8002896 <_printf_i+0x1c6>
 8002892:	6019      	str	r1, [r3, #0]
 8002894:	e002      	b.n	800289c <_printf_i+0x1cc>
 8002896:	0670      	lsls	r0, r6, #25
 8002898:	d5fb      	bpl.n	8002892 <_printf_i+0x1c2>
 800289a:	8019      	strh	r1, [r3, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	4615      	mov	r5, r2
 80028a0:	6123      	str	r3, [r4, #16]
 80028a2:	e7bc      	b.n	800281e <_printf_i+0x14e>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	2100      	movs	r1, #0
 80028a8:	1d1a      	adds	r2, r3, #4
 80028aa:	602a      	str	r2, [r5, #0]
 80028ac:	681d      	ldr	r5, [r3, #0]
 80028ae:	6862      	ldr	r2, [r4, #4]
 80028b0:	4628      	mov	r0, r5
 80028b2:	f000 f96d 	bl	8002b90 <memchr>
 80028b6:	b108      	cbz	r0, 80028bc <_printf_i+0x1ec>
 80028b8:	1b40      	subs	r0, r0, r5
 80028ba:	6060      	str	r0, [r4, #4]
 80028bc:	6863      	ldr	r3, [r4, #4]
 80028be:	6123      	str	r3, [r4, #16]
 80028c0:	2300      	movs	r3, #0
 80028c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c6:	e7aa      	b.n	800281e <_printf_i+0x14e>
 80028c8:	462a      	mov	r2, r5
 80028ca:	4649      	mov	r1, r9
 80028cc:	4640      	mov	r0, r8
 80028ce:	6923      	ldr	r3, [r4, #16]
 80028d0:	47d0      	blx	sl
 80028d2:	3001      	adds	r0, #1
 80028d4:	d0ad      	beq.n	8002832 <_printf_i+0x162>
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	079b      	lsls	r3, r3, #30
 80028da:	d413      	bmi.n	8002904 <_printf_i+0x234>
 80028dc:	68e0      	ldr	r0, [r4, #12]
 80028de:	9b03      	ldr	r3, [sp, #12]
 80028e0:	4298      	cmp	r0, r3
 80028e2:	bfb8      	it	lt
 80028e4:	4618      	movlt	r0, r3
 80028e6:	e7a6      	b.n	8002836 <_printf_i+0x166>
 80028e8:	2301      	movs	r3, #1
 80028ea:	4632      	mov	r2, r6
 80028ec:	4649      	mov	r1, r9
 80028ee:	4640      	mov	r0, r8
 80028f0:	47d0      	blx	sl
 80028f2:	3001      	adds	r0, #1
 80028f4:	d09d      	beq.n	8002832 <_printf_i+0x162>
 80028f6:	3501      	adds	r5, #1
 80028f8:	68e3      	ldr	r3, [r4, #12]
 80028fa:	9903      	ldr	r1, [sp, #12]
 80028fc:	1a5b      	subs	r3, r3, r1
 80028fe:	42ab      	cmp	r3, r5
 8002900:	dcf2      	bgt.n	80028e8 <_printf_i+0x218>
 8002902:	e7eb      	b.n	80028dc <_printf_i+0x20c>
 8002904:	2500      	movs	r5, #0
 8002906:	f104 0619 	add.w	r6, r4, #25
 800290a:	e7f5      	b.n	80028f8 <_printf_i+0x228>
 800290c:	08002d37 	.word	0x08002d37
 8002910:	08002d48 	.word	0x08002d48

08002914 <__sflush_r>:
 8002914:	898a      	ldrh	r2, [r1, #12]
 8002916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002918:	4605      	mov	r5, r0
 800291a:	0710      	lsls	r0, r2, #28
 800291c:	460c      	mov	r4, r1
 800291e:	d457      	bmi.n	80029d0 <__sflush_r+0xbc>
 8002920:	684b      	ldr	r3, [r1, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dc04      	bgt.n	8002930 <__sflush_r+0x1c>
 8002926:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	dc01      	bgt.n	8002930 <__sflush_r+0x1c>
 800292c:	2000      	movs	r0, #0
 800292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002932:	2e00      	cmp	r6, #0
 8002934:	d0fa      	beq.n	800292c <__sflush_r+0x18>
 8002936:	2300      	movs	r3, #0
 8002938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800293c:	682f      	ldr	r7, [r5, #0]
 800293e:	6a21      	ldr	r1, [r4, #32]
 8002940:	602b      	str	r3, [r5, #0]
 8002942:	d032      	beq.n	80029aa <__sflush_r+0x96>
 8002944:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	075a      	lsls	r2, r3, #29
 800294a:	d505      	bpl.n	8002958 <__sflush_r+0x44>
 800294c:	6863      	ldr	r3, [r4, #4]
 800294e:	1ac0      	subs	r0, r0, r3
 8002950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002952:	b10b      	cbz	r3, 8002958 <__sflush_r+0x44>
 8002954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002956:	1ac0      	subs	r0, r0, r3
 8002958:	2300      	movs	r3, #0
 800295a:	4602      	mov	r2, r0
 800295c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800295e:	4628      	mov	r0, r5
 8002960:	6a21      	ldr	r1, [r4, #32]
 8002962:	47b0      	blx	r6
 8002964:	1c43      	adds	r3, r0, #1
 8002966:	89a3      	ldrh	r3, [r4, #12]
 8002968:	d106      	bne.n	8002978 <__sflush_r+0x64>
 800296a:	6829      	ldr	r1, [r5, #0]
 800296c:	291d      	cmp	r1, #29
 800296e:	d82b      	bhi.n	80029c8 <__sflush_r+0xb4>
 8002970:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <__sflush_r+0x100>)
 8002972:	410a      	asrs	r2, r1
 8002974:	07d6      	lsls	r6, r2, #31
 8002976:	d427      	bmi.n	80029c8 <__sflush_r+0xb4>
 8002978:	2200      	movs	r2, #0
 800297a:	6062      	str	r2, [r4, #4]
 800297c:	6922      	ldr	r2, [r4, #16]
 800297e:	04d9      	lsls	r1, r3, #19
 8002980:	6022      	str	r2, [r4, #0]
 8002982:	d504      	bpl.n	800298e <__sflush_r+0x7a>
 8002984:	1c42      	adds	r2, r0, #1
 8002986:	d101      	bne.n	800298c <__sflush_r+0x78>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b903      	cbnz	r3, 800298e <__sflush_r+0x7a>
 800298c:	6560      	str	r0, [r4, #84]	; 0x54
 800298e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002990:	602f      	str	r7, [r5, #0]
 8002992:	2900      	cmp	r1, #0
 8002994:	d0ca      	beq.n	800292c <__sflush_r+0x18>
 8002996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800299a:	4299      	cmp	r1, r3
 800299c:	d002      	beq.n	80029a4 <__sflush_r+0x90>
 800299e:	4628      	mov	r0, r5
 80029a0:	f7ff fbee 	bl	8002180 <_free_r>
 80029a4:	2000      	movs	r0, #0
 80029a6:	6360      	str	r0, [r4, #52]	; 0x34
 80029a8:	e7c1      	b.n	800292e <__sflush_r+0x1a>
 80029aa:	2301      	movs	r3, #1
 80029ac:	4628      	mov	r0, r5
 80029ae:	47b0      	blx	r6
 80029b0:	1c41      	adds	r1, r0, #1
 80029b2:	d1c8      	bne.n	8002946 <__sflush_r+0x32>
 80029b4:	682b      	ldr	r3, [r5, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0c5      	beq.n	8002946 <__sflush_r+0x32>
 80029ba:	2b1d      	cmp	r3, #29
 80029bc:	d001      	beq.n	80029c2 <__sflush_r+0xae>
 80029be:	2b16      	cmp	r3, #22
 80029c0:	d101      	bne.n	80029c6 <__sflush_r+0xb2>
 80029c2:	602f      	str	r7, [r5, #0]
 80029c4:	e7b2      	b.n	800292c <__sflush_r+0x18>
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029cc:	81a3      	strh	r3, [r4, #12]
 80029ce:	e7ae      	b.n	800292e <__sflush_r+0x1a>
 80029d0:	690f      	ldr	r7, [r1, #16]
 80029d2:	2f00      	cmp	r7, #0
 80029d4:	d0aa      	beq.n	800292c <__sflush_r+0x18>
 80029d6:	0793      	lsls	r3, r2, #30
 80029d8:	bf18      	it	ne
 80029da:	2300      	movne	r3, #0
 80029dc:	680e      	ldr	r6, [r1, #0]
 80029de:	bf08      	it	eq
 80029e0:	694b      	ldreq	r3, [r1, #20]
 80029e2:	1bf6      	subs	r6, r6, r7
 80029e4:	600f      	str	r7, [r1, #0]
 80029e6:	608b      	str	r3, [r1, #8]
 80029e8:	2e00      	cmp	r6, #0
 80029ea:	dd9f      	ble.n	800292c <__sflush_r+0x18>
 80029ec:	4633      	mov	r3, r6
 80029ee:	463a      	mov	r2, r7
 80029f0:	4628      	mov	r0, r5
 80029f2:	6a21      	ldr	r1, [r4, #32]
 80029f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80029f8:	47e0      	blx	ip
 80029fa:	2800      	cmp	r0, #0
 80029fc:	dc06      	bgt.n	8002a0c <__sflush_r+0xf8>
 80029fe:	89a3      	ldrh	r3, [r4, #12]
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a08:	81a3      	strh	r3, [r4, #12]
 8002a0a:	e790      	b.n	800292e <__sflush_r+0x1a>
 8002a0c:	4407      	add	r7, r0
 8002a0e:	1a36      	subs	r6, r6, r0
 8002a10:	e7ea      	b.n	80029e8 <__sflush_r+0xd4>
 8002a12:	bf00      	nop
 8002a14:	dfbffffe 	.word	0xdfbffffe

08002a18 <_fflush_r>:
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	4605      	mov	r5, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	b913      	cbnz	r3, 8002a28 <_fflush_r+0x10>
 8002a22:	2500      	movs	r5, #0
 8002a24:	4628      	mov	r0, r5
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	b118      	cbz	r0, 8002a32 <_fflush_r+0x1a>
 8002a2a:	6a03      	ldr	r3, [r0, #32]
 8002a2c:	b90b      	cbnz	r3, 8002a32 <_fflush_r+0x1a>
 8002a2e:	f7ff f9b1 	bl	8001d94 <__sinit>
 8002a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f3      	beq.n	8002a22 <_fflush_r+0xa>
 8002a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a3c:	07d0      	lsls	r0, r2, #31
 8002a3e:	d404      	bmi.n	8002a4a <_fflush_r+0x32>
 8002a40:	0599      	lsls	r1, r3, #22
 8002a42:	d402      	bmi.n	8002a4a <_fflush_r+0x32>
 8002a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a46:	f7ff fb99 	bl	800217c <__retarget_lock_acquire_recursive>
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	f7ff ff61 	bl	8002914 <__sflush_r>
 8002a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a54:	4605      	mov	r5, r0
 8002a56:	07da      	lsls	r2, r3, #31
 8002a58:	d4e4      	bmi.n	8002a24 <_fflush_r+0xc>
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	059b      	lsls	r3, r3, #22
 8002a5e:	d4e1      	bmi.n	8002a24 <_fflush_r+0xc>
 8002a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a62:	f7ff fb8c 	bl	800217e <__retarget_lock_release_recursive>
 8002a66:	e7dd      	b.n	8002a24 <_fflush_r+0xc>

08002a68 <__swhatbuf_r>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a70:	4615      	mov	r5, r2
 8002a72:	2900      	cmp	r1, #0
 8002a74:	461e      	mov	r6, r3
 8002a76:	b096      	sub	sp, #88	; 0x58
 8002a78:	da0c      	bge.n	8002a94 <__swhatbuf_r+0x2c>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a82:	bf0c      	ite	eq
 8002a84:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002a88:	2340      	movne	r3, #64	; 0x40
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	6031      	str	r1, [r6, #0]
 8002a8e:	602b      	str	r3, [r5, #0]
 8002a90:	b016      	add	sp, #88	; 0x58
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	466a      	mov	r2, sp
 8002a96:	f000 f849 	bl	8002b2c <_fstat_r>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	dbed      	blt.n	8002a7a <__swhatbuf_r+0x12>
 8002a9e:	9901      	ldr	r1, [sp, #4]
 8002aa0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002aa4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002aa8:	4259      	negs	r1, r3
 8002aaa:	4159      	adcs	r1, r3
 8002aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab0:	e7eb      	b.n	8002a8a <__swhatbuf_r+0x22>

08002ab2 <__smakebuf_r>:
 8002ab2:	898b      	ldrh	r3, [r1, #12]
 8002ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ab6:	079d      	lsls	r5, r3, #30
 8002ab8:	4606      	mov	r6, r0
 8002aba:	460c      	mov	r4, r1
 8002abc:	d507      	bpl.n	8002ace <__smakebuf_r+0x1c>
 8002abe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ac2:	6023      	str	r3, [r4, #0]
 8002ac4:	6123      	str	r3, [r4, #16]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	6163      	str	r3, [r4, #20]
 8002aca:	b002      	add	sp, #8
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	466a      	mov	r2, sp
 8002ad0:	ab01      	add	r3, sp, #4
 8002ad2:	f7ff ffc9 	bl	8002a68 <__swhatbuf_r>
 8002ad6:	9900      	ldr	r1, [sp, #0]
 8002ad8:	4605      	mov	r5, r0
 8002ada:	4630      	mov	r0, r6
 8002adc:	f7ff fbb8 	bl	8002250 <_malloc_r>
 8002ae0:	b948      	cbnz	r0, 8002af6 <__smakebuf_r+0x44>
 8002ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae6:	059a      	lsls	r2, r3, #22
 8002ae8:	d4ef      	bmi.n	8002aca <__smakebuf_r+0x18>
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	81a3      	strh	r3, [r4, #12]
 8002af4:	e7e3      	b.n	8002abe <__smakebuf_r+0xc>
 8002af6:	89a3      	ldrh	r3, [r4, #12]
 8002af8:	6020      	str	r0, [r4, #0]
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	81a3      	strh	r3, [r4, #12]
 8002b00:	9b00      	ldr	r3, [sp, #0]
 8002b02:	6120      	str	r0, [r4, #16]
 8002b04:	6163      	str	r3, [r4, #20]
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	b15b      	cbz	r3, 8002b22 <__smakebuf_r+0x70>
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b10:	f000 f81e 	bl	8002b50 <_isatty_r>
 8002b14:	b128      	cbz	r0, 8002b22 <__smakebuf_r+0x70>
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	f023 0303 	bic.w	r3, r3, #3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	431d      	orrs	r5, r3
 8002b26:	81a5      	strh	r5, [r4, #12]
 8002b28:	e7cf      	b.n	8002aca <__smakebuf_r+0x18>
	...

08002b2c <_fstat_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	2300      	movs	r3, #0
 8002b30:	4d06      	ldr	r5, [pc, #24]	; (8002b4c <_fstat_r+0x20>)
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	602b      	str	r3, [r5, #0]
 8002b3a:	f7fd fe90 	bl	800085e <_fstat>
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	d102      	bne.n	8002b48 <_fstat_r+0x1c>
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	b103      	cbz	r3, 8002b48 <_fstat_r+0x1c>
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	bd38      	pop	{r3, r4, r5, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000274 	.word	0x20000274

08002b50 <_isatty_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	2300      	movs	r3, #0
 8002b54:	4d05      	ldr	r5, [pc, #20]	; (8002b6c <_isatty_r+0x1c>)
 8002b56:	4604      	mov	r4, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	f7fd fe8e 	bl	800087c <_isatty>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_isatty_r+0x1a>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_isatty_r+0x1a>
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	20000274 	.word	0x20000274

08002b70 <_sbrk_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	2300      	movs	r3, #0
 8002b74:	4d05      	ldr	r5, [pc, #20]	; (8002b8c <_sbrk_r+0x1c>)
 8002b76:	4604      	mov	r4, r0
 8002b78:	4608      	mov	r0, r1
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	f7fd fe94 	bl	80008a8 <_sbrk>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d102      	bne.n	8002b8a <_sbrk_r+0x1a>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <_sbrk_r+0x1a>
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	20000274 	.word	0x20000274

08002b90 <memchr>:
 8002b90:	4603      	mov	r3, r0
 8002b92:	b510      	push	{r4, lr}
 8002b94:	b2c9      	uxtb	r1, r1
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	d101      	bne.n	8002ba2 <memchr+0x12>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e003      	b.n	8002baa <memchr+0x1a>
 8002ba2:	7804      	ldrb	r4, [r0, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	428c      	cmp	r4, r1
 8002ba8:	d1f6      	bne.n	8002b98 <memchr+0x8>
 8002baa:	bd10      	pop	{r4, pc}

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
